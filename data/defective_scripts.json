[{"commit_sha": "1d1002f58d64e00c5cb916cf8e890aff338b1c9a", "decoded_content": "---\n- name: Set docker-ce package state to latest\n  set_fact:\n    docker_pkg_state: 'latest'\n  when: docker_latest_version|bool\n\n- name: Ensure docker-ce is installed\n  package:\n    name: \"{{ docker_pkg_name }}\"\n    state: \"{{ docker_pkg_state|default('present') }}\"\n  become: true\n  notify: restart docker\n", "filename": "tasks/install-docker.yml", "repository": "haxorof/ansible-role-docker-ce", "sha": "0a3d1ef72f190984235d6bd491ac362fe6df630c"}, {"commit_sha": "42495cc1c713f98e63e44219607e1a38860b9ee8", "decoded_content": "---\n- name: Unload nmi_watchdog\n  modprobe:\n    name: nmi_watchdog\n    state: absent\n\n- name: Attempt to unload softdog live\n  modprobe:\n    name: softdog\n    state: absent\n  ignore_errors: true\n  register: __pve_rmmod_softdog\n\n- block:\n\n  - name: Stop watchdog-mux\n    service:\n      name: watchdog-mux\n      state: stopped\n    notify:\n      - restart watchdog-mux\n\n  - name: Unload softdog\n    modprobe:\n      name: softdog\n      state: absent\n\n  when: __pve_rmmod_softdog|failed\n\n- name: Disable nmi_watchdog via GRUB config\n  lineinfile:\n    dest: /etc/default/grub\n    line: 'GRUB_CMDLINE_LINUX=\"$GRUB_CMDLINE_LINUX nmi_watchdog=0\"'\n    insertafter: '^GRUB_CMDLINE_LINUX=\"'\n  register: __pve_grub\n\n- name: Update GRUB configuration\n  command: update-grub\n  register: __pve_grub_update\n  failed_when: ('error' in __pve_grub_update.stderr)\n  when: __pve_grub|changed\n  tags: skiponlxc\n", "filename": "tasks/disable_nmi_watchdog.yml", "repository": "lae/ansible-role-proxmox", "sha": "1fe504f510e2693b09fd775488cca7e29f02c4a7"}, {"commit_sha": "1d1002f58d64e00c5cb916cf8e890aff338b1c9a", "decoded_content": "---\n- name: Set distribution facts\n  set_fact:\n    _docker_os_dist: \"{{ ansible_distribution }}\"\n    _docker_os_dist_release: \"{{ ansible_distribution_release }}\"\n    _docker_os_dist_major_version: \"{{ ansible_distribution_major_version }}\"\n    _docker_os_dist_check: yes\n  tags: [\"install\", \"configure\"]\n\n- name: Reinterpret distribution facts for Linux Mint 18\n  set_fact:\n    _docker_os_dist: \"Ubuntu\"\n    _docker_os_dist_release: \"xenial\"\n    _docker_os_dist_major_version: \"16\"\n  when:\n    _docker_os_dist == \"Linux Mint\" and\n    _docker_os_dist_major_version == \"18\"\n  tags: [\"install\", \"configure\"]\n\n# https://wiki.ubuntu.com/SystemdForUpstartUsers\n# Important! systemd is only fully supported in Ubuntu 15.04 and later releases\n- name: Determine usage of systemd\n  shell: \"ps -p1 | grep systemd 1>/dev/null && echo systemd || echo upstart\"\n  become: true\n  changed_when: no\n  register: _determine_systemd_usage\n\n- name: Set fact to indicate systemd is not used\n  set_fact:\n    _docker_systemd_used: \"{{ _determine_systemd_usage is defined and _determine_systemd_usage.stdout == 'systemd' }}\"\n\n- name: Compatibility and distribution checks\n  include_tasks: checks.yml\n  tags: [\"install\", \"configure\"]\n\n- name: Setup Docker package repositories\n  include_tasks: setup-repository.yml\n  tags: [\"install\"]\n\n- name: Remove Docker versions before Docker CE\n  include_tasks: remove-pre-docker-ce.yml\n  when: docker_remove_pre_ce | bool\n  tags: [\"install\"]\n\n- name: Install Docker\n  include_tasks: install-docker.yml\n  tags: [\"install\"]\n\n- name: Configure audit logging\n  include_tasks: setup-audit.yml\n  tags: [\"configure\"]\n\n- name: Apply workarounds for bugs and/or tweaks\n  include_tasks: bug-tweaks.yml\n  tags: [\"configure\"]\n\n- name: Configure systemd service\n  include_tasks: configure-systemd.yml\n  when: _docker_systemd_used | bool\n  tags: [\"configure\"]\n\n- name: Configure non-systemd service\n  include_tasks: configure-non-systemd.yml\n  when: _docker_systemd_used | bool == false\n  tags: [\"configure\"]\n\n- name: Configure Docker\n  include_tasks: configure-docker.yml\n  tags: [\"configure\"]\n\n- name: Postinstall tasks\n  include_tasks: postinstall.yml\n  tags: [\"install\"]", "filename": "tasks/main.yml", "repository": "haxorof/ansible-role-docker-ce", "sha": "d2893bcfb3c4cfc0ec7a2b9d4b33496d780c1bf4"}, {"commit_sha": "2e36598dc2c0723f1105b3a0ca9620b412236d59", "decoded_content": "---\n- name: Install WP-CLI\n  get_url:\n    url: \"{{ wp_cli_phar_url }}\"\n    dest: \"{{ wp_cli_bin_path }}\"\n    mode: 0755\n\n- name: Install WP-CLI tab completions\n  get_url:\n    url: \"{{ wp_cli_completion_url }}\"\n    dest: \"{{ wp_cli_completion_path }}\"\n    mode: 0644\n", "filename": "roles/wp-cli/tasks/main.yml", "repository": "roots/trellis", "sha": "d4bfadd4f635232ec841443d99a696dde4f5cb2d"}, {"commit_sha": "3266d092e74707343e798255a19444bc594345b0", "decoded_content": "---\n  - name: Generate RSA key\n    command: openssl genrsa -out {{ ssl_certs_privkey_path }} {{ ssl_certs_key_size }} creates={{ ssl_certs_privkey_path }}\n\n  - name: RSA key file ownership\n    file: path={{ ssl_certs_privkey_path }} owner={{ ssl_certs_path_owner }} group={{ ssl_certs_path_group }} mode={{ ssl_certs_mode }}\n\n  - name: Generate CSR\n    command: openssl req -new -sha256 -subj \"{{ ssl_certs_fields }}\" -key {{ ssl_certs_privkey_path }} -out {{ ssl_certs_csr_path }} creates={{ ssl_certs_csr_path }}\n\n  - name: CSR file ownership\n    file: path={{ ssl_certs_csr_path }} owner={{ ssl_certs_path_owner }} group={{ ssl_certs_path_group }} mode={{ ssl_certs_mode }}\n\n  - name: Generate self-signed SSL certificate\n    command: openssl req -nodes -x509 -days {{ ssl_certs_days }} -in {{ ssl_certs_csr_path }} -key {{ ssl_certs_privkey_path }} -out {{ ssl_certs_cert_path }} -extensions v3_ca creates={{ ssl_certs_cert_path }}\n    when: ssl_certs_generate_self_signed\n\n  - name: Self-signed SSL certificate file ownership\n    file: path={{ ssl_certs_cert_path }} owner={{ ssl_certs_path_owner }} group={{ ssl_certs_path_group }} mode={{ ssl_certs_mode }}\n    when: ssl_certs_generate_self_signed\n", "filename": "tasks/generate.yml", "repository": "jdauphant/ansible-role-ssl-certs", "sha": "802c64f5586b33abf5429bc01042bbf6232e87dd"}, {"commit_sha": "02a698426c0c87880861589935baa0e7757f7ac6", "decoded_content": "---\n- name: Set java minor version\n  set_fact:\n    minor: \"{{ java_minor_version | default('.*', True) }}\"\n\n- name: 'Fetch root page {{ openjdk_root_page }}'\n  uri:\n    url: '{{ openjdk_root_page }}/{{ java_major_version }}/'\n    return_content: True\n  register: root_page\n\n- name: Find release url\n  set_fact:\n    release_url: >-\n      {{ root_page['content']\n        | regex_findall('(https://download\\.oracle\\.com/java/GA/jdk'\n          + java_major_version|string + '[.\\d]+/[\\d\\w]+/'\n          + java_major_version|string + '/GPL/openjdk-'\n          + java_major_version|string + '[\\d._]+linux-x64_bin[\\w\\d.]+)')\n      }}\n\n- name: Exit if OpenJDK version is not General-Availability Release\n  fail:\n    msg: 'OpenJDK version {{ java_major_version }} not GA Release'\n  when: release_url[1] is not defined\n\n- name: 'Get artifact checksum {{ release_url[1] }}'\n  uri:\n    url: '{{ release_url[1] }}'\n    return_content: True\n  register: artifact_checksum\n\n- name: Show artifact checksum\n  debug:\n    var: artifact_checksum.content\n\n- name: 'Download artifact from {{ release_url[0] }}'\n  get_url:\n    url: '{{ release_url[0] }}'\n    dest: '{{ download_path }}'\n    checksum: 'sha256:{{ artifact_checksum.content }}'\n  register: file_downloaded\n  retries: 20\n  delay: 5\n  until: file_downloaded is succeeded\n\n- name: Set downloaded artifact variable\n  set_fact:\n    java_artifact: '{{ file_downloaded.dest }}'\n\n- name: Split artifact name\n  set_fact:\n    parts: >-\n      {{ java_artifact\n        | regex_findall('^(.*j[dkre]{2})-([0-9]+)[u.]([0-9.]+)[-_]([a-z]+)-(x64|i586)')\n        | first | list }}\n\n- name: Set variables based on split\n  set_fact:\n    java_package: '{{ parts[0][-3:] }}'\n    java_major_version: '{{ parts[1] }}'\n    java_minor_version: '{{ parts[2] }}'\n    java_os: '{{ parts[3] }}'\n    java_arch: '{{ parts[4] }}'\n", "filename": "tasks/fetch/openjdk-fallback.yml", "repository": "lean-delivery/ansible-role-java", "sha": "d5627320a9682c247ef5666be54a488a56b2b6ba"}, {"commit_sha": "1d1002f58d64e00c5cb916cf8e890aff338b1c9a", "decoded_content": "# Configuration to avoid 'Device or resource busy'\n- block:\n  - name: Stat /proc/sys/fs/may_detach_mounts (CentOS/RedHat)\n    stat:\n      path: /proc/sys/fs/may_detach_mounts\n    register: may_detach_mounts\n\n  - name: Ensure fs.may_detach_mounts is set to avoid 'Device or resource busy' (CentOS/RedHat)\n    sysctl:\n      name: fs.may_detach_mounts\n      value: 1\n      sysctl_file: /etc/sysctl.d/99-docker.conf\n      reload: yes\n    become: yes\n    when: may_detach_mounts.stat.exists\n\n  # Keep for compatibility reasons of this role. Now everything is in the same file.\n  - name: Remove systemd drop-in for Docker Mount Flags slave configuration (CentOS/RedHat)\n    file:\n      path: /etc/systemd/system/docker.service.d/mountflags-slave.conf\n      state: absent\n    become: yes\n    notify: restart docker\n\n  - name: Set systemd service MountFlags option to \"slave\" to prevent \"device busy\" errors on CentOS/RedHat 7.3 kernels (CentOS/RedHat)\n    set_fact:\n      docker_systemd_service_config_tweaks: \"{{ docker_systemd_service_config_tweaks + _systemd_service_config_tweaks }}\"\n    vars:\n      _systemd_service_config_tweaks:\n        - 'MountFlags=slave'\n  when:\n    - _docker_os_dist == \"CentOS\" or _docker_os_dist == \"RedHat\"\n    - docker_enable_mount_flag_fix | bool\n    - ansible_kernel | version_compare('4', '<')\n", "filename": "tasks/bug-tweaks.yml", "repository": "haxorof/ansible-role-docker-ce", "sha": "ff55df29f92a3a92ed2e6868ec189f108bb5cd01"}, {"commit_sha": "1d1002f58d64e00c5cb916cf8e890aff338b1c9a", "decoded_content": "---\n- name: Ensure python and deps for Ansible modules\n  raw: dnf install -y python2 python2-dnf libselinux-python\n  become: true\n  changed_when: false\n  when: _docker_os_dist == \"Fedora\"\n\n- name: Update APT cache\n  apt:\n    update_cache: yes\n  changed_when: false\n  become: true\n  when: _docker_os_dist == \"Ubuntu\" or\n        _docker_os_dist == \"Debian\"\n\n- name: Ensure packages are installed for repository setup\n  package:\n    name: \"{{ item }}\"\n    state: present\n  with_items:\n    - \"{{ docker_repository_related_packages[_docker_os_dist] }}\"\n  become: true\n  when: _docker_os_dist == \"Ubuntu\" or\n        _docker_os_dist == \"Debian\" or\n        _docker_os_dist == \"CentOS\" or\n        _docker_os_dist == \"RedHat\"\n\n- name: Add Docker official GPG key\n  apt_key:\n    url: https://download.docker.com/linux/{{ _docker_os_dist|lower }}/gpg\n    state: present\n  become: true\n  when: (_docker_os_dist == \"Ubuntu\" and _docker_os_dist_major_version > '14')\n        or _docker_os_dist == \"Debian\"\n\n- name: Add Docker APT key (alternative for older Ubuntu systems without SNI).\n  shell: \"curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\"\n  args:\n    warn: false\n  become: true\n  changed_when: false\n  when: _docker_os_dist == \"Ubuntu\" and\n        _docker_os_dist_major_version == '14'\n\n- name: Add Docker CE repository (Ubuntu/Debian)\n  apt_repository:\n    repo: deb [arch=amd64] https://download.docker.com/linux/{{ _docker_os_dist|lower }} {{ _docker_os_dist_release }} stable {{ (docker_enable_ce_edge == true) | ternary('edge','') }}\n    state: present\n    filename: 'docker-ce'\n  become: true\n  when: _docker_os_dist == \"Ubuntu\" or\n        _docker_os_dist == \"Debian\"\n\n- name: Add Docker CE repository (Fedora/CentOS/RedHat)\n  get_url:\n    url: \"{{ docker_repository_url[_docker_os_dist] }}\"\n    dest: /etc/yum.repos.d/docker-ce.repo\n    mode: 0644\n  become: true\n  register: docker_repo\n  when: _docker_os_dist == \"CentOS\" or\n        _docker_os_dist == \"Fedora\" or\n        _docker_os_dist == \"RedHat\"\n\n- name: Determine Docker CE Edge repo status (Fedora/CentOS/RedHat)\n  shell: \"{{ docker_cmd_check_edge_repo_status[_docker_os_dist] }}\"\n  args:\n    warn: false\n  ignore_errors: yes\n  changed_when: false\n  register: cmd_docker_ce_edge_enabled\n  when: _docker_os_dist == \"CentOS\" or\n        _docker_os_dist == \"Fedora\" or\n        _docker_os_dist == \"RedHat\"\n\n- name: Set current Docker CE Edge repo status fact (Fedora/CentOS/RedHat)\n  set_fact:\n    _fact_docker_ce_edge_enabled: \"{{ cmd_docker_ce_edge_enabled.stdout == 'enabled = True' }}\"\n  when: _docker_os_dist == \"CentOS\" or\n        _docker_os_dist == \"Fedora\" or\n        _docker_os_dist == \"RedHat\"\n\n- name: Enable/Disable Docker CE Edge Repository (Fedora/CentOS/RedHat)\n  shell: \"{{ docker_cmd_enable_disable_edge_repo[_docker_os_dist] }}\"\n  become: true\n  when: (_docker_os_dist == \"CentOS\" or _docker_os_dist == \"Fedora\" or _docker_os_dist == \"RedHat\") and\n        _fact_docker_ce_edge_enabled != docker_enable_ce_edge\n\n# disable rt-beta so we don't get a 403 error retrieving repomd.xml\n- name: Check if rhel-7-server-rt-beta-rpms Repository is enabled (RedHat)\n  shell: \"subscription-manager repos --list-enabled | grep rhel-7-server-rt-beta-rpms\"\n  become: true\n  register: cmd_rhel_rt_beta_repo_enabled\n  when: _docker_os_dist == \"RedHat\"\n  changed_when: false\n  failed_when: cmd_rhel_rt_beta_repo_enabled.rc not in [ 0, 1 ]\n\n- name: Disable rhel-7-server-rt-beta-rpms Repository (RedHat)\n  shell: \"subscription-manager repos --disable=rhel-7-server-rt-beta-rpms\"\n  become: true\n  when: _docker_os_dist == \"RedHat\" and cmd_rhel_rt_beta_repo_enabled.rc == 0\n\n# container-selinux package wants this\n- name: Check if rhel-7-server-extras-rpms Repository is enabled (RedHat)\n  shell: \"subscription-manager repos --list-enabled | grep rhel-7-server-extras-rpms\"\n  become: true\n  register: cmd_rhel_extras_repo_enabled\n  when: _docker_os_dist == \"RedHat\"\n  changed_when: false\n  failed_when: cmd_rhel_extras_repo_enabled.rc not in [ 0, 1 ]\n\n- name: Enable rhel-7-server-extras-rpms Repository (RedHat)\n  shell: \"subscription-manager repos --enable=rhel-7-server-extras-rpms\"\n  become: true\n  when: _docker_os_dist == \"RedHat\" and cmd_rhel_extras_repo_enabled.rc == 1\n\n- name: Update repository cache\n  shell: \"{{ docker_cmd_update_repo_cache[_docker_os_dist] }}\"\n  args:\n    warn: false\n  become: true\n  when: docker_repo.changed", "filename": "tasks/setup-repository.yml", "repository": "haxorof/ansible-role-docker-ce", "sha": "083a06ada7e59272066385e4463b79a6d4db144c"}, {"commit_sha": "2e36598dc2c0723f1105b3a0ca9620b412236d59", "decoded_content": "wp_cli_bin_path: /usr/bin/wp\nwp_cli_phar_url: \"https://github.com/wp-cli/wp-cli/releases/download/v0.23.1/wp-cli-0.23.1.phar\"\nwp_cli_completion_url: \"https://raw.githubusercontent.com/wp-cli/wp-cli/master/utils/wp-completion.bash\"\nwp_cli_completion_path: /etc/bash_completion.d\n", "filename": "roles/wp-cli/defaults/main.yml", "repository": "roots/trellis", "sha": "7fb8e2df3c5d3c82a7ef1232ee4dc59df150cd5c"}, {"commit_sha": "42495cc1c713f98e63e44219607e1a38860b9ee8", "decoded_content": "---\n- name: Remove ZFS modprobe configuration\n  file:\n    dest: /etc/modprobe.d/zfs.conf\n    state: absent\n  when: >\n    (pve_zfs_options is not defined) or\n    (pve_zfs_options is defined and not pve_zfs_options) or\n    (not pve_zfs_enabled)\n\n- name: Disable loading of ZFS module on init\n  file:\n    dest: /etc/modules-load.d/zfs.conf\n    state: absent\n  when: not pve_zfs_enabled\n\n- block:\n  - name: Re-enable nmi_watchdog via GRUB config\n    lineinfile:\n      dest: /etc/default/grub\n      line: 'GRUB_CMDLINE_LINUX=\"$GRUB_CMDLINE_LINUX nmi_watchdog=0\"'\n      state: absent\n    register: __pve_grub\n\n  - name: Update GRUB configuration\n    command: update-grub\n    register: __pve_grub_update\n    failed_when: ('error' in __pve_grub_update.stderr)\n    when: __pve_grub|changed\n    tags: skiponlxc\n\n  - name: Remove ipmi_watchdog modprobe configuration\n    file:\n      dest: /etc/modprobe.d/ipmi_watchdog.conf\n      state: absent\n\n  - name: Load softdog\n    modprobe:\n      name: softdog\n\n  - name: Set PVE HA Manager watchdog configuration back to default\n    copy:\n      content: \"WATCHDOG_MODULE=softdog\"\n      dest: /etc/default/pve-ha-manager\n    notify:\n      - restart watchdog-mux\n  when: pve_watchdog != 'ipmi'\n", "filename": "tasks/kernel_module_cleanup.yml", "repository": "lae/ansible-role-proxmox", "sha": "35249bdc7295ef01f8a84b1380043e851dbe94b6"}, {"commit_sha": "42495cc1c713f98e63e44219607e1a38860b9ee8", "decoded_content": "---\n- include: disable_nmi_watchdog.yml\n\n- name: Load ipmi_watchdog module\n  modprobe:\n    name: ipmi_watchdog\n    params: \"action={{ pve_watchdog_ipmi_action }} timeout={{ pve_watchdog_ipmi_timeout }} panic_wdt_timeout=10\"\n    state: present\n  tags: skiponlxc\n\n- name: Configure ipmi_watchdog module to load on boot\n  copy:\n    content: \"options ipmi_watchdog action={{ pve_watchdog_ipmi_action }} timeout={{ pve_watchdog_ipmi_timeout }} panic_wdt_timeout=10\"\n    dest: /etc/modprobe.d/ipmi_watchdog.conf\n\n- name: Configure PVE HA Manager to use ipmi_watchdog\n  copy:\n    content: \"WATCHDOG_MODULE=ipmi_watchdog\"\n    dest: /etc/default/pve-ha-manager\n  notify:\n    - restart watchdog-mux\n", "filename": "tasks/ipmi_watchdog.yml", "repository": "lae/ansible-role-proxmox", "sha": "d8624b862eb046e739d3c3b54c3889705a001ad1"}, {"commit_sha": "1d1002f58d64e00c5cb916cf8e890aff338b1c9a", "decoded_content": "---\n- name: Ensure /etc/docker directory exists\n  file:\n    path: /etc/docker\n    state: directory\n    mode: 0755\n  become: true\n\n- name: Configure Docker daemon (file)\n  copy:\n    src: \"{{ docker_daemon_config_file }}\"\n    dest: /etc/docker/daemon.json\n  become: true\n  notify: restart docker\n  when: docker_daemon_config_file is defined\n\n- name: Configure Docker daemon (variables)\n  copy:\n    content: \"{{ docker_daemon_config | to_nice_json }}\"\n    dest: /etc/docker/daemon.json\n  become: true\n  notify: restart docker\n  when: docker_daemon_config_file is not defined and\n        docker_daemon_config is defined\n\n- name: Ensure Docker default user namespace is defined in subuid and subgid\n  lineinfile:\n    path: \"{{ item }}\"\n    regexp: '^dockremap'\n    line: 'dockremap:500000:65536'\n  become: yes\n  with_items:\n    - /etc/subuid\n    - /etc/subgid\n  when: (_docker_os_dist == \"CentOS\" or _docker_os_dist == \"RedHat\") and\n        ((docker_daemon_config is defined and\n        docker_daemon_config['userns-remap'] is defined and\n        docker_daemon_config['userns-remap'] == 'default') or\n        docker_bug_usermod|bool == true)\n\n- name: Ensure thin-provisioning-tools is installed when devicemapper is used (Ubuntu)\n  package:\n    name: thin-provisioning-tools\n    state: present\n  become: yes\n  when: (_docker_os_dist == \"Ubuntu\" or _docker_os_dist == \"Debian\") and\n        docker_daemon_config['storage-driver'] is defined and\n        docker_daemon_config['storage-driver'] == 'devicemapper'\n\n- name: Enable Docker service\n  service:\n    name: docker\n    enabled: yes\n  notify: restart docker\n  register: docker_service\n  become: yes\n\n- name: Trigger start/restart of Docker\n  service:\n    name: docker\n  notify: restart docker\n  changed_when: docker_service.status.SubState != \"running\"\n  when: docker_service.status is defined\n", "filename": "tasks/configure-docker.yml", "repository": "haxorof/ansible-role-docker-ce", "sha": "ed1532b4ca5a1698ce0e3262b0b0c78711acf156"}, {"commit_sha": "1d1002f58d64e00c5cb916cf8e890aff338b1c9a", "decoded_content": "- name: Combine all systemd service configuration options\n  set_fact:\n    _systemd_service_config: \"{{ docker_systemd_service_config_tweaks + docker_systemd_service_config }}\"\n\n- name: Ensure /etc/systemd/system/docker.service.d directory exists\n  file:\n    path: /etc/systemd/system/docker.service.d\n    state: directory\n    mode: 0755\n  become: yes\n\n- name: Setup default Docker drop-in to enable use of environment file\n  template:\n    src: drop-ins/default.conf.j2\n    dest: /etc/systemd/system/docker.service.d/default.conf\n  become: yes\n  notify: restart docker\n  register: _systemd_docker_dropin\n  vars:\n    systemd_envs_dir: \"{{ docker_envs_dir[_docker_os_dist] }}\"\n    systemd_service_conf: \"{{ _systemd_service_config }}\"\n\n- name: Combine Docker daemon environment variable configuration\n  set_fact:\n    docker_service_envs: \"{{ docker_service_envs | combine(_docker_service_opts) | combine(docker_daemon_envs) }}\"\n  vars:\n    _docker_service_opts:\n      DOCKER_OPTS: \"{{ docker_daemon_opts }}\"\n\n- name: Setup Docker environment file {{ docker_envs_dir[_docker_os_dist] }}/docker-envs\n  template:\n    src: docker-envs.j2\n    dest: \"{{ docker_envs_dir[_docker_os_dist] }}/docker-envs\"\n  become: yes\n  notify: restart docker\n  vars:\n    docker_envs: \"{{ docker_service_envs }}\"\n\n- name: Force daemon reload of systemd\n  systemd:\n    daemon_reload: yes\n  become: yes\n  notify: restart docker\n  when: _systemd_docker_dropin|changed", "filename": "tasks/configure-systemd.yml", "repository": "haxorof/ansible-role-docker-ce", "sha": "407838bdfb01178a2d0c4a744395d3446214526d"}, {"commit_sha": "02a698426c0c87880861589935baa0e7757f7ac6", "decoded_content": "---\n- name: Set java minor version\n  set_fact:\n    minor: \"{{ java_minor_version | default('.*', True) }}\"\n\n- name: 'Fetch root page {{ java_root_page }}'\n  win_uri:\n    url: '{{ openjdk_root_page }}/{{ java_major_version }}/'\n    return_content: True\n    follow_redirects: all\n  register: root_page\n\n- name: Find release url\n  set_fact:\n    release_url: >-\n      {{ root_page['content'] |\n      regex_findall('(https://download\\.oracle\\.com/java/GA/jdk' +\n      java_major_version|string +\n      '[.\\d]+/[\\d\\w]+/' +\n      java_major_version|string +\n      '/GPL/openjdk-' +\n      java_major_version|string +\n      '[\\d._]+windows-x64_bin[\\w\\d.]+)')\n      }}\n\n- name: Exit if OpenJDK version is not General-Availability Release\n  fail:\n    msg: 'OpenJDK version {{ java_major_version }} not GA Release, or maybe something wrong with java.net'\n  when: release_url[1] is not defined\n\n- name: 'Get artifact checksum {{ release_url[1] }}'\n  win_uri:\n    url: '{{ release_url[1] }}'\n    return_content: True\n  register: artifact_checksum\n\n- name: Show artifact checksum\n  debug:\n    var: artifact_checksum.content\n\n- name: Set artifact basename\n  set_fact:\n    artifact_url: '{{ release_url[0] }}'\n    artifact_basename: \"{{ (release_url[0] | urlsplit('path')).split('/')[-1] }}\"\n\n- name: Get SHA256 checksum of file\n  win_stat:\n    path: '{{ download_path }}\\{{ artifact_basename }}'\n    get_checksum: True\n    checksum_algorithm: sha256\n  register: artifact\n\n- name: Download with checksum validation\n  include_tasks: fetch_checksum.yml\n  when: |\n    not artifact.stat.exists\n    or artifact.stat.checksum != artifact_checksum.content\n  retries: 15\n  delay: 2\n  until: artifact.stat.checksum == artifact_checksum.content\n\n- name: Downloaded artifact\n  set_fact:\n    java_artifact: '{{ artifact.stat.path }}'\n\n- name: Split artifact name\n  set_fact:\n    parts: >-\n      {{ java_artifact | win_basename\n        | regex_findall('^(.*j[dkre]{2})-([0-9]+)[u.]([0-9.]+)[-_]([a-z]+)-(x64|i586)')\n        | first | list }}\n\n- name: Set variables based on split\n  set_fact:\n    java_package: '{{ parts[0][-3:] }}'\n    java_major_version: '{{ parts[1] }}'\n    java_minor_version: '{{ parts[2] }}'\n    java_os: '{{ parts[3] }}'\n    java_arch: '{{ parts[4] }}'\n", "filename": "tasks/win_fetch/openjdk-fallback.yml", "repository": "lean-delivery/ansible-role-java", "sha": "e0bdceb339c95e44de176ec27b350e8a631d0c54"}, {"commit_sha": "1d1002f58d64e00c5cb916cf8e890aff338b1c9a", "decoded_content": "- name: Combine Docker daemon environment variable configuration\n  set_fact:\n    docker_service_envs: \"{{ docker_service_envs | combine(_docker_service_opts) | combine(docker_daemon_envs) }}\"\n  vars:\n    _docker_service_opts:\n      DOCKER_OPTS: \"{{ docker_daemon_opts }}\"\n\n- name: Setup Docker environment file {{ docker_envs_dir[_docker_os_dist] }}/docker\n  template:\n    src: docker-envs.j2\n    dest: \"{{ docker_envs_dir[_docker_os_dist] }}/docker\"\n  become: yes\n  notify: restart docker\n  vars:\n    docker_envs: \"{{ docker_service_envs }}\"", "filename": "tasks/configure-non-systemd.yml", "repository": "haxorof/ansible-role-docker-ce", "sha": "ea43181c3cbef322147ad703a1389d78fa6f2b48"}, {"commit_sha": "1d1002f58d64e00c5cb916cf8e890aff338b1c9a", "decoded_content": "---\n- name: Determine Docker version\n  command: bash -c \"docker version | grep Version | awk '{print $2}'\"\n  ignore_errors: yes\n  changed_when: false\n  register: cmd_docker_version\n\n- name: Set fact if old Docker installation shall be removed\n  set_fact:\n    remove_old_docker: \"{{ docker_remove_pre_ce | bool }} == true and {{ cmd_docker_version.stdout_lines[0] | search('-ce') }} == false\"\n  when: cmd_docker_version.stdout_lines is defined and cmd_docker_version.stdout_lines[0] is defined\n\n- name: Check if Docker is running\n  command: systemctl status docker\n  ignore_errors: yes\n  changed_when: false\n  register: service_docker_status\n  when: remove_old_docker | default(false) | bool == true\n  become: true\n\n- name: Stop Docker service\n  service:\n    name: docker\n    state: stopped\n  when: \"service_docker_status.rc | default(1) == 0\"\n\n- name: Remove old Docker installation before Docker CE\n  package:\n    name: \"{{ item }}\"\n    state: absent\n  become: true\n  when: remove_old_docker|default(false) | bool == true\n  with_items:\n    - \"{{ docker_old_packages[_docker_os_dist] }}\"\n", "filename": "tasks/remove-pre-docker-ce.yml", "repository": "haxorof/ansible-role-docker-ce", "sha": "fdd5fdbabd232c84896f0363d9a310bdbc4a2c83"}, {"commit_sha": "42495cc1c713f98e63e44219607e1a38860b9ee8", "decoded_content": "---\n# tasks file for ansible-role-proxmox\n- name: Gather distribution specific variables\n  include_vars: \"debian-{{ ansible_distribution_release }}.yml\"\n\n- assert:\n    that:\n      - \"hostvars[item].ansible_default_ipv4.address is defined\"\n    msg: \"Missing IP address and other information for {{ item }}. Have you gathered its facts?\"\n  with_items: \"{{ groups[pve_group] }}\"\n\n- assert:\n    that:\n      - \"inventory_hostname in groups[pve_group]\"\n    msg: \"This host does not appear to be in the group {{ pve_group }}, did you specify the pve_group host variable correctly?\"\n  when: pve_cluster_enabled\n\n- include: ssh_cluster_config.yml\n\n- name: Run handlers if needed (sshd reload)\n  meta: flush_handlers\n\n- name: Enumerate all cluster hosts within the hosts file\n  blockinfile:\n    dest: /etc/hosts\n    marker: \"# {mark} ANSIBLE MANAGED: Proxmox Cluster Hosts\"\n    content: |\n      {% for host in groups[pve_group] %}\n      {{ hostvars[host].ansible_default_ipv4.address }} {{ hostvars[host].ansible_fqdn }} {{ hostvars[host].ansible_hostname }}{% if ansible_fqdn == hostvars[host].ansible_fqdn %} pvelocalhost{% endif %}\n\n      {% endfor %}\n\n- name: Remove conflicting lines in hosts files\n  lineinfile:\n    dest: /etc/hosts\n    # expanded, this turns out to be, for example:\n    # regexp: '^(?!10\\.0\\.3\\.17 test01\\.lxc test01( pvelocalhost)?)(?!10\\.0\\.3\\.17)[\\w:.]+(\\s+.*)?\\s(test01\\.lxc|test01|pvelocalhost)(\\s+.*|\\s*)$'\n    # basically first we ignore lines that match from the host enumeration task\n    # above, then we match against different IPs (e.g. NOT 10.0.3.17) that have\n    # the hostname/fqdn we inserted a record for previously, taking care also to\n    # detect word boundaries (\\b wasn't working for some reason)\n    regexp: '^(?!{{ hostvars[item].ansible_default_ipv4.address | regex_escape() }} {{ hostvars[item].ansible_fqdn | regex_escape() }} {{ hostvars[item].ansible_hostname | regex_escape() }}( pvelocalhost)?)(?!{{ hostvars[item].ansible_default_ipv4.address | regex_escape() }})[\\w:.]+(\\s+.*)?\\s({{ hostvars[item].ansible_fqdn | regex_escape() }}|{{ hostvars[item].ansible_hostname | regex_escape() }}{% if ansible_fqdn == hostvars[item].ansible_fqdn %}|pvelocalhost{% endif %})(\\s+.*|\\s*)$'\n    state: absent\n    backup: yes\n  with_items: \"{{ groups[pve_group] }}\"\n\n- name: Trust Proxmox' packaging key\n  apt_key:\n    data: \"{{ lookup('file', pve_release_key) }}\"\n    id: \"{{ pve_release_key_id }}\"\n    state: present\n\n- name: Remove os-prober package\n  apt:\n    name: os-prober\n    state: absent\n\n- name: Add Proxmox repository\n  apt_repository:\n    repo: \"{{ pve_repository_line }}\"\n    filename: proxmox\n    state: present\n  register: __pve_repo\n\n- name: Run apt-get dist-upgrade on repository changes\n  apt:\n    update_cache: yes\n    cache_valid_time: 3600\n    upgrade: dist\n  when: __pve_repo.changed\n\n- name: Perform system upgrades\n  apt:\n    update_cache: yes\n    cache_valid_time: 3600\n    upgrade: yes\n  when: pve_run_system_upgrades\n\n- include: identify_needed_packages.yml\n\n- name: Install Proxmox VE and related packages\n  apt:\n    name: \"{{ item }}\"\n    state: latest\n  with_items: \"{{ __pve_install_packages }}\"\n\n- block:\n  - name: Remove automatically installed PVE Enterprise repo configuration\n    apt_repository:\n      repo: \"{{ item }}\"\n      filename: pve-enterprise\n      state: absent\n    with_items:\n      - \"deb https://enterprise.proxmox.com/debian jessie pve-enterprise\"\n      - \"deb https://enterprise.proxmox.com/debian stretch pve-enterprise\"\n      - \"deb https://enterprise.proxmox.com/debian/pve jessie pve-enterprise\"\n      - \"deb https://enterprise.proxmox.com/debian/pve stretch pve-enterprise\"\n\n  - name: Remove subscription check wrapper function in web UI\n    patch:\n      src: \"00_remove_checked_command_{{ ansible_distribution_release }}.patch\"\n      basedir: /\n      strip: 1\n      backup: yes\n    when:\n      - pve_remove_subscription_warning\n\n  when:\n    - \"'pve-no-subscription' in pve_repository_line\"\n\n- include: kernel_updates.yml\n\n- include: ipmi_watchdog.yml\n  when: pve_watchdog == 'ipmi'\n\n- include: zfs.yml\n  when: pve_zfs_enabled\n\n- include: kernel_module_cleanup.yml\n\n- include: pve_cluster_config.yml\n  when: pve_cluster_enabled\n\n- name: Configure Proxmox groups\n  proxmox_group:\n  args: \"{{ item }}\"\n  with_items: \"{{ pve_groups }}\"\n  when: \"not pve_cluster_enabled or (pve_cluster_enabled and inventory_hostname == groups[pve_group][0])\"\n\n- name: Configure Proxmox user accounts\n  proxmox_user:\n  args: \"{{ item }}\"\n  with_items: \"{{ pve_users }}\"\n  when: \"not pve_cluster_enabled or (pve_cluster_enabled and inventory_hostname == groups[pve_group][0])\"\n\n- name: Configure Proxmox ACLs\n  proxmox_acl:\n  args: \"{{ item }}\"\n  with_items: \"{{ pve_acls }}\"\n  when: \"not pve_cluster_enabled or (pve_cluster_enabled and inventory_hostname == groups[pve_group][0])\"\n\n- include: ssl_config.yml\n  when:\n    - pve_ssl_private_key is defined\n    - pve_ssl_certificate is defined\n\n- include: ssl_letsencrypt.yml\n  when: pve_ssl_letsencrypt\n", "filename": "tasks/main.yml", "repository": "lae/ansible-role-proxmox", "sha": "20b1f6ef3bf7ee0905be500387ff7abee3fc5b4e"}, {"commit_sha": "1d1002f58d64e00c5cb916cf8e890aff338b1c9a", "decoded_content": "---\n- name: Ensure auditd is installed\n  package:\n    name: auditd\n    state: present\n  become: true\n  when: _docker_os_dist == \"Ubuntu\" or\n        _docker_os_dist == \"Debian\"\n\n- name: Copy Docker audit rules\n  copy:\n    src: files/etc/audit/rules.d/docker.rules\n    dest: /etc/audit/rules.d/docker.rules\n  become: yes\n  notify: restart auditd\n  when: docker_enable_audit | bool\n\n- name: Ensure Docker audit rules are removed\n  file:\n    path: /etc/audit/rules.d/docker.rules\n    state: absent\n  become: yes\n  notify: restart auditd\n  when: not docker_enable_audit | bool\n", "filename": "tasks/setup-audit.yml", "repository": "haxorof/ansible-role-docker-ce", "sha": "defb54fb0fd7975e8d05b0e6eda0ed3ccb4ebb1f"}]