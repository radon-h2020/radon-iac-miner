[{"commit_sha": "8af8d9f258ac145b451e2f0db433e5e9ad335ea2", "decoded_content": "---\n\n- name: Check for vulnerable ansible version (CVE-2016-8614, CVE-2016-8628)\n  assert:\n    that:\n      - \"{{ ansible_version.full | version_compare('2.1.3.0', '>=') }}\"\n    msg: \"VULNERABLE ansible version DETECTED, please update to v2.1.3 or newer! Exiting.\"\n  run_once: true\n  delegate_to: 127.0.0.1\n  tags:\n    - always\n\n- name: Check for local requirements\n  shell: tor --version && sha1sum --version && sort --version && uniq --version && wc --version && cut --version\n  run_once: true\n  delegate_to: 127.0.0.1\n  tags:\n    - always\n\n- name: Set OS specific variables\n  include_vars: \"{{ ansible_os_family }}.yml\"\n  tags:\n   - always\n\n- include: ip-list.yml\n  tags:\n    - always\n\n- include: apt_prepare.yml\n  when: ansible_pkg_mgr == 'apt'\n  tags:\n   - debian\n   - install\n\n- include: rpm_prepare.yml\n  when: ansible_os_family == 'RedHat'\n  tags:\n   - centos\n   - fedora\n   - install\n\n- include: openbsd_prepare.yml\n  when: ansible_system == 'OpenBSD'\n  tags:\n   - openbsd\n\n- include: freebsd_prepare.yml\n  when: ansible_system == 'FreeBSD'\n  tags:\n   - freebsd\n\n# we specifically opt for present over latest to improve performance\n- name: Ensure tor is installed\n  become: yes\n  package:\n    name: \"{{ item }}\"\n    state: present\n  with_items: \"{{ tor_packages }}\"\n  # apt starts a tor client instance by default after installing the package\n  # we do not need that\n  notify:\n    - stop-and-mask default tor instance\n    - disable default tor instance FreeBSD\n  tags:\n   - openbsd\n   - freebsd\n   - debian\n   - centos\n   - fedora\n   - install\n\n- meta: flush_handlers\n\n- include: configure.yml\n  tags:\n   - debian\n   - centos\n   - fedora\n   - openbsd\n   - freebsd\n\n- include: linux_service.yml\n  when: ansible_system == 'Linux'\n  tags:\n   - debian\n   - centos\n   - fedora\n\n- include: openbsd_service.yml\n  when: ansible_system == 'OpenBSD'\n  tags:\n   - openbsd\n\n- include: freebsd_service.yml\n  when: ansible_system == 'FreeBSD'\n  tags:\n   - freebsd\n", "filename": "tasks/main.yml", "repository": "nusenu/ansible-relayor", "sha": "d98ea2a48d9f37fc6707bb9161c2400c1679169c"}, {"commit_sha": "694a4890fcf0daa375d6a173511f6ff7dd0f2335", "decoded_content": "---\n\n- name: Setup FreeBSD specific variables (set_fact)\n  set_fact:\n    tor_DataDir: /var/db/tor-instances\n    tor_ConfDir: /usr/local/etc/tor/enabled\n  tags:\n   - reconfigure\n   - renewkey\n   - createdir\n\n- name: Ensure Tor is installed (FreeBSD)\n  become: yes\n  pkgng: name=tor state=present\n  tags:\n   - install\n\n- name: Ensure sequential IP IDs are avoided (net.inet.ip.random_id)\n  become: yes\n  sysctl: name=net.inet.ip.random_id value=1 reload=no sysctl_set=yes\n  tags:\n    - freebsdkern\n\n- name: Gather current kern.ipc.somaxconn setting (FreeBSD)\n  shell: \"sysctl kern.ipc.somaxconn|cut -d' '  -f2\"\n  register: currentsomaxconn\n  tags:\n   - freebsdkern\n\n- name: Ensure somaxconn setting is reasonable (FreeBSD)\n  become: yes\n  sysctl: name=kern.ipc.somaxconn value={{ freebsd_somaxconn }} reload=no sysctl_set=yes\n  when: currentsomaxconn.stdout|int < {{ freebsd_somaxconn }}\n  tags:\n   - freebsdkern\n\n- name: Gather current kern.ipc.nmbclusters setting (FreeBSD)\n  shell: \"sysctl kern.ipc.nmbclusters|cut -d' '  -f2\"\n  register: currentnmbc\n  tags:\n   - freebsdkern\n\n- name: Ensure nmbclusters setting is reasonable (FreeBSD)\n  become: yes\n  sysctl: name=kern.ipc.nmbclusters value={{ freebsd_nmbclusters }} reload=no sysctl_set=yes\n  when: currentnmbc.stdout|int < {{ freebsd_nmbclusters }}\n  tags:\n   - freebsdkern\n", "filename": "tasks/freebsd_install.yml", "repository": "nusenu/ansible-relayor", "sha": "ecd05ee5fa3c823f5d4ecd97f24f5af00a50fb06"}, {"commit_sha": "dc73f16743fa376672b427980c6ca044dd6fa68a", "decoded_content": "---\n\n# Linux/systemd section (uses service module)\n# ===========================================\n\n- name: Ensure Tor instances are reloaded if its torrc changed (Linux/systemd)\n  become: yes\n  service:\n    name: \"tor@{{ item.item.0.ipv4 }}_{{ item.item.1.orport }}.service\"\n    state: reloaded\n  with_items: \"{{ instances.results }}\"\n  when: item.changed == True\n  tags:\n   - reconfigure\n\n- name: Ensure Tor instances are enabled and started (Linux/systemd)\n  become: yes\n  service:\n    name: \"tor@{{ item.0.ipv4 }}_{{ item.1.orport }}.service\"\n    enabled: yes\n    state: started\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n", "filename": "tasks/linux_service.yml", "repository": "nusenu/ansible-relayor", "sha": "40c2a0aab1694994d5a45958f0086449cf1d43e4"}, {"commit_sha": "32211ebd2a9f45112f8dceda80bc95d0db029fb4", "decoded_content": "---\n\n- name: Setup Debian specific variables (set_fact)\n  set_fact:\n    tor_user: debian-tor\n    tor_DataDir: /var/lib/tor-instances\n    tor_ConfDir: /etc/tor/instances\n    tor_RunAsDaemon: 0\n  tags:\n   - reconfigure\n   - renewkey\n\n- name: Ensure torproject gpg key is installed (A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89)\n  become: yes\n  apt_key: data=\"{{ lookup('file', 'deb.torproject.org_A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89.pub') }}\"\n    id=A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89\n    state=present\n\n- name: Ensure torproject.org repository is present (APT)\n  become: yes\n  apt_repository: repo='deb http://deb.torproject.org/torproject.org {{ tor_distribution_release }} main'\n    state=present \n    update_cache=yes\n\n# we specifically opt for present over latest to improve performance\n# \"latest\" is covered by auto updates\n- name: Ensure Tor is installed (APT)\n  become: yes\n  apt: pkg=\"{{ item }}\" state=present\n  with_items: \n    - deb.torproject.org-keyring\n    - tor\n  # apt starts a tor client instance by default after installing the package\n  # we do not need that\n  notify:\n    - stop-and-mask default tor instance\n\n\n#- name: Ensure AppArmor allows access to necessary files (Ubuntu)\n#  become: yes\n#  lineinfile: dest=/etc/apparmor.d/local/system_tor line={{ item }}\n#  with_items:\n#    - '/etc/tor/enabled/*\\ r,'\n#    - '/{,var/}run/tor/*.pid\\ w,'\n#    - '/var/lib/tor/**\\ w,'\n#  when: ansible_distribution == 'Ubuntu'\n#  notify: restart apparmor\n\n- meta: flush_handlers\n", "filename": "tasks/apt_install.yml", "repository": "nusenu/ansible-relayor", "sha": "ffad5368a5a2f427dd880a5eab0d98ef0af0eeca"}, {"commit_sha": "12d2d30c292e5749809cd7476458762a4de31554", "decoded_content": "---\n\n- name: Setup OpenBSD specific variables (set_fact)\n  set_fact:\n    tor_DataDir: /var/tor\n    tor_PidDir: /var/tor/pids\n  tags: configure\n\n- name: Gather current tor install state (OpenBSD)\n  command: \"pkg_info -qe tor-*\"\n  ignore_errors: yes\n  register: torpkg\n\n# the following task fails HARD on purpose (if ports are not there)\n# TODO: add an opt-in var that takes care of installing ports\n- name: Install tor from ports (OpenBSD)\n  sudo: yes\n  shell: \"cd /usr/ports/net/tor && make install\"\n  when: torpkg.rc == 1\n\n- name: Gather current system-wide file descriptor limits (OpenBSD)\n  shell: \"sysctl kern.maxfiles|cut -d= -f2\"\n  register: currentlimits\n\n- name: Ensure system-wide runtime file descriptor limits are reasonable (OpenBSD)\n  sudo: yes\n  command: \"sysctl kern.maxfiles=20000\"\n  when: currentlimits.stdout|int < 20000\n\n- name: Ensure system-wide persistent file descriptor limits are reasonable (OpenBSD)\n  sudo: yes\n  lineinfile: dest=/etc/sysctl.conf regexp=^kern.maxfiles line=\"kern.maxfiles=20000\" create=yes\n  when: currentlimits.stdout|int < 20000\n\n- name: Ensure Tor process file descriptor limits are reasonable (OpenBSD)\n  sudo: yes\n  lineinfile: \"dest=/etc/login.conf line='{{ tor_loginclass }}::openfiles-max=13500::tc=daemon:'\"\n  #TODO\n  #notify: restart tor\n\n- name: Ensure 'tor_user' has appropriate login class set (OpenBSD)\n  sudo: yes\n  user: name={{ tor_user }} login_class={{ tor_loginclass }}\n  #TODO \n  #notify: restart tor\n", "filename": "tasks/openbsd_install.yml", "repository": "nusenu/ansible-relayor", "sha": "3929e7fce2cbb6891d2f9e994ddd158f933f973e"}, {"commit_sha": "8cf75eb68465f1126872131afd102e05068a9df2", "decoded_content": "---\n\n- name: Add tor rpm key\n  sudo: yes\n  rpm_key: state=present key=https://deb.torproject.org/torproject.org/rpm/RPM-GPG-KEY-torproject.org.asc\n\n- set_fact: tor_rpm_distribution_os=\"el\"\n  when: ansible_distribution == 'CentOS' or ansible_distribution == \"Red Hat Enterprise Linux\"\n\n# we do not actually support Fedora\n- set_fact: tor_rpm_distribution_os=\"fc\"\n  when: ansible_distribution == 'Fedora'\n\n# the tor_alpha var is taken into account here (template)\n- name: Add torproject.org repository (YUM)\n  sudo: yes\n  template: src=torproject.yum.repo dest=/etc/yum.repos.d/torproject.repo owner=root group=root\n\n# we specifically opt for present over latest to improve performance\n# \"latest\" is covered by auto updates\n- name: Ensure Tor package is installed (YUM)\n  sudo: yes\n  yum: name=tor state=present\n\n# we need this for the seboolean ansible module to work\n- name: Ensure setsebool (SELinux) dependencies are installed (CentOS)\n  sudo: yes\n  yum: name=libsemanage-python state=present\n\n- name: Ensure the presence of the multi-instance systemd unit file (CentOS)\n  sudo: yes\n  copy: src=centos_tor@.service dest=/lib/systemd/system/tor@.service owner=root mode=0644 backup=yes setype=tor_unit_file_t\n  notify: systemctl daemon-reload\n\n- name: Ensure SELinux boolean (tor_can_network_relay) is set appropriately (CentOS)\n  sudo: yes\n  seboolean: name=tor_can_network_relay state=yes persistent=yes\n\n- meta: flush_handlers\n", "filename": "tasks/yum_install.yml", "repository": "nusenu/ansible-relayor", "sha": "4c996ca850c8faf1b20f4a6b7afe7ddfbf32e62e"}, {"commit_sha": "dc73f16743fa376672b427980c6ca044dd6fa68a", "decoded_content": "---\n\n- name: Ensure local DataDir folders exist (LOCAL)\n  file:\n    path: \"{{ tor_offline_masterkey_dir }}/{{ inventory_hostname }}-{{ item.0.ipv4 }}_{{ item.1.orport }}\"\n    state: directory\n    mode: 0700\n  delegate_to: 127.0.0.1\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n  tags:\n   - createdir\n\n- name: Ensure all relay keys exist (LOCAL)\n  local_action: command tor --PublishServerDescriptor 0 --orport auto --list-fingerprint --datadirectory \"{{ tor_offline_masterkey_dir }}/{{ inventory_hostname }}-{{ item.0.ipv4 }}_{{ item.1.orport }}\" --Log \"err stdout\"\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n\n- name: Generate new Ed25519 signing keys (LOCAL)\n  local_action: command tor --keygen --SigningKeyLifetime {{ tor_signingkeylifetime_days}}\\ days --datadirectory \"{{ tor_offline_masterkey_dir }}/{{ inventory_hostname }}-{{ item.0.ipv4 }}_{{ item.1.orport }}\" --Log \"err stdout\"\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n  tags:\n   - renewkey\n\n- name: Detect duplicate relay keys across relays (LOCAL)\n  shell: sha1sum {{ tor_offline_masterkey_dir }}/*/keys/secret_id_key {{ tor_offline_masterkey_dir }}/*/keys/ed25519_master_id_secret_key|cut -d/ -f1|sort|uniq -d|wc -l\n  delegate_to: 127.0.0.1\n  register: dupcount\n\n- name: Abort on duplicate relay keys\n  fail: msg=\"Duplicate relay key detected! Aborting.\"\n  when: dupcount.stdout != \"0\"\n\n- name: Detect if Ed25519 master keys are on the relay\n  stat:\n    path: \"{{ tor_DataDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}/keys/ed25519_master_id_secret_key\"\n  become: yes\n  register: masterkeycheck\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n\n- name: Abort if Ed25519 master keys are on the relay\n  fail: msg=\"\n\n            Ed25519 MASTER KEY detected on the relay - it is NOT supposed to be there! Aborting.\"\n  when: item.stat.exists == True\n  with_items: \"{{ masterkeycheck.results }}\"\n\n- name: Collect fingerprints for MyFamily (LOCAL)\n  shell: cut {{ tor_offline_masterkey_dir }}/*/fingerprint -d\" \" -f2|xargs|sed -e 's/ /,/g'\n  delegate_to: 127.0.0.1\n  register: family\n  tags:\n   - reconfigure\n\n- name: Ensure per-instance tor users exist\n  become: yes\n  user:\n    name: _tor-{{ item.0.ipv4 }}_{{ item.1.orport }}\n    system: yes\n    shell: /bin/false\n    createhome: no\n    home: \"{{ tor_DataDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}\"\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n\n- name: Ensure per-instance config folders exist (Debian only)\n  become: yes\n  file:\n    path: \"{{ tor_ConfDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}\"\n    state: directory\n    mode: 0755\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n  when: ansible_pkg_mgr == 'apt'\n\n- name: Ensure DataDir exists\n  become: yes\n  file:\n    path: \"{{ tor_DataDir }}\"\n    state: directory\n    owner: root\n    mode: 0755\n\n- name: Ensure \"keys\" subfolder exists\n  become: yes\n  file:\n    path: \"{{ tor_DataDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}/keys\"\n    state: directory\n    owner: \"_tor-{{ item.0.ipv4 }}_{{ item.1.orport }}\"\n    group: \"_tor-{{ item.0.ipv4 }}_{{ item.1.orport }}\"\n    mode: 0700\n    recurse: yes\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n\n- name: Ensure RSA key is in place (without overriding existing keys)\n  become: yes\n  copy:\n    src: \"{{ tor_offline_masterkey_dir }}/{{ inventory_hostname }}-{{ item.0.ipv4 }}_{{ item.1.orport }}/keys/{{ item[2] }}\"\n    dest: \"{{ tor_DataDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}/keys/{{ item[2] }}\"\n    owner: \"_tor-{{ item.0.ipv4 }}_{{ item.1.orport }}\"\n    mode: 0700\n    force: no\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n   - [ 'secret_id_key' ]\n\n- name: Fetch RSA key for comparision\n  become: yes\n  fetch:\n    src: \"{{ tor_DataDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}/keys/{{ item[2] }}\"\n    dest: \"{{ tor_offline_masterkey_dir }}/{{ inventory_hostname }}-{{ item.0.ipv4 }}_{{ item.1.orport }}/keys/{{ item[2] }}.untrustedremotekey\"\n    flat: yes\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n   - [ 'secret_id_key' ]\n\n- name: Compare local vs. remote RSA key (secret_id_key)\n  local_action: shell sha1sum {{ tor_offline_masterkey_dir }}/{{ inventory_hostname }}-\"{{ item.0.ipv4 }}_{{ item.1.orport }}\"/keys/secret_id_key*|cut -d/ -f1|uniq -d|wc -l\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n  register: rsakey\n\n- name: Abort if local and remote RSA keys do not match\n  fail: 'msg=\"\n\n\n   Key MISMATCH detected: Remote RSA key does not match local key - manual intervention required.\n\n   We detected that the remote host uses an RSA key that was not generated by us.\n   We will not override it with our locally generated key.\n\n   If you want to make use of the remote RSA key you have to override the local key manually:\n\n\n   cd ~/.tor/offlinemasterkeys/<inventoryname>-<IP_port>/keys\n\n   mv secret_id_key.untrustedremotekey secret_id_key\"'\n  when: item.stdout != \"1\"\n  with_items: \"{{ rsakey.results }}\"\n\n# this task is separated from the task named \"Ensure RSA key is in place\" because it is not run with 'force=no'\n- name: Transmit new Ed25519 signing keys\n  become: yes\n  copy:\n    src: \"{{ tor_offline_masterkey_dir }}/{{ inventory_hostname }}-{{ item.0.ipv4 }}_{{ item.1.orport }}/keys/{{ item[2] }}\"\n    dest: \"{{ tor_DataDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}/keys/{{ item[2] }}\"\n    owner: \"_tor-{{ item.0.ipv4 }}_{{ item.1.orport }}\"\n    mode: 0700\n    setype: tor_var_lib_t\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n   - [ 'ed25519_signing_cert', 'ed25519_signing_secret_key' ]\n  tags:\n   - renewkey\n\n# This needs to be at the end to fix SELinux contexts recursively\n- name: Ensure per-instance DataDir have proper permissions\n  become: yes\n  file:\n    path: \"{{ tor_DataDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}\"\n    state: directory\n    owner: \"_tor-{{ item.0.ipv4 }}_{{ item.1.orport }}\"\n    group: \"_tor-{{ item.0.ipv4 }}_{{ item.1.orport }}\"\n    mode: 0700\n    recurse: yes\n    setype: tor_var_lib_t\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n\n- name: Ensure Tor config directory exists\n  become: yes\n  file:\n    path: \"{{ tor_ConfDir }}\"\n    state: directory\n    owner: root\n    group: \"{{ tor_user }}\"\n    mode: 0755\n\n- name: Ensure tor-exit-notice.html is present (if we are an exit)\n  become: yes\n  template:\n    src: tor-exit-notice.html\n    dest: \"{{ tor_ConfDir }}/tor-exit-notice.html\"\n    mode: 0444\n  when: tor_ExitRelay == True and tor_ExitNoticePage == True\n\n- name: Generating torrc file(s)\n  become: yes\n  template:\n    src: torrc\n    dest: \"{{ (ansible_pkg_mgr != 'apt')| ternary(tor_ConfDir ~ '/' ~ item.0.ipv4 ~ '_' ~ item.1.orport ~ '.torrc', tor_ConfDir ~ '/' ~ item.0.ipv4 ~ '_' ~ item.1.orport ~ '/torrc') }}\"\n    owner: root\n    mode: 0644\n    backup: yes\n    validate: \"tor --verify-config -f %s\"\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n  register: instances\n  notify:\n    - Ensure Tor instances are reloaded if its torrc changed (FreeBSD)\n  tags:\n   - reconfigure\n", "filename": "tasks/configure.yml", "repository": "nusenu/ansible-relayor", "sha": "653500718877a2fa7023080e141f21c83078bb45"}, {"commit_sha": "95a0ffb87f5a5ecbf178ee4a5b4f890acaba6cbe", "decoded_content": "---\n\n- name: Ensure local key folders exist (LOCAL)\n  file: path={{ offline_masterkey_dir }}/{{ item[0] }}_{{ item.1.orport }}/keys\n    state=directory mode=700\n  delegate_to: 127.0.0.1\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n  tags:\n   - createdir\n\n- name: Ensure all relay keys exist (LOCAL)\n  local_action: command tor --PublishServerDescriptor 0 --orport 1234 --list-fingerprint --datadirectory \"{{ offline_masterkey_dir }}/{{ item[0] }}_{{ item.1.orport }}\" --Log \"err stdout\"\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n\n- name: Generate new Ed25519 signing keys\n  local_action: command tor --keygen --SigningKeyLifetime {{ tor_signingkeylifetime_days}}\\ days --datadirectory \"{{ offline_masterkey_dir }}/{{ item[0] }}_{{ item.1.orport }}\" --Log \"err stdout\"\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n  tags:\n   - renewkey\n\n- name: Detect duplicate relay keys across relays (LOCAL)\n  shell: sha1sum {{ offline_masterkey_dir }}/*/keys/secret_id_key {{ offline_masterkey_dir }}/*/keys/ed25519_master_id_secret_key|cut -d/ -f1|sort|uniq -d|wc -l\n  delegate_to: 127.0.0.1\n  register: dupcount\n\n- name: Abort on duplicate relay keys\n  fail: msg=\"Duplicate relay key detected! Aborting.\"\n  when: dupcount.stdout != \"0\"\n\n- name: Detect if Ed25519 master keys are on the relay\n  stat: path={{ tor_DataDir }}/{{ item[0] }}_{{ item.1.orport }}/keys/ed25519_master_id_secret_key\n  become: yes\n  register: masterkeycheck\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n\n- name: Abort if Ed25519 master keys are on the relay\n  fail: msg=\"\n\n            Ed25519 MASTER KEY detected on the relay - it is NOT supposed to be there! Aborting.\"\n  when: item.stat.exists == True\n  with_items: masterkeycheck.results\n\n- name: Collect fingerprints for MyFamily (LOCAL)\n  shell: cut {{ offline_masterkey_dir }}/*/fingerprint -d\" \" -f2|xargs|sed -e 's/ /,/g'\n  delegate_to: 127.0.0.1\n  register: family\n  tags:\n   - reconfigure\n\n- name: Ensure per-instance tor users exist\n  become: yes\n  user: name=_tor-{{ item[0] }}_{{ item.1.orport }} system=yes shell=/bin/false createhome=no home={{ tor_DataDir }}/{{ item[0] }}_{{ item.1.orport }}\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n  tags:\n   - createdir\n\n- name: Ensure per-instance config folders exist (Debian only)\n  become: yes\n  file: path={{ tor_ConfDir }}/{{ item[0] }}_{{ item.1.orport }} state=directory mode=755\n  with_nested:\n   - tor_ips\n   - tor_ports\n  when: ansible_pkg_mgr == 'apt'\n  tags:\n   - createdir\n\n- name: Ensure DataDir exists\n  become: yes\n  file: path={{ tor_DataDir }}\n    state=directory\n    owner=root\n    mode=0755\n  tags:\n   - createdir\n\n- name: Ensure per-instance DataDir exists\n  become: yes\n  file: path={{ tor_DataDir }}/{{ item[0] }}_{{ item.1.orport }}\n    state=directory\n    owner=\"_tor-{{ item[0] }}_{{ item.1.orport }}\"\n    group=\"_tor-{{ item[0] }}_{{ item.1.orport }}\"\n    mode=0700\n    recurse=yes\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n  tags:\n   - createdir\n\n- name: Ensure \"keys\" subfolder exists\n  become: yes\n  file: path={{ tor_DataDir }}/{{ item[0] }}_{{ item.1.orport }}/keys\n    state=directory\n    owner=\"_tor-{{ item[0] }}_{{ item.1.orport }}\"\n    group=\"_tor-{{ item[0] }}_{{ item.1.orport }}\"\n    mode=0700\n    recurse=yes\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n\n- name: Ensure RSA key is in place (without overriding existing keys)\n  become: yes\n  copy: src={{ offline_masterkey_dir }}/{{ item[0] }}_{{ item.1.orport }}/keys/{{ item[2] }}\n   dest={{ tor_DataDir }}/{{ item[0] }}_{{ item.1.orport }}/keys/{{ item[2] }}\n   owner=\"_tor-{{ item[0] }}_{{ item.1.orport }}\"\n   mode=700 force=no\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n   - [ 'secret_id_key' ]\n\n- name: Fetch RSA key for comparision\n  become: yes\n  fetch: src={{ tor_DataDir }}/{{ item[0] }}_{{ item.1.orport }}/keys/{{ item[2] }}\n    dest={{ offline_masterkey_dir }}/{{ item[0] }}_{{ item.1.orport }}/keys/{{ item[2] }}.untrustedremotekey\n    flat=yes\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n   - [ 'secret_id_key' ]\n\n- name: Compare local vs. remote RSA key (secret_id_key)\n  local_action: shell sha1sum {{ offline_masterkey_dir }}/\"{{ item[0] }}_{{ item.1.orport }}\"/keys/secret_id_key*|cut -d/ -f1|uniq -d|wc -l\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n  register: rsakey\n\n- name: Abort if local and remote RSA keys do not match\n  fail: 'msg=\"\n\n\n   Key MISMATCH detected: Remote RSA key does not match local key - manual intervention required.\n\n   We deteted that the remote host uses an RSA key that was not generated by us.\n   We will not override it with our locally generated key.\n\n   If you want to make use of the remote RSA key you have to override the local key manually:\n\n\n   cd ~/.tor/offlinemasterkeys/<IP_port>/keys\n\n   mv secret_id_key.untrustedremotekey secret_id_key\"'\n  when: item.stdout != \"1\"\n  with_items: rsakey.results\n\n# this task is separated from the task named \"Ensure RSA key is in place\" because it is not run with 'force=no'\n- name: Renew Ed25519 signing keys\n  become: yes\n  copy: src={{ offline_masterkey_dir }}/{{ item[0] }}_{{ item.1.orport }}/keys/{{ item[2] }}\n   dest={{ tor_DataDir }}/{{ item[0] }}_{{ item.1.orport }}/keys/{{ item[2] }}\n   owner=\"_tor-{{ item[0] }}_{{ item.1.orport }}\"\n   mode=700\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n   - [ 'ed25519_master_id_public_key', 'ed25519_signing_cert', 'ed25519_signing_secret_key' ]\n  tags:\n   - renewkey\n\n- name: Ensure Tor config directory exists\n  become: yes\n  file: path={{ tor_ConfDir }}\n    state=directory\n    owner=root\n    group={{ tor_user }}\n    mode=755\n\n- name: Ensure LogDir exists\n  become: yes\n  file: path={{ tor_LogDir }}\n    state=directory\n    owner=root\n    mode=755\n  when: ansible_pkg_mgr != 'apt'\n\n# we only use distinct logfiles on systems that have no SyslogIdentityTag support yet (all non-Debian plaforms)\n# otherwise we log to syslog with SyslogIdentityTag to avoid the filesystem permissions troubles with logrotate.\n# We aim to log to syslog+SyslogIdentityTag for all platforms eventually.\n# This is a medium-term workaround until all platform get SyslogIdentityTag support\n# without this workaround tor will fail to start after logrotate created new logfiles because\n# logrotate is not not aware that every tor instance runs under a distinct user.\n# This effectively disables logrotate.\n- name: Ensure per-instance LogDir exists\n  become: yes\n  file: path={{ tor_LogDir }}/{{ item[0] }}_{{ item.1.orport }}\n    state=directory\n    owner=_tor-{{ item[0] }}_{{ item.1.orport }}\n    group=_tor-{{ item[0] }}_{{ item.1.orport }}\n    mode=700\n  with_nested:\n   - tor_ips\n   - tor_ports\n  when: ansible_pkg_mgr != 'apt'\n\n- name: Generating torrc file(s)\n  become: yes\n  template: >\n    src=torrc\n    dest=\"{{ (ansible_pkg_mgr != 'apt')| ternary(tor_ConfDir ~ '/' ~ item[0] ~ '_' ~ item.1.orport ~ '.torrc', tor_ConfDir ~ '/' ~ item[0] ~ '_' ~ item.1.orport ~ '/torrc') }}\"\n    owner=root\n    mode=0644\n    backup=yes\n    validate=\"tor --verify-config -f %s\"\n  with_nested:\n   - tor_ips\n   - tor_ports\n  register: instances\n  tags:\n   - reconfigure\n", "filename": "tasks/configure.yml", "repository": "nusenu/ansible-relayor", "sha": "47d0b3c467647d4a309f7231d0a976906113bee3"}, {"commit_sha": "df06f3c3304c3f73f740d444222642fbad41bebb", "decoded_content": "---\n\n- name: Add tor rpm key\n  become: yes\n  rpm_key: state=present key=https://deb.torproject.org/torproject.org/rpm/RPM-GPG-KEY-torproject.org.asc\n\n- set_fact: tor_rpm_distribution_os=\"fc\"\n  when: ansible_distribution == 'Fedora'\n\n- name: Ensure dependencies are installed (libselinux-python)\n  become: yes\n  dnf: name=libselinux-python state=present\n\n# the tor_alpha var is taken into account here (template)\n- name: Add torproject.org repository (YUM)\n  become: yes\n  template: src=torproject.yum.repo dest=/etc/yum.repos.d/torproject.repo owner=root group=root\n\n# we specifically opt for present over latest to improve performance\n# \"latest\" is covered by auto updates\n- name: Ensure Tor package is installed (dnf)\n  become: yes\n  dnf: name=tor,libsemanage-python state=present\n\n# we need this for the seboolean ansible module to work\n#- name: Ensure setsebool (SELinux) dependencies are installed (Fedora)\n#  become: yes\n#  dnf: name=libsemanage-python state=present\n#  when: ansible_selinux.status == 'enabled'\n\n- name: Ensure the presence of the multi-instance systemd unit file (Fedora)\n  become: yes\n  copy: src=centos_tor@.service dest=/lib/systemd/system/tor@.service owner=root mode=0644 backup=yes setype=tor_unit_file_t\n  notify: systemctl daemon-reload\n\n- name: Ensure SELinux boolean (tor_can_network_relay) is set appropriately (Fedora)\n  become: yes\n  seboolean: name=tor_can_network_relay state=yes persistent=yes\n#  when: ansible_selinux.status == 'enabled'\n\n- meta: flush_handlers\n", "filename": "tasks/dnf_install.yml", "repository": "nusenu/ansible-relayor", "sha": "52ea222a49ca8c3a688c20c74e90922416a662a1"}, {"commit_sha": "fa66f2d6f5193cce5c2f9086e78f9bff39133e60", "decoded_content": "---\n\n- name: Ensure local key folders exist (LOCAL)\n  file: path={{ offline_masterkey_dir }}/{{ item[0] }}_{{ item.1.orport }}/keys\n    state=directory mode=700\n  delegate_to: 127.0.0.1\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n  tags:\n   - createdir\n\n- name: Ensure all relay keys exist (LOCAL)\n  local_action: command tor --PublishServerDescriptor 0 --orport 1234 --list-fingerprint --datadirectory \"{{ offline_masterkey_dir }}/{{ item[0] }}_{{ item.1.orport }}\" --Log \"err stdout\"\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n\n- name: Generate new Ed25519 signing keys\n  local_action: command tor --keygen --SigningKeyLifetime {{ tor_signingkeylifetime_days}}\\ days --datadirectory \"{{ offline_masterkey_dir }}/{{ item[0] }}_{{ item.1.orport }}\" --Log \"err stdout\"\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n  tags:\n   - renewkey\n\n- name: Detect duplicate relay keys across relays (LOCAL)\n  shell: sha1sum {{ offline_masterkey_dir }}/*/keys/secret_id_key {{ offline_masterkey_dir }}/*/keys/ed25519_master_id_secret_key|cut -d/ -f1|sort|uniq -d|wc -l\n  delegate_to: 127.0.0.1\n  register: dupcount\n\n- name: Abort on duplicate relay keys\n  fail: msg=\"Duplicate relay key detected! Aborting.\"\n  when: dupcount.stdout != \"0\"\n\n- name: Detect if Ed25519 master keys are on the relay\n  stat: path={{ tor_DataDir }}/{{ item[0] }}_{{ item.1.orport }}/keys/ed25519_master_id_secret_key\n  become: yes\n  register: masterkeycheck\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n\n- name: Abort if Ed25519 master keys are on the relay\n  fail: msg=\"\n\n            Ed25519 MASTER KEY detected on the relay - it is NOT supposed to be there! Aborting.\"\n  when: item.stat.exists == True\n  with_items: masterkeycheck.results\n\n- name: Collect fingerprints for MyFamily (LOCAL)\n  shell: cut {{ offline_masterkey_dir }}/*/fingerprint -d\" \" -f2|xargs|sed -e 's/ /,/g'\n  delegate_to: 127.0.0.1\n  register: family\n  tags:\n   - reconfigure\n\n- name: Ensure per-instance tor users exist\n  become: yes\n  user: name=_tor-{{ item[0] }}_{{ item.1.orport }} system=yes shell=/bin/false createhome=no home={{ tor_DataDir }}/{{ item[0] }}_{{ item.1.orport }}\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n  tags:\n   - createdir\n\n- name: Ensure per-instance config folders exist (Debian only)\n  become: yes\n  file: path={{ tor_ConfDir }}/{{ item[0] }}_{{ item.1.orport }} state=directory mode=755\n  with_nested:\n   - tor_ips\n   - tor_ports\n  when: ansible_pkg_mgr == 'apt'\n  tags:\n   - createdir\n\n- name: Ensure DataDir exists\n  become: yes\n  file: path={{ tor_DataDir }}\n    state=directory\n    owner=root\n    mode=0755\n  tags:\n   - createdir\n\n- name: Ensure \"keys\" subfolder exists\n  become: yes\n  file: path={{ tor_DataDir }}/{{ item[0] }}_{{ item.1.orport }}/keys\n    state=directory\n    owner=\"_tor-{{ item[0] }}_{{ item.1.orport }}\"\n    group=\"_tor-{{ item[0] }}_{{ item.1.orport }}\"\n    mode=0700\n    recurse=yes\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n\n- name: Ensure RSA key is in place (without overriding existing keys)\n  become: yes\n  copy: src={{ offline_masterkey_dir }}/{{ item[0] }}_{{ item.1.orport }}/keys/{{ item[2] }}\n   dest={{ tor_DataDir }}/{{ item[0] }}_{{ item.1.orport }}/keys/{{ item[2] }}\n   owner=\"_tor-{{ item[0] }}_{{ item.1.orport }}\"\n   mode=700 force=no\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n   - [ 'secret_id_key' ]\n\n- name: Fetch RSA key for comparision\n  become: yes\n  fetch: src={{ tor_DataDir }}/{{ item[0] }}_{{ item.1.orport }}/keys/{{ item[2] }}\n    dest={{ offline_masterkey_dir }}/{{ item[0] }}_{{ item.1.orport }}/keys/{{ item[2] }}.untrustedremotekey\n    flat=yes\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n   - [ 'secret_id_key' ]\n\n- name: Compare local vs. remote RSA key (secret_id_key)\n  local_action: shell sha1sum {{ offline_masterkey_dir }}/\"{{ item[0] }}_{{ item.1.orport }}\"/keys/secret_id_key*|cut -d/ -f1|uniq -d|wc -l\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n  register: rsakey\n\n- name: Abort if local and remote RSA keys do not match\n  fail: 'msg=\"\n\n\n   Key MISMATCH detected: Remote RSA key does not match local key - manual intervention required.\n\n   We deteted that the remote host uses an RSA key that was not generated by us.\n   We will not override it with our locally generated key.\n\n   If you want to make use of the remote RSA key you have to override the local key manually:\n\n\n   cd ~/.tor/offlinemasterkeys/<IP_port>/keys\n\n   mv secret_id_key.untrustedremotekey secret_id_key\"'\n  when: item.stdout != \"1\"\n  with_items: rsakey.results\n\n# this task is separated from the task named \"Ensure RSA key is in place\" because it is not run with 'force=no'\n- name: Renew Ed25519 signing keys\n  become: yes\n  copy: src={{ offline_masterkey_dir }}/{{ item[0] }}_{{ item.1.orport }}/keys/{{ item[2] }}\n   dest={{ tor_DataDir }}/{{ item[0] }}_{{ item.1.orport }}/keys/{{ item[2] }}\n   owner=\"_tor-{{ item[0] }}_{{ item.1.orport }}\"\n   mode=700\n   setype=tor_var_lib_t\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n   - [ 'ed25519_master_id_public_key', 'ed25519_signing_cert', 'ed25519_signing_secret_key' ]\n  tags:\n   - renewkey\n\n# This needs to be at the end to fix SELinux contexts recursively\n- name: Ensure per-instance DataDir exists\n  become: yes\n  file: path={{ tor_DataDir }}/{{ item[0] }}_{{ item.1.orport }}\n    state=directory\n    owner=\"_tor-{{ item[0] }}_{{ item.1.orport }}\"\n    group=\"_tor-{{ item[0] }}_{{ item.1.orport }}\"\n    mode=0700\n    recurse=yes\n    setype=tor_var_lib_t\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n  tags:\n   - createdir\n\n- name: Ensure Tor config directory exists\n  become: yes\n  file: path={{ tor_ConfDir }}\n    state=directory\n    owner=root\n    group={{ tor_user }}\n    mode=755\n\n- name: Ensure LogDir exists\n  become: yes\n  file: path={{ tor_LogDir }}\n    state=directory\n    owner=root\n    mode=755\n  when: ansible_system != 'Linux'\n\n# we only use distinct logfiles on systems that have no SyslogIdentityTag support yet (all non-Debian plaforms)\n# otherwise we log to syslog with SyslogIdentityTag to avoid the filesystem permissions troubles with logrotate.\n# We aim to log to syslog+SyslogIdentityTag for all platforms eventually.\n# This is a medium-term workaround until all platform get SyslogIdentityTag support\n# without this workaround tor will fail to start after logrotate created new logfiles because\n# logrotate is not not aware that every tor instance runs under a distinct user.\n# This effectively disables logrotate.\n- name: Ensure per-instance LogDir exists\n  become: yes\n  file: path={{ tor_LogDir }}/{{ item[0] }}_{{ item.1.orport }}\n    state=directory\n    owner=_tor-{{ item[0] }}_{{ item.1.orport }}\n    group=_tor-{{ item[0] }}_{{ item.1.orport }}\n    mode=700\n  with_nested:\n   - tor_ips\n   - tor_ports\n  when: ansible_system != 'Linux'\n\n- name: Generating torrc file(s)\n  become: yes\n  template: >\n    src=torrc\n    dest=\"{{ (ansible_pkg_mgr != 'apt')| ternary(tor_ConfDir ~ '/' ~ item[0] ~ '_' ~ item.1.orport ~ '.torrc', tor_ConfDir ~ '/' ~ item[0] ~ '_' ~ item.1.orport ~ '/torrc') }}\"\n    owner=root\n    mode=0644\n    backup=yes\n    validate=\"tor --verify-config -f %s\"\n  with_nested:\n   - tor_ips\n   - tor_ports\n  register: instances\n  tags:\n   - reconfigure\n", "filename": "tasks/configure.yml", "repository": "nusenu/ansible-relayor", "sha": "167e44f8652d0288e4728fec053960f6b6cbf7fa"}, {"commit_sha": "95a0ffb87f5a5ecbf178ee4a5b4f890acaba6cbe", "decoded_content": "---\n\n- name: Setup RPM specific variables (set_fact)\n  set_fact:\n    tor_user: toranon\n    tor_ConfDir: /etc/tor\n    tor_RunAsDaemon: 0\n  tags:\n   - reconfigure\n   - renewkey\n\n- name: Ensure tor package is installed (dnf)\n  become: yes\n  dnf: name=tor,libselinux-python,libsemanage-python state=present\n  when: ansible_pkg_mgr == 'dnf'\n  notify: re-gather facts\n\n# re-gathering facts after installing libselinux-python on F23\n# is a workaround for https://github.com/ansible/ansible-modules-core/issues/2432\n- meta: flush_handlers\n\n- name: Ensure EPEL repo is installed (yum)\n  become: yes\n  yum: name=epel-release\n  when: ansible_pkg_mgr == 'yum'\n\n- name: Ensure tor package is installed (yum)\n  become: yes\n  yum: name=tor,libsemanage-python state=present\n  when: ansible_pkg_mgr == 'yum'\n\n- name: Ensure SELinux boolean (tor_can_network_relay) is set appropriately (Fedora)\n  become: yes\n  seboolean: name=tor_can_network_relay state=yes persistent=yes\n  when: ansible_selinux.status == 'enabled'\n\n", "filename": "tasks/rpm_install.yml", "repository": "nusenu/ansible-relayor", "sha": "8d16346f0b8e9948b65bf34e38a532d416e5ceb1"}, {"commit_sha": "f5364b57f100ae9fa898af59b7812ec0c447ac42", "decoded_content": "---\n\n# workaround for this ansible IPv6 filter bug\n# https://github.com/ansible/ansible/issues/14829\n# we simply convert False to empty lists\n- name: workaround for ansible bug 14829 (1/3)\n  set_fact:\n    v6tmp: []\n  when: v6tmp == False\n\n- name: workaround for ansible bug 14829 (2/3)\n  set_fact:\n    tor_v6ips: \"{{ v6tmp[0:ipv4_count|int]|ipv6('address') }}\"\n\n- name: workaround for ansible bug 14829 (3/3)\n  set_fact:\n    tor_v6ips: []\n  when: tor_v6ips == False\n\n- name: setup IP list (1/2)\n  set_fact:\n    ips:\n        ipv4: \"{{ item.0 }}\"\n        ipv6: \"{{ item.1 }}\"\n  with_together:\n        - \"{{ tor_v4ips }}\"\n        - \"{{ tor_v6ips }}\"\n  register: ipsinterm\n\n- name: setup IP list (2/2)\n  set_fact:\n    tor_ips: \"{{ ipsinterm.results | map(attribute='ansible_facts.ips')|list}}\"\n", "filename": "tasks/ip-list.yml", "repository": "nusenu/ansible-relayor", "sha": "1988f01ef9d24891230f86caf9f6bb0c5d99b828"}, {"commit_sha": "dc73f16743fa376672b427980c6ca044dd6fa68a", "decoded_content": "---\n- name: stop-and-mask default tor instance\n  become: yes\n  shell: systemctl stop tor@default && systemctl mask tor@default\n  when: ansible_pkg_mgr == 'apt'\n\n- name: restart apparmor\n  become: yes\n  service: name=apparmor state=restarted\n\n- name: systemctl daemon-reload\n  become: yes\n  command: systemctl daemon-reload\n\n- name: re-gather facts\n  setup:\n  when: ansible_pkg_mgr == 'dnf'\n\n- name: disable default tor instance FreeBSD\n  become: yes\n  lineinfile:\n    dest: /etc/rc.conf\n    line: \"tor_disable_default_instance=\\\"YES\\\"\"\n    create: yes\n  when: ansible_system == 'FreeBSD'\n\n# TODO: this reloads all instances on a FreeBSD host even if just one torrc changed\n- name: Ensure Tor instances are reloaded if its torrc changed (FreeBSD)\n  become: yes\n  service:\n    name: tor\n    state: reloaded\n  when: ansible_system == 'FreeBSD'\n", "filename": "handlers/main.yml", "repository": "nusenu/ansible-relayor", "sha": "5e3caef9204c63c07f638687fa38ac81774205e4"}, {"commit_sha": "7f02cba4441b5367d6916857c9b41f3abae915db", "decoded_content": "---\n\n- name: Use a single private IPv4 address if we have no public IPv4 address\n  include_vars: private_IPv4_only.yml\n  when: tor_v4ips == []\n\n# workaround for this ansible IPv6 filter bug\n# https://github.com/ansible/ansible/issues/14829\n# we simply convert False to empty lists\n- name: workaround for ansible bug 14829 (1/3)\n  set_fact:\n    tor_available_public_ipv6s: []\n  when: not tor_available_public_ipv6s\n\n- name: workaround for ansible bug 14829 (2/3)\n  set_fact:\n    tor_v6ips: \"{{ tor_available_public_ipv6s[0:tor_ipv4_count|int]|ipv6('address') }}\"\n\n- name: workaround for ansible bug 14829 (3/3)\n  set_fact:\n    tor_v6ips: []\n  when: not tor_v6ips\n\n- name: setup IP list (1/2)\n  set_fact:\n    ips:\n        ipv4: \"{{ item.0 }}\"\n        ipv6: \"{{ item.1 }}\"\n  with_together:\n        - \"{{ tor_v4ips }}\"\n        - \"{{ tor_v6ips }}\"\n  register: tor_ipsinterm\n\n- name: setup IP list (2/2)\n  set_fact:\n    tor_ips: \"{{ tor_ipsinterm.results | map(attribute='ansible_facts.ips')|list}}\"\n", "filename": "tasks/ip-list.yml", "repository": "nusenu/ansible-relayor", "sha": "27d3f5f8c4469632bd158d52f5894919e55ae7cc"}, {"commit_sha": "72a9fefcabb6edccd82abb23946bd305035db334", "decoded_content": "---\n\n- name: Ensure Tor DataDir(s) exist and is owned by tor_user\n  sudo: yes\n  file: path={{ tor_DataDir }}/{{ item[0] }}_{{ item.1.orport }}\n    state=directory\n    owner={{ tor_user }}\n    mode=0700\n    recurse=yes\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n  tags:\n   - debian\n   - centos\n   - freebsd\n   - openbsd\n   - createdir\n\n- name: Ensure Tor config directory exists and has appropriate permissions\n  sudo: yes\n  file: path={{ tor_ConfDir }}\n    state=directory\n    owner=root\n    group={{ tor_user }}\n    mode=755\n  tags:\n   - debian\n   - centos\n   - freebsd\n   - openbsd\n\n- name: Ensure LogDir exists and has appropriate permissions\n  sudo: yes\n  file: path={{ tor_LogDir }}\n    state=directory\n    owner={{ tor_user }}\n    mode=750\n  tags:\n   - debian\n   - centos\n   - freebsd\n   - openbsd\n\n- name: Ensure PidDir is owned by tor_user\n  sudo: yes\n  file: path={{ tor_PidDir }}\n    state=directory\n    owner={{ tor_user }}\n    group={{ tor_user }}\n    mode=2750\n  tags:\n   - debian\n   - centos\n   - freebsd\n   - openbsd\n\n- name: Generating temporary (without MyFamily) torrc file(s)...\n  sudo: yes\n  template: src=torrc\n    dest=\"{{ tor_ConfDir }}/{{ item[0] }}_{{ item.1.orport }}.torrc-tmp\"\n    owner=root\n    mode=0644\n  with_nested:\n   - tor_ips\n   - tor_ports\n  tags:\n   - debian\n   - centos\n   - freebsd\n   - openbsd\n\n- name: Collect relay fingerprints (for MyFamily)\n  sudo: yes\n  shell: \"tor --hush -f {{ tor_ConfDir }}/{{ item[0] }}_{{ item.1.orport }}.torrc-tmp --list-fingerprint |cut -d' ' -f2-|sed -e 's, ,,g'\"\n  with_nested:\n   - tor_ips\n   - tor_ports\n  register: tor_fingerprints\n  tags:\n   - debian\n   - centos\n   - freebsd\n   - openbsd\n   - configure\n\n- name: Generating final torrc file(s) (with MyFamily)\n  sudo: yes\n  template: >\n    src=torrc\n    dest=\"{{ tor_ConfDir }}/{{ item[0] }}_{{ item.1.orport }}.torrc\"\n    owner=root\n    mode=0644\n    backup=yes\n    validate=\"tor --verify-config -f %s\"\n  with_nested:\n   - tor_ips\n   - tor_ports\n  register: instances\n  tags:\n   - debian\n   - centos\n   - freebsd\n   - openbsd\n   - configure\n\n# Linux/systemd section (uses service module)\n# ===========================================\n \n- name: Ensure Tor instances are reloaded if its torrc changed (Linux/systemd)\n  sudo: yes\n  service: name=tor@{{ item.item[0] }}_{{ item.item.1.orport }}.service state=reloaded\n  with_items: instances.results\n  when: ansible_system == 'Linux' and item.changed == True \n  tags:\n   - debian\n   - centos\n   - configure\n\n- name: Ensure Tor instances are enabled and started (Linux/systemd)\n  sudo: yes\n  service: name=tor@{{ item[0] }}_{{ item.1.orport }}.service enabled=yes state=started\n  with_nested:\n   - tor_ips\n   - tor_ports\n  when: ansible_system == 'Linux'\n  tags:\n   - debian\n   - centos\n\n# OpenBSD section (uses service module)\n# This is basically a copy from the Linux\n# section, but it requires different service\n# names and additional arguments.\n# =====================================\n\n# OpenBSD does not support multi-instance rc.d\n# # so we link as many pseudo rc scripts as we need.\n# # OpenBSD does not like dots in rc filenames so\n# # we replace them with underscores.\n- name: Create links to the service files (OpenBSD)\n  sudo: yes\n  file: src=/etc/rc.d/tor state=link path=/etc/rc.d/tor{{ item[0]| replace('.','_') }}_{{ item.1.orport }}\n  with_nested:\n   - tor_ips\n   - tor_ports\n  when: ansible_system == 'OpenBSD'\n  tags:\n   - openbsd\n\n- name: Ensure Tor instances are reloaded if its torrc changed (OpenBSD)\n  sudo: yes\n  service: name=tor{{ item.item[0]|replace('.','_') }}_{{ item.item.1.orport }} state=reloaded\n  with_items: instances.results\n  when: ansible_system == 'OpenBSD' and item.changed == True\n  tags:\n   - openbsd\n   - configure\n\n- name: Ensure Tor instances are enabled and started (OpenBSD)\n  sudo: yes\n  service: name=tor{{ item[0]|replace('.','_') }}_{{ item.1.orport }}\n   arguments=\"-f {{ tor_ConfDir }}/{{ item[0] }}_{{ item.1.orport }}.torrc\" enabled=yes state=started\n  with_nested:\n   - tor_ips\n   - tor_ports\n  when: ansible_system == 'OpenBSD'\n  tags:\n   - openbsd\n\n\n# FreeBSD section\n# ================\n\n- name: Ensure Tor instances are reloaded if its torrc changed (FreeBSD)\n  sudo: yes\n  shell: \"kill -HUP `cat {{ tor_PidDir }}/{{ item.item[0] }}_{{ item.item.1.orport }}.pid`\"\n  ignore_errors: yes\n  with_items: instances.results\n  when: item.changed == True and ansible_system == 'FreeBSD'\n  tags:\n   - freebsd\n   - configure\n\n- name: Ensure Tor instances are running (FreeBSD)\n  sudo: yes\n  shell: \"kill -0 `cat {{ tor_PidDir }}/{{ item[0] }}_{{ item.1.orport }}.pid` || tor -f {{ tor_ConfDir }}/{{ item[0] }}_{{ item.1.orport }}.torrc\"\n  with_nested:\n   - tor_ips\n   - tor_ports\n  when: ansible_system == 'FreeBSD'\n  tags:\n   - freebsd\n", "filename": "tasks/configure.yml", "repository": "nusenu/ansible-relayor", "sha": "44617d6949d8b6bf3e0ad200b6f158d7436a298a"}, {"commit_sha": "2a8ca91248bb834daaa8c35f709d6f8158d81a38", "decoded_content": "---\n\n- name: Check for vulnerable ansible version (CVE-2016-8614, CVE-2016-8628)\n  assert:\n    that:\n      - \"{{ ansible_version.full | version_compare('2.1.3.0', '>=') }}\"\n    msg: \"VULNERABLE ansible version DETECTED, please update to v2.1.3 or newer! Exiting.\"\n  tags:\n    - always\n\n- name: Set OS specific variables\n  include_vars: \"{{ ansible_os_family }}.yml\"\n  tags:\n   - renewkey\n   - reconfigure\n\n- include: ip-list.yml\n  tags:\n    - always\n\n- include: apt_prepare.yml\n  when: ansible_pkg_mgr == 'apt'\n  tags:\n   - debian\n   - install\n\n- include: rpm_prepare.yml\n  when: ansible_os_family == 'RedHat'\n  tags:\n   - centos\n   - fedora\n   - install\n\n- include: openbsd_prepare.yml\n  when: ansible_system == 'OpenBSD'\n  tags:\n   - openbsd\n\n- include: freebsd_prepare.yml\n  when: ansible_system == 'FreeBSD'\n  tags:\n   - freebsd\n\n# we specifically opt for present over latest to improve performance\n- name: Ensure tor is installed\n  become: yes\n  package:\n    name: \"{{ item }}\"\n    state: latest\n  with_items: \"{{ tor_packages }}\"\n  # apt starts a tor client instance by default after installing the package\n  # we do not need that\n  notify:\n    - stop-and-mask default tor instance\n    - disable default tor instance FreeBSD\n  tags:\n   - openbsd\n   - freebsd\n   - debian\n   - centos\n   - fedora\n   - install\n\n- meta: flush_handlers\n\n- include: configure.yml\n  tags:\n   - debian\n   - centos\n   - fedora\n   - openbsd\n   - freebsd\n\n- include: linux_service.yml\n  when: ansible_system == 'Linux'\n  tags:\n   - debian\n   - centos\n   - fedora\n\n- include: openbsd_service.yml\n  when: ansible_system == 'OpenBSD'\n  tags:\n   - openbsd\n\n- include: freebsd_service.yml\n  when: ansible_system == 'FreeBSD'\n  tags:\n   - freebsd\n", "filename": "tasks/main.yml", "repository": "nusenu/ansible-relayor", "sha": "85b96a58a39f2e87779d5a98a40f2dcb9862d8f1"}, {"commit_sha": "7a3aa0de9bf76ff1b18e6da304031150e4550142", "decoded_content": "---\n\n- name: Ensure Tor DataDir(s) exist and is owned by {{ tor_user }}\n  sudo: yes\n  file: path={{ tor_DataDir }}/{{ item[0] }}_{{ item.1.orport }}\n    state=directory\n    owner={{ tor_user }}\n    mode=0700\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n\n- name: Ensure Tor config directory exists and has appropriate permissions\n  sudo: yes\n  file: path={{ tor_ConfDir }}\n    state=directory\n    owner=root\n    group={{ tor_user }}\n    mode=755\n\n# on FreeBSD /var/log/tor is a file, let's rename it\n- name: If {{ tor_LogDir }} is a file, rename it\n  sudo: yes\n  shell: \"test -f {{ tor_LogDir }} && mv {{ tor_LogDir }} {{ tor_LogDir }}.bk-`date '+%Y-%m-%d_%H%M%S'`\"\n  ignore_errors: yes\n\n- name: Ensure Tor log directory exists and has appropriate permissions\n  sudo: yes\n  file: path={{ tor_LogDir }}\n    state=directory\n    owner={{ tor_user }}\n    mode=750\n\n- name: Ensure Tor log file(s) are not world readable\n  sudo: yes\n  file: path=\"{{ tor_LogDir }}/{{ item[0] }}_{{ item.1.orport }}.log\"\n    state=touch\n    owner={{ tor_user }}\n    mode=600\n  with_nested:\n   - tor_ips\n   - tor_ports\n\n- name: Ensure Tor PidDir is owned by tor_user\n  sudo: yes\n  file: path={{ tor_PidDir }}\n    state=directory\n    owner={{ tor_user }}\n    group={{ tor_user }}\n    mode=2750\n\n- name: Generating TEMPORARY (without MyFamily) torrc file(s)...\n  sudo: yes\n  template: src=torrc\n    dest=\"{{ tor_ConfDir }}/{{ item[0] }}_{{ item.1.orport }}.torrc-tmp\"\n    owner=root\n    mode=0644\n  with_nested:\n   - tor_ips\n   - tor_ports\n\n- name: Generate keys (if not in place yet) and gather relay fingerprints (for MyFamily)\n  sudo: yes\n  shell: \"tor --hush -f {{ tor_ConfDir }}/{{ item[0] }}_{{ item.1.orport }}.torrc-tmp --list-fingerprint |cut -d' ' -f2-|sed -e 's, ,,g'\"\n  with_nested:\n   - tor_ips\n   - tor_ports\n  register: tor_fingerprints\n\n- name: Remove temporary files\n  sudo: yes\n  file: path=\"{{ tor_ConfDir }}/{{ item[0] }}_{{ item.1.orport }}.torrc-tmp\"\n    state=absent\n  with_nested:\n   - tor_ips\n   - tor_ports\n\n- name: Generating torrc file(s) - this time with MyFamily...\n  sudo: yes\n  template: >\n    src=torrc\n    dest=\"{{ tor_ConfDir }}/tor-{{ item[0] }}_{{ item.1.orport }}.torrc\"\n    owner=root\n    mode=0644\n    backup=yes\n  with_nested:\n   - tor_ips\n   - tor_ports\n  register: instances\n\n# disabled for now\n# bug in --verify-config (trac #15015)\n#\n#- name: Ensure torrc files are sane\n#  shell: \"tor --verify-config -f {{ tor_ConfDir }}/tor-{{ item[0] }}_{{ item.1.orport }}.torrc\"\n#  with_nested:\n#   - tor_ips\n#   - tor_ports\n\n- name: Ensure Tor instances are reloaded if its torrc changed\n  sudo: yes\n  shell: \"kill -HUP `cat {{ tor_PidDir }}/tor-{{ item.item[0] }}_{{ item.item.1.orport }}.pid`\"\n  ignore_errors: yes\n  with_items: instances.results\n  when: item.changed == True\n\n- name: Ensure Tor instances are running\n  sudo: yes\n  shell: \"kill -0 `cat {{ tor_PidDir }}/tor-{{ item[0] }}_{{ item.1.orport }}.pid` || tor -f {{ tor_ConfDir }}/tor-{{ item[0] }}_{{ item.1.orport }}.torrc\"\n  with_nested:\n   - tor_ips\n   - tor_ports\n", "filename": "tasks/configure.yml", "repository": "nusenu/ansible-relayor", "sha": "492991728f4d67dbfeefed516a2998d2d43791eb"}, {"commit_sha": "fa66f2d6f5193cce5c2f9086e78f9bff39133e60", "decoded_content": "---\n\n- name: Setup FreeBSD specific variables (set_fact)\n  set_fact:\n    tor_DataDir: /var/db/tor\n    tor_ConfDir: /usr/local/etc/tor/enabled\n  tags:\n   - reconfigure\n   - renewkey\n   - createdir\n\n- name: Ensure Tor is installed (FreeBSD)\n  become: yes\n  pkgng: name=tor state=present\n\n# temporary solution until rc.d supports multiple instances\n- name: Ensure Tor starts at boot (FreeBSD)\n  become: yes\n  lineinfile: dest=/etc/rc.local line=\"/usr/local/bin/tor -f {{ tor_ConfDir }}/{{ item[0] }}_{{ item.1.orport }}.torrc\" create=yes\n  with_nested:\n   - tor_ips\n   - tor_ports\n\n- name: If LogDir is a file, rename it (FreeBSD)\n  become: yes\n  shell: \"test -f {{ tor_LogDir }} && mv {{ tor_LogDir }} {{ tor_LogDir }}.bk-`date '+%Y-%m-%d_%H%M%S'`\"\n  ignore_errors: yes\n\n- name: Ensure sequential IP IDs are avoided (net.inet.ip.random_id)\n  become: yes\n  sysctl: name=net.inet.ip.random_id value=1 reload=no sysctl_set=yes\n  tags:\n    - freebsdkern\n\n- name: Gather current kern.ipc.somaxconn setting (FreeBSD)\n  shell: \"sysctl kern.ipc.somaxconn|cut -d' '  -f2\"\n  register: currentsomaxconn\n  tags:\n   - freebsdkern\n\n- name: Ensure somaxconn setting is reasonable (FreeBSD)\n  become: yes\n  command: \"sysctl kern.ipc.somaxconn={{ freebsd_somaxconn }}\"\n  when: currentsomaxconn.stdout|int < {{ freebsd_somaxconn }}\n  tags:\n   - freebsdkern\n\n- name: Ensure somaxconn setting in sysctl.conf is reasonable (FreeBSD)\n  become: yes\n  lineinfile: dest=/etc/sysctl.conf regexp=^kern.ipc.somaxconn line=\"kern.ipc.somaxconn={{ freebsd_somaxconn }}\" create=yes\n  when: currentsomaxconn.stdout|int < {{ freebsd_somaxconn }}\n  tags:\n   - freebsdkern\n\n- name: Gather current kern.ipc.nmbclusters setting (FreeBSD)\n  shell: \"sysctl kern.ipc.nmbclusters|cut -d' '  -f2\"\n  register: currentnmbc\n  tags:\n   - freebsdkern\n\n- name: Ensure nmbclusters setting is reasonable (FreeBSD)\n  become: yes\n  command: \"sysctl kern.ipc.nmbclusters={{ freebsd_nmbclusters }}\"\n  when: currentnmbc.stdout|int < {{ freebsd_nmbclusters }}\n  tags:\n   - freebsdkern\n\n- name: Ensure nmbclusters setting in sysctl.conf is reasonable (FreeBSD)\n  become: yes\n  lineinfile: dest=/etc/sysctl.conf regexp=^kern.ipc.nmbclusters line=\"kern.ipc.nmbclusters={{ freebsd_nmbclusters }}\" create=yes\n  when: currentnmbc.stdout|int < {{ freebsd_nmbclusters }}\n  tags:\n   - freebsdkern\n", "filename": "tasks/freebsd_install.yml", "repository": "nusenu/ansible-relayor", "sha": "857baff789042ceb93356c9ccbeff3052c5f6d46"}, {"commit_sha": "fa66f2d6f5193cce5c2f9086e78f9bff39133e60", "decoded_content": "---\n\n- name: Setup OpenBSD specific variables (set_fact)\n  set_fact:\n    tor_DataDir: /var/tor\n    tor_ConfDir: /etc/tor/enabled\n  tags:\n   - reconfigure\n   - renewkey\n   - createdir\n\n- name: Ensure Tor is installed (OpenBSD)\n  become: yes\n  openbsd_pkg: name=tor state=present\n\n- name: Gather current system-wide file descriptor limits (OpenBSD)\n  shell: \"sysctl kern.maxfiles|cut -d= -f2\"\n  register: currentlimits\n\n- name: Ensure system-wide runtime file descriptor limits are reasonable (OpenBSD)\n  become: yes\n  command: \"sysctl kern.maxfiles=20000\"\n  when: currentlimits.stdout|int < 20000\n\n- name: Ensure system-wide persistent file descriptor limits are reasonable (OpenBSD)\n  become: yes\n  lineinfile: dest=/etc/sysctl.conf regexp=^kern.maxfiles line=\"kern.maxfiles=20000\" create=yes\n  when: currentlimits.stdout|int < 20000\n\n# We rise openfiles limits for every tor instance separately.\n# An instance is identified by its rc.d file name.\n- name: Ensure Tor process file descriptor limits are reasonable (OpenBSD)\n  become: yes\n  lineinfile: \"dest=/etc/login.conf line='tor{{ item[0]| replace('.','_') }}_{{ item.1.orport }}::openfiles-max=13500::tc=daemon:'\"\n  with_nested:\n   - tor_ips\n   - tor_ports\n  #TODO\n  #notify: restart tor\n", "filename": "tasks/openbsd_install.yml", "repository": "nusenu/ansible-relayor", "sha": "3f58f5380a772b43005b4700b11af8649c790b8a"}]