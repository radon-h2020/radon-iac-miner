[{"commit_sha": "dbe5647c4e42252e9e428e50b9b0a3636f94842a", "sha": "2cdfbbdbd4c17d834fbf094d2f8d31fe0c357ca5", "filename": "tasks/apt_prepare.yml", "decoded_content": "---\n\n- name: Ensure torproject gpg key is installed (A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89)\n  become: yes\n  apt_key:\n    data: \"{{ lookup('file', 'deb.torproject.org_A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89.pub') }}\"\n    id: A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89\n    state: present\n\n- name: Ensure torproject.org repository is present (APT)\n  become: yes\n  apt_repository:\n    repo: 'deb http://deb.torproject.org/torproject.org {{ tor_distribution_release }} main'\n    state: present\n    update_cache: yes\n\n# known problem: requires manual adjustment with every major tor release 0.2.8.x, 0.2.9.x, ...\n- name: Ensure torproject.org alpha repo is present if enabled (APT)\n  become: yes\n  apt_repository:\n    repo: 'deb http://deb.torproject.org/torproject.org tor-experimental-0.2.9.x-{{ tor_distribution_release }} main'\n    state: present\n    update_cache: yes\n  when: tor_alpha == True\n\n# Background:\n# https://github.com/nusenu/ansible-relayor/issues/72\n- name: Ensure systemd generator folder exists (Debian Testing and Ubuntu)\n  become: yes\n  file:\n    path: /etc/systemd/system-generators\n    state: directory\n    mode: 0755\n  when: ansible_lsb.codename != 'jessie'\n\n- name: Ensure custom systemd generator is in place (Debian/Ubuntu only)\n  become: yes\n  copy:\n    src: tor-generator\n    dest: \"{{ (ansible_lsb.codename == 'jessie')|ternary('/lib/systemd/system-generators/relayor-generator', '/etc/systemd/system-generators/tor-generator') }}\"\n    owner: root\n    mode: 0755\n\n- name: Ensure the maintainer's generator is disabled (Debian 8 only)\n  become: yes\n  command: dpkg-statoverride --update --add root root 644 /lib/systemd/system-generators/tor-generator\n  when: ansible_lsb.codename == 'jessie'\n  ignore_errors: yes\n\n#- name: Ensure AppArmor allows access to necessary files (Ubuntu)\n#  become: yes\n#  lineinfile: dest=/etc/apparmor.d/local/system_tor line={{ item }}\n#  with_items:\n#    - '/etc/tor/enabled/*\\ r,'\n#    - '/{,var/}run/tor/*.pid\\ w,'\n#    - '/var/lib/tor/**\\ w,'\n#  when: ansible_distribution == 'Ubuntu'\n#  notify: restart apparmor\n\n#- meta: flush_handlers\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "2149edf99fe1c251d0eaad5c78536c9b1d54dde3", "sha": "223c9b30d2e31cf204f7fc66ae13819bb17e79e7", "filename": "tasks/main.yml", "decoded_content": "---\n\n- include: apt_install.yml\n  when: ansible_pkg_mgr == 'apt'\n  tags:\n   - debian\n   - install\n\n- include: yum_install.yml\n  when: ansible_pkg_mgr == 'yum'\n  tags:\n   - centos\n   - install\n\n- include: openbsd_install.yml\n  when: ansible_pkg_mgr == 'openbsd_pkg'\n  tags:\n   - openbsd\n   - install\n\n- include: freebsd_install.yml\n  when: ansible_pkg_mgr == 'pkgng'\n  tags:\n   - freebsd\n   - install\n\n- include: dnf_install.yml\n  when: ansible_pkg_mgr == 'dnf'\n  tags:\n   - fedora\n   - install\n\n- include: configure.yml\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "c5b489aa56c545dd0b51910b5a0d701d838ff071", "sha": "00d58864de53f30f28a0d9d6d27b0ebda9d22f2d", "filename": "tasks/yum_install.yml", "decoded_content": "---\n\n- name: Add tor rpm key\n  sudo: yes\n  rpm_key: state=present key=https://deb.torproject.org/torproject.org/rpm/RPM-GPG-KEY-torproject.org.asc\n\n- set_fact: tor_rpm_distribution_os=\"el\"\n  when: ansible_distribution == 'CentOS' or ansible_distribution == \"Red Hat Enterprise Linux\"\n\n# we do not actually support Fedora\n- set_fact: tor_rpm_distribution_os=\"fc\"\n  when: ansible_distribution == 'Fedora'\n\n# the tor_alpha var is taken into account here (template)\n- name: Add torproject.org repository (YUM)\n  sudo: yes\n  template: src=torproject.yum.repo dest=/etc/yum.repos.d/torproject.repo owner=root group=root\n\n# we specifically opt for present over latest to improve performance\n# \"latest\" is covered by auto updates\n- name: Ensure Tor package is installed (YUM)\n  sudo: yes\n  yum: name=tor state=present\n\n# we need this for the seboolean ansible module to work\n- name: Ensure setsebool (SELinux) dependencies are installed (CentOS)\n  sudo: yes\n  yum: name=libsemanage-python state=present\n\n- name: Ensure the presence of the multi-instance systemd unit file (CentOS)\n  sudo: yes\n  copy: src=centos_tor@.service dest=/lib/systemd/system/tor@.service owner=root mode=0644 backup=yes setype=tor_unit_file_t\n  notify: systemctl daemon-reload\n\n- name: Ensure SELinux boolean (tor_can_network_relay) is set appropriately (CentOS)\n  sudo: yes\n  seboolean: name=tor_can_network_relay state=yes persistent=yes\n\n- meta: flush_handlers\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "dbe5647c4e42252e9e428e50b9b0a3636f94842a", "sha": "78583afe5f1453e6a8f7401926a0eba5bf729c13", "filename": "tasks/ip-list.yml", "decoded_content": "---\n\n# workaround for this ansible IPv6 filter bug\n# https://github.com/ansible/ansible/issues/14829\n# we simply convert False to empty lists\n- name: workaround for ansible bug 14829 (1/3)\n  set_fact:\n    v6tmp: []\n  when: v6tmp == False\n\n- name: workaround for ansible bug 14829 (2/3)\n  set_fact:\n    tor_v6ips: \"{{ v6tmp[0:ipv4_count|int]|ipv6('address') }}\"\n\n- name: workaround for ansible bug 14829 (3/3)\n  set_fact:\n    tor_v6ips: []\n  when: tor_v6ips == False\n\n- name: setup IP list (1/2)\n  set_fact:\n    ips:\n        ipv4: \"{{ item.0 }}\"\n        ipv6: \"{{ item.1 }}\"\n  with_together:\n        - \"{{ tor_v4ips }}\"\n        - \"{{ tor_v6ips }}\"\n  register: ipsinterm\n\n- name: setup IP list (2/2)\n  set_fact:\n    tor_ips: \"{{ ipsinterm.results | map(attribute='ansible_facts.ips')|list}}\"\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "51dcdf691a7801895b569a5a927e30030d8feb70", "sha": "8c03638344ecdd2753792b206bcfbede32eb6e91", "filename": "tasks/linux_service.yml", "decoded_content": "---\n\n# Linux/systemd section (uses service module)\n# ===========================================\n \n- name: Ensure Tor instances are reloaded if its torrc changed (Linux/systemd)\n  become: yes\n  service: name=tor@{{ item.item[0] }}_{{ item.item.1.orport }}.service state=reloaded\n  with_items: instances.results\n  when: item.changed == True\n  tags:\n   - debian\n   - centos\n   - fedora\n   - reconfigure\n\n- name: Ensure Tor instances are enabled and started (Linux/systemd)\n  become: yes\n  service: name=tor@{{ item[0] }}_{{ item.1.orport }}.service enabled=yes state=started\n  with_nested:\n   - tor_ips\n   - tor_ports\n  tags:\n   - debian\n   - centos\n   - fedora\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "9f2f1160c4dc3fea2f6e81e42ba8a6254ef093db", "sha": "1b1263356bc2fd32d11d77c7fc6dd2cade8d5b06", "filename": "tasks/configure.yml", "decoded_content": "---\n\n- name: Ensure local DataDir folders exist (LOCAL)\n  become: no\n  file:\n    path: \"{{ tor_offline_masterkey_dir }}/{{ inventory_hostname }}-{{ item.0.ipv4 }}_{{ item.1.orport }}\"\n    state: directory\n    mode: 0700\n  delegate_to: 127.0.0.1\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n  tags:\n   - createdir\n\n- name: Ensure all relay keys exist (LOCAL)\n  become: no\n  command: >\n          tor --list-fingerprint --DisableNetwork 1 --orport auto --PublishServerDescriptor 0 --ExitRelay 0\n          --ignore-missing-torrc -f /dev/null --defaults-torrc /dev/null --Log \"err stdout\"\n          --datadirectory \"{{ tor_offline_masterkey_dir }}/{{ inventory_hostname }}-{{ item.0.ipv4 }}_{{ item.1.orport }}\"\n  delegate_to: 127.0.0.1\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n  changed_when: False\n\n- name: Generate new Ed25519 signing keys (LOCAL)\n  become: no\n  command: >\n        tor --keygen --SigningKeyLifetime {{ tor_signingkeylifetime_days }}\\ days --ignore-missing-torrc -f /dev/null\n        --defaults-torrc /dev/null --Log \"err stdout\"\n        --datadirectory \"{{ tor_offline_masterkey_dir }}/{{ inventory_hostname }}-{{ item.0.ipv4 }}_{{ item.1.orport }}\"\n  delegate_to: 127.0.0.1\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n  tags:\n   - renewkey\n  changed_when: False\n\n- name: Detect duplicate relay keys across relays (LOCAL)\n  become: no\n  shell: >\n        set -o pipefail && openssl sha256 -r\n        {{ tor_offline_masterkey_dir }}/*/keys/secret_id_key {{ tor_offline_masterkey_dir }}/*/keys/ed25519_master_id_secret_key |\n        cut -d' ' -f1|sort|uniq -d|wc -l\n  args:\n    executable: /bin/bash\n  delegate_to: 127.0.0.1\n  run_once: true\n  register: tor_dupkeycount\n  changed_when: False\n\n- name: Abort on duplicate relay keys\n  fail:\n    msg: \"Duplicate relay key detected! Aborting.\"\n  run_once: true\n  when: tor_dupkeycount.stdout|int(1) != 0\n\n- name: Detect if Ed25519 master keys are on the relay\n  become: yes\n  stat:\n    path: \"{{ tor_DataDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}/keys/ed25519_master_id_secret_key\"\n  register: tor_masterkeyonline\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n\n- name: Abort if Ed25519 master keys are on the relay\n  fail:\n    msg: \"Ed25519 MASTER KEY detected on the relay - it is NOT supposed to be there! Aborting.\"\n  when: item.stat.exists\n  with_items: \"{{ tor_masterkeyonline.results }}\"\n\n# not relying on the datadir/fingerprint file is more robust\n- name: Collect fingerprints for MyFamily (LOCAL)\n  become: no\n  shell: >\n        set -o pipefail && for key in {{ tor_offline_masterkey_dir }}/*/keys/secret_id_key;\n            do openssl rsa -in $key -outform DER -RSAPublicKey_out 2> /dev/null| openssl sha1 -r;\n        done|cut -d\" \" -f1|sort|xargs|sed -e 's/ /,/g'\n  args:\n    executable: /bin/bash\n  delegate_to: 127.0.0.1\n  run_once: true\n  register: tor_family\n  tags:\n   - reconfigure\n  changed_when: False\n\n- name: Ensure per-instance tor users exist\n  become: yes\n  user:\n    name: \"_tor-{{ item.0.ipv4 }}_{{ item.1.orport }}\"\n    system: yes\n    shell: /bin/false\n    createhome: no\n    home: \"{{ tor_DataDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}\"\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n\n# We only need to create this folder (used for ControlSocket and on FreeBSD for the pidfile) on:\n# - FreeBSD (regardless of tor_enableControlSocket)\n# - CentOS/Fedora/OpenBSD when tor_enableControlSocket is True\n# we never create it on Debian since the systemd service file creates it there (with different permissions)\n- name: Ensure PID/ControlSocket directory exists\n  become: yes\n  file:\n    path: \"{{ tor_PidDir }}\"\n    state: directory\n    owner: root\n    mode: 0755\n  when: ansible_system == 'FreeBSD' or (tor_enableControlSocket and (ansible_system == 'OpenBSD' or ansible_os_family == 'RedHat'))\n\n- name: Ensure PID/ControlSocket directory is owned by per-instance tor user\n  become: yes\n  file:\n    path: \"{{ tor_PidDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}\"\n    state: directory\n    owner: \"_tor-{{ item.0.ipv4 }}_{{ item.1.orport }}\"\n    group: \"_tor-{{ item.0.ipv4 }}_{{ item.1.orport }}\"\n    mode: 0750\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n  when: ansible_system == 'FreeBSD' or (tor_enableControlSocket and (ansible_system == 'OpenBSD' or ansible_os_family == 'RedHat'))\n\n- name: Ensure per-instance config folders exist (Debian only)\n  become: yes\n  file:\n    path: \"{{ tor_ConfDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}\"\n    state: directory\n    mode: 0755\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n  when: ansible_pkg_mgr == 'apt'\n\n- name: Ensure DataDir exists\n  become: yes\n  file:\n    path: \"{{ tor_DataDir }}\"\n    state: directory\n    owner: root\n    mode: 0755\n\n- name: Ensure \"keys\" subfolder exists\n  become: yes\n  file:\n    path: \"{{ tor_DataDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}/keys\"\n    state: directory\n    owner: \"_tor-{{ item.0.ipv4 }}_{{ item.1.orport }}\"\n    group: \"_tor-{{ item.0.ipv4 }}_{{ item.1.orport }}\"\n    mode: u=rwX,g=,o=\n    recurse: yes\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n\n- name: Ensure RSA key is in place (without overriding existing keys)\n  become: yes\n  copy:\n    src: \"{{ tor_offline_masterkey_dir }}/{{ inventory_hostname }}-{{ item.0.ipv4 }}_{{ item.1.orport }}/keys/{{ item[2] }}\"\n    dest: \"{{ tor_DataDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}/keys/{{ item[2] }}\"\n    owner: \"_tor-{{ item.0.ipv4 }}_{{ item.1.orport }}\"\n    mode: 0600\n    force: no\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n   - [ 'secret_id_key' ]\n\n- name: Fetch RSA key for comparison\n  become: yes\n  fetch:\n    src: \"{{ tor_DataDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}/keys/{{ item[2] }}\"\n    dest: \"{{ tor_offline_masterkey_dir }}/{{ inventory_hostname }}-{{ item.0.ipv4 }}_{{ item.1.orport }}/keys/{{ item[2] }}.untrustedremotekey\"\n    flat: yes\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n   - [ 'secret_id_key' ]\n\n- name: Compare local vs. remote RSA key (secret_id_key)\n  become: no\n  shell: >\n        set -o pipefail && openssl sha256 -r\n        {{ tor_offline_masterkey_dir }}/{{ inventory_hostname }}-\"{{ item.0.ipv4 }}_{{ item.1.orport }}\"/keys/secret_id_key*\n        | cut -d' ' -f1|uniq -d|wc -l\n  args:\n    executable: /bin/bash\n  delegate_to: 127.0.0.1\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n  register: tor_rsakey_match\n  changed_when: False\n\n- name: Abort if local and remote RSA keys do not match\n  assert:\n    that:\n      - \"item.stdout|int == 1\"\n    msg: >\n         \"Key mismatch detected! Solution: http://bit.ly/2j6wc70 Affected instance:\n         {{ tor_offline_masterkey_dir }}/{{ inventory_hostname }}-{{ item.item.0.ipv4 }}_{{ item.item.1.orport }}/keys\"\n  with_items: \"{{ tor_rsakey_match.results }}\"\n\n# this task is separated from the task named \"Ensure RSA key is in place\" because it is not run with 'force=no'\n- name: Transmit new Ed25519 signing keys\n  become: yes\n  copy:\n    src: \"{{ tor_offline_masterkey_dir }}/{{ inventory_hostname }}-{{ item.0.ipv4 }}_{{ item.1.orport }}/keys/{{ item[2] }}\"\n    dest: \"{{ tor_DataDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}/keys/{{ item[2] }}\"\n    owner: \"_tor-{{ item.0.ipv4 }}_{{ item.1.orport }}\"\n    mode: 0600\n    setype: tor_var_lib_t\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n   - [ 'ed25519_signing_cert', 'ed25519_signing_secret_key' ]\n  changed_when: False\n  tags:\n   - renewkey\n\n# This needs to be at the end to fix SELinux contexts recursively\n- name: Ensure per-instance DataDir have proper permissions\n  become: yes\n  file:\n    path: \"{{ tor_DataDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}\"\n    state: directory\n    owner: \"_tor-{{ item.0.ipv4 }}_{{ item.1.orport }}\"\n    group: \"_tor-{{ item.0.ipv4 }}_{{ item.1.orport }}\"\n    mode: u=rwX,g=,o=\n    recurse: yes\n    setype: tor_var_lib_t\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n\n- name: Ensure Tor config directory exists\n  become: yes\n  file:\n    path: \"{{ tor_ConfDir }}\"\n    state: directory\n    owner: root\n    group: \"{{ tor_user }}\"\n    mode: 0755\n\n- name: Ensure tor-exit-notice.html is present (if we are an exit)\n  become: yes\n  template:\n    src: \"{{ tor_exit_notice_file }}\"\n    dest: \"{{ tor_ConfDir }}/tor-exit-notice.html\"\n    mode: 0444\n  when: tor_ExitRelay and tor_ExitNoticePage\n\n- name: Ensure torrc configuration file(s) are in place\n  become: yes\n  template:\n    src: torrc\n    dest: \"{{ (ansible_pkg_mgr != 'apt')| ternary(tor_ConfDir ~ '/' ~ item.0.ipv4 ~ '_' ~ item.1.orport ~ '.torrc', tor_ConfDir ~ '/' ~ item.0.ipv4 ~ '_' ~ item.1.orport ~ '/torrc') }}\"\n    owner: root\n    mode: 0644\n    backup: \"{{ tor_backup_torrc }}\"\n    validate: \"tor --verify-config -f %s\"\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n  register: tor_instances_tmp\n  loop_control:\n    index_var: loop_idx\n  notify:\n    - Ensure Tor instances are reloaded if its torrc changed (FreeBSD)\n    - Ensure Tor instances are reloaded if its torrc changed (Linux)\n  tags:\n   - reconfigure\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "c5b489aa56c545dd0b51910b5a0d701d838ff071", "sha": "afba135ee7f0ffd9268ca4129fe737347ee6b874", "filename": "tasks/configure.yml", "decoded_content": "---\n\n- name: Ensure Tor DataDir(s) exist and is owned by tor_user\n  sudo: yes\n  file: path={{ tor_DataDir }}/{{ item[0] }}_{{ item.1.orport }}\n    state=directory\n    owner={{ tor_user }}\n    mode=0700\n    recurse=yes\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n  tags:\n   - debian\n   - centos\n   - freebsd\n   - openbsd\n\n- name: Ensure Tor config directory exists and has appropriate permissions\n  sudo: yes\n  file: path={{ tor_ConfDir }}\n    state=directory\n    owner=root\n    group={{ tor_user }}\n    mode=755\n  tags:\n   - debian\n   - centos\n   - freebsd\n   - openbsd\n\n- name: Ensure LogDir exists and has appropriate permissions\n  sudo: yes\n  file: path={{ tor_LogDir }}\n    state=directory\n    owner={{ tor_user }}\n    mode=750\n  tags:\n   - debian\n   - centos\n   - freebsd\n   - openbsd\n\n- name: Ensure PidDir is owned by tor_user\n  sudo: yes\n  file: path={{ tor_PidDir }}\n    state=directory\n    owner={{ tor_user }}\n    group={{ tor_user }}\n    mode=2750\n  tags:\n   - debian\n   - centos\n   - freebsd\n   - openbsd\n\n- name: Generating temporary (without MyFamily) torrc file(s)...\n  sudo: yes\n  template: src=torrc\n    dest=\"{{ tor_ConfDir }}/{{ item[0] }}_{{ item.1.orport }}.torrc-tmp\"\n    owner=root\n    mode=0644\n  with_nested:\n   - tor_ips\n   - tor_ports\n  tags:\n   - debian\n   - centos\n   - freebsd\n   - openbsd\n\n- name: Collect relay fingerprints (for MyFamily)\n  sudo: yes\n  shell: \"tor --hush -f {{ tor_ConfDir }}/{{ item[0] }}_{{ item.1.orport }}.torrc-tmp --list-fingerprint |cut -d' ' -f2-|sed -e 's, ,,g'\"\n  with_nested:\n   - tor_ips\n   - tor_ports\n  register: tor_fingerprints\n  tags:\n   - debian\n   - centos\n   - freebsd\n   - openbsd\n   - configure\n\n- name: Generating final torrc file(s) (with MyFamily)\n  sudo: yes\n  template: >\n    src=torrc\n    dest=\"{{ tor_ConfDir }}/{{ item[0] }}_{{ item.1.orport }}.torrc\"\n    owner=root\n    mode=0644\n    backup=yes\n    validate=\"tor --verify-config -f %s\"\n  with_nested:\n   - tor_ips\n   - tor_ports\n  register: instances\n  tags:\n   - debian\n   - centos\n   - freebsd\n   - openbsd\n   - configure\n\n# Linux/systemd section (uses service module)\n# ===========================================\n \n- name: Ensure Tor instances are reloaded if its torrc changed (Linux/systemd)\n  sudo: yes\n  service: name=tor@{{ item.item[0] }}_{{ item.item.1.orport }}.service state=reloaded\n  with_items: instances.results\n  when: ansible_system == 'Linux' and item.changed == True \n  tags:\n   - debian\n   - centos\n   - configure\n\n- name: Ensure Tor instances are enabled and started (Linux/systemd)\n  sudo: yes\n  service: name=tor@{{ item[0] }}_{{ item.1.orport }}.service enabled=yes state=started\n  with_nested:\n   - tor_ips\n   - tor_ports\n  when: ansible_system == 'Linux'\n  tags:\n   - debian\n   - centos\n\n# OpenBSD section (uses service module)\n# This is basically a copy from the Linux\n# section, but it requires different service\n# names and additional arguments.\n# =====================================\n\n# OpenBSD does not support multi-instance rc.d\n# # so we link as many pseudo rc scripts as we need.\n# # OpenBSD does not like dots in rc filenames so\n# # we replace them with underscores.\n- name: Create links to the service files (OpenBSD)\n  sudo: yes\n  file: src=/etc/rc.d/tor state=link path=/etc/rc.d/tor{{ item[0]| replace('.','_') }}_{{ item.1.orport }}\n  with_nested:\n   - tor_ips\n   - tor_ports\n  when: ansible_system == 'OpenBSD'\n  tags:\n   - openbsd\n\n- name: Ensure Tor instances are reloaded if its torrc changed (OpenBSD)\n  sudo: yes\n  service: name=tor{{ item.item[0]|replace('.','_') }}_{{ item.item.1.orport }} state=reloaded\n  with_items: instances.results\n  when: ansible_system == 'OpenBSD' and item.changed == True\n  tags:\n   - openbsd\n   - configure\n\n- name: Ensure Tor instances are enabled and started (OpenBSD)\n  sudo: yes\n  service: name=tor{{ item[0]|replace('.','_') }}_{{ item.1.orport }}\n   arguments=\"-f {{ tor_ConfDir }}/{{ item[0] }}_{{ item.1.orport }}.torrc\" enabled=yes state=started\n  with_nested:\n   - tor_ips\n   - tor_ports\n  when: ansible_system == 'OpenBSD'\n  tags:\n   - openbsd\n\n\n# FreeBSD section\n# ================\n\n- name: Ensure Tor instances are reloaded if its torrc changed (FreeBSD)\n  sudo: yes\n  shell: \"kill -HUP `cat {{ tor_PidDir }}/{{ item.item[0] }}_{{ item.item.1.orport }}.pid`\"\n  ignore_errors: yes\n  with_items: instances.results\n  when: item.changed == True and ansible_system == 'FreeBSD'\n  tags:\n   - freebsd\n   - configure\n\n- name: Ensure Tor instances are running (FreeBSD)\n  sudo: yes\n  shell: \"kill -0 `cat {{ tor_PidDir }}/{{ item[0] }}_{{ item.1.orport }}.pid` || tor -f {{ tor_ConfDir }}/{{ item[0] }}_{{ item.1.orport }}.torrc\"\n  with_nested:\n   - tor_ips\n   - tor_ports\n  when: ansible_system == 'FreeBSD'\n  tags:\n   - freebsd\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "0406395a8758f12abd57914532cc0ff17894d015", "sha": "141c3817fae1f6a7444ecf2563a4eab5c988ba27", "filename": "meta/main.yml", "decoded_content": "---\ngalaxy_info:\n  author: nusenu\n  description: An Ansible role for Tor Relay Operators\n  license: GPLv3\n  platforms:\n  - name: Debian\n    versions:\n    - jessie\n    - stretch\n  - name: FreeBSD\n    versions:\n    - 10.1\n    - 10.2\n    - 10.3\n  - name: OpenBSD\n    versions:\n    - 5.9\n  - name: EL\n    versions:\n    - 7\n  - name: Ubuntu\n    versions:\n    - xenial\n  - name: Fedora\n    versions:\n    - 24\n  galaxy_tags:\n    - tor\n    - ipv6\n    - anonymity\n    - networking\n  min_ansible_version: 1.9.6\ndependencies: []\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "51dcdf691a7801895b569a5a927e30030d8feb70", "sha": "195bbb694ee97b5ee742114e67c4a2314b3729fb", "filename": "tasks/main.yml", "decoded_content": "---\n\n- include: apt_install.yml\n  when: ansible_pkg_mgr == 'apt'\n  tags:\n   - debian\n   - install\n\n- include: rpm_install.yml\n  when: ansible_pkg_mgr == 'yum' or ansible_pkg_mgr == 'dnf'\n  tags:\n   - centos\n   - fedora\n   - install\n\n- include: openbsd_install.yml\n  when: ansible_pkg_mgr == 'openbsd_pkg'\n  tags:\n   - openbsd\n   - install\n\n- include: freebsd_install.yml\n  when: ansible_pkg_mgr == 'pkgng'\n  tags:\n   - freebsd\n   - install\n\n- include: configure.yml\n  tags:\n   - debian\n   - centos\n   - fedora\n   - openbsd\n   - freebsd\n\n- include: linux_service.yml\n  when: ansible_system == 'Linux'\n  tags:\n   - debian\n   - centos\n   - fedora\n\n- include: openbsd_service.yml\n  when: ansible_system == 'OpenBSD'\n  tags:\n   - openbsd\n\n- include: freebsd_service.yml\n  when: ansible_system == 'FreeBSD'\n  tags:\n   - freebsd\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "51dcdf691a7801895b569a5a927e30030d8feb70", "sha": "8d16346f0b8e9948b65bf34e38a532d416e5ceb1", "filename": "tasks/rpm_install.yml", "decoded_content": "---\n\n- name: Setup RPM specific variables (set_fact)\n  set_fact:\n    tor_user: toranon\n    tor_ConfDir: /etc/tor\n    tor_RunAsDaemon: 0\n    tor_DataDir: /var/lib/tor-instances\n  tags:\n   - reconfigure\n   - renewkey\n   - createdir\n\n- name: Ensure tor package is installed (dnf)\n  become: yes\n  dnf: name=tor,libselinux-python,libsemanage-python state=present\n  when: ansible_pkg_mgr == 'dnf'\n  notify: re-gather facts\n\n# re-gathering facts after installing libselinux-python on F23\n# is a workaround for https://github.com/ansible/ansible-modules-core/issues/2432\n- meta: flush_handlers\n\n- name: Ensure EPEL repo is installed (yum)\n  become: yes\n  yum: name=epel-release\n  when: ansible_pkg_mgr == 'yum'\n\n- name: Ensure tor package is installed (yum)\n  become: yes\n  yum: name=tor,libsemanage-python state=present\n  when: ansible_pkg_mgr == 'yum'\n\n- name: Ensure SELinux boolean (tor_can_network_relay) is set appropriately (Fedora)\n  become: yes\n  seboolean: name=tor_can_network_relay state=yes persistent=yes\n  when: ansible_selinux.status == 'enabled'\n\n- name: Ensure systemd drop-in folder is present\n  become: yes\n  file: path=/etc/systemd/system/tor@.service.d\n    state=directory\n    owner=root\n    mode=0755\n\n# this is needed for a small service file modification (allow it to write to /var/lib/tor-instances)\n# without replacing the maintainer's file, for details see\n# http://www.freedesktop.org/software/systemd/man/systemd.unit.html#id-1.11.3\n- name: Ensure service file drop-in is present\n  become: yes\n  copy: src=local.conf\n   dest=/etc/systemd/system/tor@.service.d/local.conf\n   owner=root\n   mode=640\n  notify: systemctl daemon-reload\n\n- meta: flush_handlers\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "0406395a8758f12abd57914532cc0ff17894d015", "sha": "59fb490cc93320cf28b104f435c9bf3549f7ce71", "filename": "tasks/rpm_install.yml", "decoded_content": "---\n\n- name: Setup RPM specific variables (set_fact)\n  set_fact:\n    tor_user: toranon\n    tor_ConfDir: /etc/tor\n    tor_RunAsDaemon: 0\n    tor_DataDir: /var/lib/tor-instances\n  tags:\n   - reconfigure\n   - renewkey\n\n- name: Ensure tor package is installed (dnf)\n  become: yes\n  dnf: name=tor,libselinux-python,libsemanage-python state=present\n  when: ansible_pkg_mgr == 'dnf'\n  notify: re-gather facts\n\n# re-gathering facts after installing libselinux-python on F23\n# is a workaround for https://github.com/ansible/ansible-modules-core/issues/2432\n- meta: flush_handlers\n\n- name: Ensure EPEL repo is installed (yum)\n  become: yes\n  yum: name=epel-release\n  when: ansible_pkg_mgr == 'yum'\n\n- name: Ensure tor package is installed (yum)\n  become: yes\n  yum: name=tor,libsemanage-python state=present\n  when: ansible_pkg_mgr == 'yum'\n\n- name: Ensure SELinux boolean (tor_can_network_relay) is set appropriately (Fedora)\n  become: yes\n  seboolean: name=tor_can_network_relay state=yes persistent=yes\n  when: ansible_selinux.status == 'enabled'\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "dbe5647c4e42252e9e428e50b9b0a3636f94842a", "sha": "5e3caef9204c63c07f638687fa38ac81774205e4", "filename": "handlers/main.yml", "decoded_content": "---\n- name: stop-and-mask default tor instance\n  become: yes\n  shell: systemctl stop tor@default && systemctl mask tor@default\n  when: ansible_pkg_mgr == 'apt'\n\n- name: restart apparmor\n  become: yes\n  service: name=apparmor state=restarted\n\n- name: systemctl daemon-reload\n  become: yes\n  command: systemctl daemon-reload\n\n- name: re-gather facts\n  setup:\n  when: ansible_pkg_mgr == 'dnf'\n\n- name: disable default tor instance FreeBSD\n  become: yes\n  lineinfile:\n    dest: /etc/rc.conf\n    line: \"tor_disable_default_instance=\\\"YES\\\"\"\n    create: yes\n  when: ansible_system == 'FreeBSD'\n\n# TODO: this reloads all instances on a FreeBSD host even if just one torrc changed\n- name: Ensure Tor instances are reloaded if its torrc changed (FreeBSD)\n  become: yes\n  service:\n    name: tor\n    state: reloaded\n  when: ansible_system == 'FreeBSD'\n\n- name: Ensure Tor instances are reloaded if its torrc changed (Linux)\n  become: yes\n  service:\n    name: \"tor@{{ item.item.0.ipv4 }}_{{ item.item.1.orport }}.service\"\n    state: reloaded\n  with_items: \"{{ instances.results }}\"\n  when: item.changed == True and ansible_system == 'Linux'\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "9f2f1160c4dc3fea2f6e81e42ba8a6254ef093db", "sha": "fda1d8878b20341c46d510d2df39a36f6b446d4c", "filename": "tasks/freebsd_service.yml", "decoded_content": "---\n\n# tor_intances defines the number and configurations of instances\n# an instance is defined with the following fields:\n# inst_name:configfile:username:groupname:pidfile:data_dir\n# username/groupname is set to root to be able to bind to <1024 ports\n# but privileges are dropped afterwards (torrc User parameter)\n- name: Ensure Tor multi-instance configuration is present (FreeBSD)\n  become: yes\n  lineinfile:\n    dest: /etc/rc.conf\n    line: \"tor_instances=\\\"${tor_instances} {{ item.0.ipv4 }}_{{ item.1.orport }}:{{ tor_ConfDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}.torrc:root:root:{{ tor_PidDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}/pid:{{ tor_DataDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}\\\"\"\n    create: yes\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n\n# this task is a workaround, because 'service tor status'\n# fails if this line is not present (which in turn fails the ansible service module)\n- name: Ensure tor is enabled in /etc/rc.conf (FreeBSD)\n  become: yes\n  lineinfile:\n    dest: /etc/rc.conf\n    line: \"tor_enable=\\\"YES\\\"\"\n    create: yes\n\n# this affects all instances\n- name: Ensure Tor instances are running and enabled (FreeBSD)\n  become: yes\n  service:\n    name: tor\n    enabled: yes\n    state: started\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "44be91805d4a4c003d28a7c5fd3f7a6317863435", "sha": "59e966357cb3bcdec09806325e0bccc69e08a69a", "filename": "tasks/linux_service.yml", "decoded_content": "---\n\n# Linux/systemd section (uses service module)\n# ===========================================\n\n- name: Ensure systemd drop-in folder is present\n  become: yes\n  file: path=/etc/systemd/system/tor@.service.d\n    state=directory\n    owner=root\n    mode=0755\n  when: ansible_os_family == 'RedHat'\n\n# this is needed for a small service file modification (allow it to write to /var/lib/tor-instances)\n# # without replacing the maintainer's file, for details see\n# # http://www.freedesktop.org/software/systemd/man/systemd.unit.html#id-1.11.3\n- name: Ensure service file drop-in is present\n  become: yes\n  copy: src=local.conf\n   dest=/etc/systemd/system/tor@.service.d/local.conf\n   owner=root\n   mode=640\n  when: ansible_os_family == 'RedHat'\n  notify: systemctl daemon-reload\n\n- meta: flush_handlers\n \n- name: Ensure Tor instances are reloaded if its torrc changed (Linux/systemd)\n  become: yes\n  service: name=tor@{{ item.item[0] }}_{{ item.item.1.orport }}.service state=reloaded\n  with_items: instances.results\n  when: item.changed == True\n  tags:\n   - reconfigure\n\n- name: Ensure Tor instances are enabled and started (Linux/systemd)\n  become: yes\n  service: name=tor@{{ item[0] }}_{{ item.1.orport }}.service enabled=yes state=started\n  with_nested:\n   - tor_ips\n   - tor_ports\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "25268594e4bf662f487ddd8792c22b93b27160fc", "sha": "6bc6b1b04df4a179331d4b4dd8d03f8a7a364f74", "filename": "tasks/openbsd_install.yml", "decoded_content": "---\n# setting PKG_PATH is out of scope of this role\n# we assume it is set correctly.\n# We specifically opt for present over latest to improve performance\n# \"latest\" is covered by auto updates\n- name: Ensure Tor is installed (OpenBSD)\n  sudo: yes\n  openbsd_pkg: name=tor state=present\n\n- name: Gather current system-wide file descriptor limits (OpenBSD)\n  command: \"sysctl kern.maxfiles|cut -d= -f2\"\n  register: currentlimits\n\n- name: Ensure system-wide runtime file descriptor limits are reasonable (OpenBSD)\n  sudo: yes\n  command: \"sysctl kern.maxfiles=20000\"\n  when: currentlimits.stdout < \"20000\"\n\n- name: Ensure system-wide persistent file descriptor limits are reasonable (OpenBSD)\n  sudo: yes\n  lineinfile: dest=/etc/sysctl.conf line=\"kern.maxfiles=20000\" create=yes\n\n# 'tordaemon' is basically an arbitrary string here. We will use it afterwards\n# to assign that login class to the {{ tor_user }}\n- name: Ensure Tor process file descriptor limits are reasonable (OpenBSD)\n  sudo: yes\n  lineinfile: \"dest=/etc/login.conf line='tordaemon::openfiles-max=13500::tc=daemon:'\"\n  #TODO\n  #notify: restart tor\n\n- name: Gather tor_user's login class (OpenBSD)\n  shell: userinfo \"{{ tor_user }}\"|grep ^class|cut -f2\n  register: loginclass\n\n- name: Ensure 'tor_user' is in the tordaemon login class (OpenBSD)\n  sudo: yes\n  command: usermod -L tordaemon \"{{ tor_user }}\"\n  when: loginclass.stdout != 'tordaemon'\n  #TODO \n  #notify: restart tor\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "9f2f1160c4dc3fea2f6e81e42ba8a6254ef093db", "sha": "64bce01f2f5b21233dba3bc1f532dfe89fd2f164", "filename": "handlers/main.yml", "decoded_content": "---\n\n- name: stop-and-mask default tor instance\n  become: yes\n  systemd:\n    name: 'tor@default'\n    state: 'stopped'\n    enabled: False\n    masked: True\n  when: ansible_pkg_mgr == 'apt'\n\n- name: restart apparmor\n  become: yes\n  service: name=apparmor state=restarted\n\n- name: systemctl daemon-reload\n  become: yes\n  systemd:\n    daemon_reload: True\n\n- name: re-gather facts\n  setup:\n\n- name: disable default tor instance FreeBSD\n  become: yes\n  lineinfile:\n    dest: /etc/rc.conf\n    line: \"tor_disable_default_instance=\\\"YES\\\"\"\n    create: yes\n  when: ansible_system == 'FreeBSD'\n\n# TODO: this reloads all instances on a FreeBSD host even if just one torrc changed\n- name: Ensure Tor instances are reloaded if its torrc changed (FreeBSD)\n  become: yes\n  service:\n    name: tor\n    state: reloaded\n  when: ansible_system == 'FreeBSD'\n\n- name: Ensure Tor instances are reloaded if its torrc changed (Linux)\n  become: yes\n  service:\n    name: \"tor@{{ item.item.0.ipv4 }}_{{ item.item.1.orport }}.service\"\n    state: reloaded\n  with_items: \"{{ tor_instances_tmp.results }}\"\n  when: item.changed and ansible_system == 'Linux'\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "25268594e4bf662f487ddd8792c22b93b27160fc", "sha": "6e30ade847f69debb46d0421cfe8cc8f8275ff49", "filename": "handlers/main.yml", "decoded_content": "---\n- name: restart tor\n  service: name=tor state=restarted\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "33341b8cd483ae2583a4bd7c1bd79c82e4a12e4b", "sha": "9230fb872722c90fa807cc8c6ce21bd993b3aabd", "filename": "tasks/main.yml", "decoded_content": "---\n\n- include: apt_install.yml\n  when: ansible_pkg_mgr == 'apt'\n  tags:\n   - debian\n   - install\n\n- include: yum_install.yml\n  when: ansible_pkg_mgr == 'yum'\n  tags:\n   - centos\n   - install\n\n- include: openbsd_install.yml\n  when: ansible_pkg_mgr == 'openbsd_pkg'\n  tags:\n   - openbsd\n   - install\n\n- include: freebsd_install.yml\n  when: ansible_pkg_mgr == 'pkgng'\n  tags:\n   - freebsd\n   - install\n\n- include: configure.yml\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "2149edf99fe1c251d0eaad5c78536c9b1d54dde3", "sha": "320b85c8826a053d758790859d0d5b61b9c579ae", "filename": "tasks/freebsd_install.yml", "decoded_content": "---\n\n- name: Setup FreeBSD specific variables (set_fact)\n  set_fact:\n    tor_DataDir: /var/db/tor\n    tor_ConfDir: /usr/local/etc/tor/enabled\n  tags:\n   - reconfigure\n   - createdir\n\n- name: Ensure Tor is installed (FreeBSD)\n  become: yes\n  pkgng: name=tor state=present\n\n# temporary solution until rc.d supports multiple instances\n- name: Ensure Tor starts at boot (FreeBSD)\n  become: yes\n  lineinfile: dest=/etc/rc.local line=\"/usr/local/bin/tor -f {{ tor_ConfDir }}/{{ item[0] }}_{{ item.1.orport }}.torrc\" create=yes\n  with_nested:\n   - tor_ips\n   - tor_ports\n\n- name: If LogDir is a file, rename it (FreeBSD)\n  become: yes\n  shell: \"test -f {{ tor_LogDir }} && mv {{ tor_LogDir }} {{ tor_LogDir }}.bk-`date '+%Y-%m-%d_%H%M%S'`\"\n  ignore_errors: yes\n\n- name: Gather current kern.ipc.somaxconn setting (FreeBSD)\n  shell: \"sysctl kern.ipc.somaxconn|cut -d' '  -f2\"\n  register: currentsomaxconn\n  tags:\n   - freebsdkern\n\n- name: Ensure somaxconn setting is reasonable (FreeBSD)\n  become: yes\n  command: \"sysctl kern.ipc.somaxconn={{ freebsd_somaxconn }}\"\n  when: currentsomaxconn.stdout|int < {{ freebsd_somaxconn }}\n  tags:\n   - freebsdkern\n\n- name: Ensure somaxconn setting in sysctl.conf is reasonable (FreeBSD)\n  become: yes\n  lineinfile: dest=/etc/sysctl.conf regexp=^kern.ipc.somaxconn line=\"kern.ipc.somaxconn={{ freebsd_somaxconn }}\" create=yes\n  when: currentsomaxconn.stdout|int < {{ freebsd_somaxconn }}\n  tags:\n   - freebsdkern\n\n- name: Gather current kern.ipc.nmbclusters setting (FreeBSD)\n  shell: \"sysctl kern.ipc.nmbclusters|cut -d' '  -f2\"\n  register: currentnmbc\n  tags:\n   - freebsdkern\n\n- name: Ensure nmbclusters setting is reasonable (FreeBSD)\n  become: yes\n  command: \"sysctl kern.ipc.nmbclusters={{ freebsd_nmbclusters }}\"\n  when: currentnmbc.stdout|int < {{ freebsd_nmbclusters }}\n  tags:\n   - freebsdkern\n\n- name: Ensure nmbclusters setting in sysctl.conf is reasonable (FreeBSD)\n  become: yes\n  lineinfile: dest=/etc/sysctl.conf regexp=^kern.ipc.nmbclusters line=\"kern.ipc.nmbclusters={{ freebsd_nmbclusters }}\" create=yes\n  when: currentnmbc.stdout|int < {{ freebsd_nmbclusters }}\n  tags:\n   - freebsdkern\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "33341b8cd483ae2583a4bd7c1bd79c82e4a12e4b", "sha": "e5719908effba9837433672d417a807367e56803", "filename": "tasks/apt_install.yml", "decoded_content": "---\n\n- name: Setup Debian specific variables (set_fact)\n  set_fact:\n    tor_user: debian-tor\n  tags:\n   - configure\n   - createdir\n\n- name: Ensure torproject gpg key is installed (A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89)\n  sudo: yes\n  apt_key: data=\"{{ lookup('file', 'deb.torproject.org_A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89.pub') }}\"\n    id=A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89\n    state=present\n\n- name: Ensure torproject.org repository is present (APT)\n  sudo: yes\n  apt_repository: repo='deb http://deb.torproject.org/torproject.org {{ tor_distribution_release }} main'\n    state=present \n    update_cache=yes\n\n# waiting for trac ticket #14997\n#- name: Ensure  torproject.org alpha repo is present (if enabled)\n#  apt_repository: >\n#    repo='deb http://deb.torproject.org/torproject.org  main'\n#    state=present \n#    update_cache=yes\n#  when: tor_alpha is True\n\n# we specifically opt for present over latest to improve performance\n# \"latest\" is covered by auto updates\n- name: Ensure Tor is installed (APT)\n  sudo: yes\n  apt: pkg=\"{{ item }}\" state=present\n  with_items: \n    - deb.torproject.org-keyring\n    - tor\n  # apt starts a tor client instance by default after installing the package\n  # we do not need that\n  notify:\n    - stop tor\n    - disable-sysv-debian tor\n\n- name: Ensure the presence of the multi-instance systemd unit file (Debian)\n  sudo: yes\n  template: src=debian_tor@.service dest=/lib/systemd/system/tor@.service owner=root mode=0644 backup=yes\n  when: ansible_distribution == 'Debian'\n  notify: systemctl daemon-reload\n\n- name: Ensure the presence of the multi-instance systemd unit file (Ubuntu)\n  sudo: yes\n  copy: src=ubuntu_tor@.service dest=/lib/systemd/system/tor@.service owner=root mode=0644 backup=yes\n  when: ansible_distribution == 'Ubuntu'\n  notify: systemctl daemon-reload\n\n- name: Ensure AppArmor allows access to necessary files (Ubuntu)\n  sudo: yes\n  lineinfile: dest=/etc/apparmor.d/local/system_tor line={{ item }}\n  with_items:\n    - '/etc/tor/enabled/*\\ r,'\n    - '/{,var/}run/tor/*.pid\\ w,'\n    - '/var/lib/tor/**\\ w,'\n  when: ansible_distribution == 'Ubuntu'\n  notify: restart apparmor\n\n- meta: flush_handlers\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "51dcdf691a7801895b569a5a927e30030d8feb70", "sha": "ca88ce2542fe98f8a0e9e5b82f0310540dde1d67", "filename": "tasks/apt_install.yml", "decoded_content": "---\n\n- name: Setup Debian specific variables (set_fact)\n  set_fact:\n    tor_user: debian-tor\n    tor_DataDir: /var/lib/tor-instances\n    tor_ConfDir: /etc/tor/instances\n    tor_RunAsDaemon: 0\n  tags:\n   - reconfigure\n   - renewkey\n   - createdir\n\n- name: Ensure torproject gpg key is installed (A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89)\n  become: yes\n  apt_key: data=\"{{ lookup('file', 'deb.torproject.org_A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89.pub') }}\"\n    id=A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89\n    state=present\n\n- name: Ensure torproject.org repository is present (APT)\n  become: yes\n  apt_repository: repo='deb http://deb.torproject.org/torproject.org {{ tor_distribution_release }} main'\n    state=present \n    update_cache=yes\n\n# we specifically opt for present over latest to improve performance\n# \"latest\" is covered by auto updates\n- name: Ensure Tor is installed (APT)\n  become: yes\n  apt: pkg=\"{{ item }}\" state=present\n  with_items: \n    - deb.torproject.org-keyring\n    - tor\n  # apt starts a tor client instance by default after installing the package\n  # we do not need that\n  notify:\n    - stop-and-disable default tor\n\n\n- name: Ensure AppArmor allows access to necessary files (Ubuntu)\n  become: yes\n  lineinfile: dest=/etc/apparmor.d/local/system_tor line={{ item }}\n  with_items:\n    - '/etc/tor/enabled/*\\ r,'\n    - '/{,var/}run/tor/*.pid\\ w,'\n    - '/var/lib/tor/**\\ w,'\n  when: ansible_distribution == 'Ubuntu'\n  notify: restart apparmor\n\n- meta: flush_handlers\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "850b64e62ec69d7b4d32f0ad9258e608b0e50ca2", "sha": "45eff103c7fc8fdadba9be304eec5266a89b711a", "filename": "tasks/freebsd_install.yml", "decoded_content": "---\n\n- name: Setup FreeBSD specific variables (set_fact)\n  set_fact:\n    tor_DataDir: /var/db/tor\n    tor_ConfDir: /usr/local/etc/tor/enabled\n  tags:\n   - configure\n   - createdir\n\n- name: Ensure Tor is installed (FreeBSD)\n  sudo: yes\n  pkgng: name=tor state=present\n  when: tor_alpha == False\n\n# pkg will take care of removing tor stable\n# if installed\n- name: Ensure Tor alpha is installed (FreeBSD)\n  sudo: yes\n  pkgng: name=tor-devel state=present\n  when: tor_alpha == True\n\n# temporary solution until rc.d supports multiple instances\n- name: Ensure Tor starts at boot (FreeBSD)\n  sudo: yes\n  lineinfile: dest=/etc/rc.local line=\"/usr/local/bin/tor -f {{ tor_ConfDir }}/{{ item[0] }}_{{ item.1.orport }}.torrc\" create=yes\n  with_nested:\n   - tor_ips\n   - tor_ports\n\n- name: If LogDir is a file, rename it (FreeBSD)\n  sudo: yes\n  shell: \"test -f {{ tor_LogDir }} && mv {{ tor_LogDir }} {{ tor_LogDir }}.bk-`date '+%Y-%m-%d_%H%M%S'`\"\n  ignore_errors: yes\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "9f2f1160c4dc3fea2f6e81e42ba8a6254ef093db", "sha": "019844cf9ef417aa49cbc5d7bf08b01742a25019", "filename": "tasks/freebsd_prepare.yml", "decoded_content": "---\n\n- name: Choose tor alpha version package (FreeBSD)\n  set_fact:\n    tor_packages: tor-devel\n  when: tor_alpha\n\n- name: Ensure sequential IP IDs are avoided (FreeBSD)\n  become: yes\n  sysctl:\n    name: net.inet.ip.random_id\n    value: 1\n    reload: no\n    sysctl_set: yes\n\n- name: Gather current kern.ipc.somaxconn setting (FreeBSD)\n  shell: \"sysctl kern.ipc.somaxconn|cut -d' '  -f2\"\n  become: no\n  register: tor_currentsomaxconn\n  changed_when: False\n\n- name: Ensure somaxconn setting is reasonable (FreeBSD)\n  become: yes\n  sysctl:\n    name: kern.ipc.somaxconn\n    value: \"{{ tor_freebsd_somaxconn }}\"\n    reload: no\n    sysctl_set: yes\n  when: tor_currentsomaxconn.stdout|int < tor_freebsd_somaxconn\n\n- name: Gather current kern.ipc.nmbclusters setting (FreeBSD)\n  become: no\n  shell: \"sysctl kern.ipc.nmbclusters|cut -d' '  -f2\"\n  register: tor_currentnmbc\n  changed_when: False\n\n- name: Ensure nmbclusters setting is reasonable (FreeBSD)\n  become: yes\n  sysctl:\n    name: kern.ipc.nmbclusters\n    value: \"{{ tor_freebsd_nmbclusters }}\"\n    reload: no\n    sysctl_set: yes\n  when: tor_currentnmbc.stdout|int < tor_freebsd_nmbclusters\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "1224adf2811c827a09ff0bf133fbb476901a547d", "sha": "22cae057f979ca9cf9a02c8393eca244eb26390a", "filename": "tasks/apt_prepare.yml", "decoded_content": "---\n\n- name: Ensure torproject gpg key is installed (A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89)\n  become: yes\n  apt_key:\n    data: \"{{ lookup('file', 'deb.torproject.org_A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89.pub') }}\"\n    id: A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89\n    state: present\n\n- name: Ensure torproject.org repository is present (APT)\n  become: yes\n  apt_repository:\n    repo: 'deb http://deb.torproject.org/torproject.org {{ tor_distribution_release }} main'\n    state: present\n    update_cache: yes\n\n- name: Ensure torproject.org alpha repo is present if enabled (APT)\n  become: yes\n  apt_repository:\n    repo: 'deb http://deb.torproject.org/torproject.org tor-experimental-{{ tor_alpha_version }}.x-{{ tor_distribution_release }} main'\n    state: present\n    update_cache: yes\n  when: tor_alpha == True\n\n# Background:\n# https://github.com/nusenu/ansible-relayor/issues/72\n- name: Ensure systemd generator folder exists (Debian Testing and Ubuntu)\n  become: yes\n  file:\n    path: /etc/systemd/system-generators\n    state: directory\n    mode: 0755\n  when: ansible_lsb.codename != 'jessie'\n\n- name: Ensure custom systemd generator is in place (Debian/Ubuntu only)\n  become: yes\n  copy:\n    src: tor-generator\n    dest: \"{{ (ansible_lsb.codename == 'jessie')|ternary('/lib/systemd/system-generators/relayor-generator', '/etc/systemd/system-generators/tor-generator') }}\"\n    owner: root\n    mode: 0755\n\n- name: Ensure the maintainer's generator is disabled (Debian 8 only)\n  become: yes\n  command: dpkg-statoverride --update --add root root 644 /lib/systemd/system-generators/tor-generator\n  when: ansible_lsb.codename == 'jessie'\n  ignore_errors: yes\n\n#- name: Ensure AppArmor allows access to necessary files (Ubuntu)\n#  become: yes\n#  lineinfile: dest=/etc/apparmor.d/local/system_tor line={{ item }}\n#  with_items:\n#    - '/etc/tor/enabled/*\\ r,'\n#    - '/{,var/}run/tor/*.pid\\ w,'\n#    - '/var/lib/tor/**\\ w,'\n#  when: ansible_distribution == 'Ubuntu'\n#  notify: restart apparmor\n\n#- meta: flush_handlers\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "33341b8cd483ae2583a4bd7c1bd79c82e4a12e4b", "sha": "2ecf11ba471a9fcee1632f7026c4867d14d55757", "filename": "tasks/freebsd_install.yml", "decoded_content": "---\n\n- name: Setup FreeBSD specific variables (set_fact)\n  set_fact:\n    tor_DataDir: /var/db/tor\n    tor_ConfDir: /usr/local/etc/tor/enabled\n  tags:\n   - configure\n   - createdir\n\n- name: Ensure Tor is installed (FreeBSD)\n  sudo: yes\n  pkgng: name=tor state=present\n\n# temporary solution until rc.d supports multiple instances\n- name: Ensure Tor starts at boot (FreeBSD)\n  sudo: yes\n  lineinfile: dest=/etc/rc.local line=\"/usr/local/bin/tor -f {{ tor_ConfDir }}/{{ item[0] }}_{{ item.1.orport }}.torrc\" create=yes\n  with_nested:\n   - tor_ips\n   - tor_ports\n\n- name: If LogDir is a file, rename it (FreeBSD)\n  sudo: yes\n  shell: \"test -f {{ tor_LogDir }} && mv {{ tor_LogDir }} {{ tor_LogDir }}.bk-`date '+%Y-%m-%d_%H%M%S'`\"\n  ignore_errors: yes\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "1224adf2811c827a09ff0bf133fbb476901a547d", "sha": "ad567fdf2538c521ac0bdb3be64333d4a0841ec2", "filename": "tasks/configure.yml", "decoded_content": "---\n\n- name: Ensure local DataDir folders exist (LOCAL)\n  file:\n    path: \"{{ tor_offline_masterkey_dir }}/{{ inventory_hostname }}-{{ item.0.ipv4 }}_{{ item.1.orport }}\"\n    state: directory\n    mode: 0700\n  delegate_to: 127.0.0.1\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n  tags:\n   - createdir\n\n- name: Ensure all relay keys exist (LOCAL)\n  local_action: command tor --PublishServerDescriptor 0 --orport auto --list-fingerprint --datadirectory \"{{ tor_offline_masterkey_dir }}/{{ inventory_hostname }}-{{ item.0.ipv4 }}_{{ item.1.orport }}\" --Log \"err stdout\"\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n\n- name: Generate new Ed25519 signing keys (LOCAL)\n  local_action: command tor --keygen --SigningKeyLifetime {{ tor_signingkeylifetime_days}}\\ days --datadirectory \"{{ tor_offline_masterkey_dir }}/{{ inventory_hostname }}-{{ item.0.ipv4 }}_{{ item.1.orport }}\" --Log \"err stdout\"\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n  tags:\n   - renewkey\n\n- name: Detect duplicate relay keys across relays (LOCAL)\n  shell: openssl sha256 -r {{ tor_offline_masterkey_dir }}/*/keys/secret_id_key {{ tor_offline_masterkey_dir }}/*/keys/ed25519_master_id_secret_key|cut -d' ' -f1|sort|uniq -d|wc -l\n  delegate_to: 127.0.0.1\n  run_once: true\n  register: dupcount\n\n- name: Abort on duplicate relay keys\n  fail: msg=\"Duplicate relay key detected! Aborting.\"\n  run_once: true\n  when: dupcount.stdout|int(1) != 0\n\n- name: Detect if Ed25519 master keys are on the relay\n  stat:\n    path: \"{{ tor_DataDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}/keys/ed25519_master_id_secret_key\"\n  become: yes\n  register: masterkeycheck\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n\n- name: Abort if Ed25519 master keys are on the relay\n  fail: msg=\"\n\n            Ed25519 MASTER KEY detected on the relay - it is NOT supposed to be there! Aborting.\"\n  when: item.stat.exists == True\n  with_items: \"{{ masterkeycheck.results }}\"\n\n- name: Collect fingerprints for MyFamily (LOCAL)\n  shell: cut  -d\" \" -f2 {{ tor_offline_masterkey_dir }}/*/fingerprint|sort|xargs|sed -e 's/ /,/g'\n  delegate_to: 127.0.0.1\n  run_once: true\n  register: family\n  tags:\n   - reconfigure\n\n- name: Ensure per-instance tor users exist\n  become: yes\n  user:\n    name: _tor-{{ item.0.ipv4 }}_{{ item.1.orport }}\n    system: yes\n    shell: /bin/false\n    createhome: no\n    home: \"{{ tor_DataDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}\"\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n\n- name: Ensure per-instance config folders exist (Debian only)\n  become: yes\n  file:\n    path: \"{{ tor_ConfDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}\"\n    state: directory\n    mode: 0755\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n  when: ansible_pkg_mgr == 'apt'\n\n- name: Ensure DataDir exists\n  become: yes\n  file:\n    path: \"{{ tor_DataDir }}\"\n    state: directory\n    owner: root\n    mode: 0755\n\n- name: Ensure \"keys\" subfolder exists\n  become: yes\n  file:\n    path: \"{{ tor_DataDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}/keys\"\n    state: directory\n    owner: \"_tor-{{ item.0.ipv4 }}_{{ item.1.orport }}\"\n    group: \"_tor-{{ item.0.ipv4 }}_{{ item.1.orport }}\"\n    mode: 0700\n    recurse: yes\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n\n- name: Ensure RSA key is in place (without overriding existing keys)\n  become: yes\n  copy:\n    src: \"{{ tor_offline_masterkey_dir }}/{{ inventory_hostname }}-{{ item.0.ipv4 }}_{{ item.1.orport }}/keys/{{ item[2] }}\"\n    dest: \"{{ tor_DataDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}/keys/{{ item[2] }}\"\n    owner: \"_tor-{{ item.0.ipv4 }}_{{ item.1.orport }}\"\n    mode: 0700\n    force: no\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n   - [ 'secret_id_key' ]\n\n- name: Fetch RSA key for comparision\n  become: yes\n  fetch:\n    src: \"{{ tor_DataDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}/keys/{{ item[2] }}\"\n    dest: \"{{ tor_offline_masterkey_dir }}/{{ inventory_hostname }}-{{ item.0.ipv4 }}_{{ item.1.orport }}/keys/{{ item[2] }}.untrustedremotekey\"\n    flat: yes\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n   - [ 'secret_id_key' ]\n\n- name: Compare local vs. remote RSA key (secret_id_key)\n  local_action: shell openssl sha256 -r {{ tor_offline_masterkey_dir }}/{{ inventory_hostname }}-\"{{ item.0.ipv4 }}_{{ item.1.orport }}\"/keys/secret_id_key*|cut -d' ' -f1|uniq -d|wc -l\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n  register: rsakey\n\n- name: Abort if local and remote RSA keys do not match\n  assert:\n    that:\n      - \"item.stdout|int == 1\"\n    msg: \"Key mismatch detected! Solution: http://bit.ly/2j6wc70 Affected instance: {{ tor_offline_masterkey_dir }}/{{ inventory_hostname }}-{{ item.item.0.ipv4 }}_{{ item.item.1.orport }}/keys\"\n  with_items: \"{{ rsakey.results }}\"\n\n# this task is separated from the task named \"Ensure RSA key is in place\" because it is not run with 'force=no'\n- name: Transmit new Ed25519 signing keys\n  become: yes\n  copy:\n    src: \"{{ tor_offline_masterkey_dir }}/{{ inventory_hostname }}-{{ item.0.ipv4 }}_{{ item.1.orport }}/keys/{{ item[2] }}\"\n    dest: \"{{ tor_DataDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}/keys/{{ item[2] }}\"\n    owner: \"_tor-{{ item.0.ipv4 }}_{{ item.1.orport }}\"\n    mode: 0700\n    setype: tor_var_lib_t\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n   - [ 'ed25519_signing_cert', 'ed25519_signing_secret_key' ]\n  tags:\n   - renewkey\n\n# This needs to be at the end to fix SELinux contexts recursively\n- name: Ensure per-instance DataDir have proper permissions\n  become: yes\n  file:\n    path: \"{{ tor_DataDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}\"\n    state: directory\n    owner: \"_tor-{{ item.0.ipv4 }}_{{ item.1.orport }}\"\n    group: \"_tor-{{ item.0.ipv4 }}_{{ item.1.orport }}\"\n    mode: 0700\n    recurse: yes\n    setype: tor_var_lib_t\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n\n- name: Ensure Tor config directory exists\n  become: yes\n  file:\n    path: \"{{ tor_ConfDir }}\"\n    state: directory\n    owner: root\n    group: \"{{ tor_user }}\"\n    mode: 0755\n\n- name: Ensure tor-exit-notice.html is present (if we are an exit)\n  become: yes\n  template:\n    src: tor-exit-notice.html\n    dest: \"{{ tor_ConfDir }}/tor-exit-notice.html\"\n    mode: 0444\n  when: tor_ExitRelay == True and tor_ExitNoticePage == True\n\n- name: Generating torrc file(s)\n  become: yes\n  template:\n    src: torrc\n    dest: \"{{ (ansible_pkg_mgr != 'apt')| ternary(tor_ConfDir ~ '/' ~ item.0.ipv4 ~ '_' ~ item.1.orport ~ '.torrc', tor_ConfDir ~ '/' ~ item.0.ipv4 ~ '_' ~ item.1.orport ~ '/torrc') }}\"\n    owner: root\n    mode: 0644\n    backup: yes\n    validate: \"tor --verify-config -f %s\"\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n  register: instances\n  notify:\n    - Ensure Tor instances are reloaded if its torrc changed (FreeBSD)\n    - Ensure Tor instances are reloaded if its torrc changed (Linux)\n  tags:\n   - reconfigure\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "dbe5647c4e42252e9e428e50b9b0a3636f94842a", "sha": "134bcfe867e1dacdc394357b1de5cbe96899dd26", "filename": "tasks/configure.yml", "decoded_content": "---\n\n- name: Ensure local DataDir folders exist (LOCAL)\n  file:\n    path: \"{{ tor_offline_masterkey_dir }}/{{ inventory_hostname }}-{{ item.0.ipv4 }}_{{ item.1.orport }}\"\n    state: directory\n    mode: 0700\n  delegate_to: 127.0.0.1\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n  tags:\n   - createdir\n\n- name: Ensure all relay keys exist (LOCAL)\n  local_action: command tor --PublishServerDescriptor 0 --orport auto --list-fingerprint --datadirectory \"{{ tor_offline_masterkey_dir }}/{{ inventory_hostname }}-{{ item.0.ipv4 }}_{{ item.1.orport }}\" --Log \"err stdout\"\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n\n- name: Generate new Ed25519 signing keys (LOCAL)\n  local_action: command tor --keygen --SigningKeyLifetime {{ tor_signingkeylifetime_days}}\\ days --datadirectory \"{{ tor_offline_masterkey_dir }}/{{ inventory_hostname }}-{{ item.0.ipv4 }}_{{ item.1.orport }}\" --Log \"err stdout\"\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n  tags:\n   - renewkey\n\n- name: Detect duplicate relay keys across relays (LOCAL)\n  shell: sha1sum {{ tor_offline_masterkey_dir }}/*/keys/secret_id_key {{ tor_offline_masterkey_dir }}/*/keys/ed25519_master_id_secret_key|cut -d/ -f1|sort|uniq -d|wc -l\n  delegate_to: 127.0.0.1\n  register: dupcount\n\n- name: Abort on duplicate relay keys\n  fail: msg=\"Duplicate relay key detected! Aborting.\"\n  when: dupcount.stdout != \"0\"\n\n- name: Detect if Ed25519 master keys are on the relay\n  stat:\n    path: \"{{ tor_DataDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}/keys/ed25519_master_id_secret_key\"\n  become: yes\n  register: masterkeycheck\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n\n- name: Abort if Ed25519 master keys are on the relay\n  fail: msg=\"\n\n            Ed25519 MASTER KEY detected on the relay - it is NOT supposed to be there! Aborting.\"\n  when: item.stat.exists == True\n  with_items: \"{{ masterkeycheck.results }}\"\n\n- name: Collect fingerprints for MyFamily (LOCAL)\n  shell: cut {{ tor_offline_masterkey_dir }}/*/fingerprint -d\" \" -f2|sort|xargs|sed -e 's/ /,/g'\n  delegate_to: 127.0.0.1\n  register: family\n  tags:\n   - reconfigure\n\n- name: Ensure per-instance tor users exist\n  become: yes\n  user:\n    name: _tor-{{ item.0.ipv4 }}_{{ item.1.orport }}\n    system: yes\n    shell: /bin/false\n    createhome: no\n    home: \"{{ tor_DataDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}\"\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n\n- name: Ensure per-instance config folders exist (Debian only)\n  become: yes\n  file:\n    path: \"{{ tor_ConfDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}\"\n    state: directory\n    mode: 0755\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n  when: ansible_pkg_mgr == 'apt'\n\n- name: Ensure DataDir exists\n  become: yes\n  file:\n    path: \"{{ tor_DataDir }}\"\n    state: directory\n    owner: root\n    mode: 0755\n\n- name: Ensure \"keys\" subfolder exists\n  become: yes\n  file:\n    path: \"{{ tor_DataDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}/keys\"\n    state: directory\n    owner: \"_tor-{{ item.0.ipv4 }}_{{ item.1.orport }}\"\n    group: \"_tor-{{ item.0.ipv4 }}_{{ item.1.orport }}\"\n    mode: 0700\n    recurse: yes\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n\n- name: Ensure RSA key is in place (without overriding existing keys)\n  become: yes\n  copy:\n    src: \"{{ tor_offline_masterkey_dir }}/{{ inventory_hostname }}-{{ item.0.ipv4 }}_{{ item.1.orport }}/keys/{{ item[2] }}\"\n    dest: \"{{ tor_DataDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}/keys/{{ item[2] }}\"\n    owner: \"_tor-{{ item.0.ipv4 }}_{{ item.1.orport }}\"\n    mode: 0700\n    force: no\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n   - [ 'secret_id_key' ]\n\n- name: Fetch RSA key for comparision\n  become: yes\n  fetch:\n    src: \"{{ tor_DataDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}/keys/{{ item[2] }}\"\n    dest: \"{{ tor_offline_masterkey_dir }}/{{ inventory_hostname }}-{{ item.0.ipv4 }}_{{ item.1.orport }}/keys/{{ item[2] }}.untrustedremotekey\"\n    flat: yes\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n   - [ 'secret_id_key' ]\n\n- name: Compare local vs. remote RSA key (secret_id_key)\n  local_action: shell sha1sum {{ tor_offline_masterkey_dir }}/{{ inventory_hostname }}-\"{{ item.0.ipv4 }}_{{ item.1.orport }}\"/keys/secret_id_key*|cut -d/ -f1|uniq -d|wc -l\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n  register: rsakey\n\n- name: Abort if local and remote RSA keys do not match\n  fail: 'msg=\"\n\n\n   Key MISMATCH detected: Remote RSA key does not match local key - manual intervention required.\n\n   We detected that the remote host uses an RSA key that was not generated by us.\n   We will not override it with our locally generated key.\n\n   If you want to make use of the remote RSA key you have to override the local key manually:\n\n\n   cd ~/.tor/offlinemasterkeys/<inventoryname>-<IP_port>/keys\n\n   mv secret_id_key.untrustedremotekey secret_id_key\"'\n  when: item.stdout != \"1\"\n  with_items: \"{{ rsakey.results }}\"\n\n# this task is separated from the task named \"Ensure RSA key is in place\" because it is not run with 'force=no'\n- name: Transmit new Ed25519 signing keys\n  become: yes\n  copy:\n    src: \"{{ tor_offline_masterkey_dir }}/{{ inventory_hostname }}-{{ item.0.ipv4 }}_{{ item.1.orport }}/keys/{{ item[2] }}\"\n    dest: \"{{ tor_DataDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}/keys/{{ item[2] }}\"\n    owner: \"_tor-{{ item.0.ipv4 }}_{{ item.1.orport }}\"\n    mode: 0700\n    setype: tor_var_lib_t\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n   - [ 'ed25519_signing_cert', 'ed25519_signing_secret_key' ]\n  tags:\n   - renewkey\n\n# This needs to be at the end to fix SELinux contexts recursively\n- name: Ensure per-instance DataDir have proper permissions\n  become: yes\n  file:\n    path: \"{{ tor_DataDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}\"\n    state: directory\n    owner: \"_tor-{{ item.0.ipv4 }}_{{ item.1.orport }}\"\n    group: \"_tor-{{ item.0.ipv4 }}_{{ item.1.orport }}\"\n    mode: 0700\n    recurse: yes\n    setype: tor_var_lib_t\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n\n- name: Ensure Tor config directory exists\n  become: yes\n  file:\n    path: \"{{ tor_ConfDir }}\"\n    state: directory\n    owner: root\n    group: \"{{ tor_user }}\"\n    mode: 0755\n\n- name: Ensure tor-exit-notice.html is present (if we are an exit)\n  become: yes\n  template:\n    src: tor-exit-notice.html\n    dest: \"{{ tor_ConfDir }}/tor-exit-notice.html\"\n    mode: 0444\n  when: tor_ExitRelay == True and tor_ExitNoticePage == True\n\n- name: Generating torrc file(s)\n  become: yes\n  template:\n    src: torrc\n    dest: \"{{ (ansible_pkg_mgr != 'apt')| ternary(tor_ConfDir ~ '/' ~ item.0.ipv4 ~ '_' ~ item.1.orport ~ '.torrc', tor_ConfDir ~ '/' ~ item.0.ipv4 ~ '_' ~ item.1.orport ~ '/torrc') }}\"\n    owner: root\n    mode: 0644\n    backup: yes\n    validate: \"tor --verify-config -f %s\"\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n  register: instances\n  notify:\n    - Ensure Tor instances are reloaded if its torrc changed (FreeBSD)\n    - Ensure Tor instances are reloaded if its torrc changed (Linux)\n  tags:\n   - reconfigure\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "dbe5647c4e42252e9e428e50b9b0a3636f94842a", "sha": "a78e182aeadce254cb1a8396e0ca3b1898646609", "filename": "meta/main.yml", "decoded_content": "---\ngalaxy_info:\n  author: nusenu\n  description: An Ansible role for Tor Relay Operators\n  license: GPLv3\n  platforms:\n  - name: Debian\n    versions:\n    - jessie\n    - stretch\n  - name: FreeBSD\n    versions:\n    - 10.3\n    - 11.0\n  - name: OpenBSD\n    versions:\n    - 6.0\n  - name: EL\n    versions:\n    - 7\n  - name: Ubuntu\n    versions:\n    - xenial\n  - name: Fedora\n    versions:\n    - 25\n  galaxy_tags:\n    - tor\n    - ipv6\n    - anonymity\n    - networking\n  min_ansible_version: 2.1.3\ndependencies: []\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "25268594e4bf662f487ddd8792c22b93b27160fc", "sha": "d74f92e1323663028f3284f1d6e2d1feb654b947", "filename": "tasks/apt_install.yml", "decoded_content": "---\n\n- name: Ensure torproject gpg key is installed (A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89)\n  sudo: yes\n  apt_key: data=\"{{ lookup('file', 'deb.torproject.org_A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89.pub') }}\"\n    id=A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89\n    state=present\n\n- name: Ensure torproject.org repository is present (APT)\n  sudo: yes\n  apt_repository: repo='deb http://deb.torproject.org/torproject.org {{ tor_distribution_release }} main'\n    state=present \n    update_cache=yes\n\n# waiting for trac ticket #14997\n#- name: Ensure  torproject.org alpha repo is present (if enabled)\n#  apt_repository: >\n#    repo='deb http://deb.torproject.org/torproject.org  main'\n#    state=present \n#    update_cache=yes\n#  when: tor_alpha is True\n\n# we specifically opt for present over latest to improve performance\n# \"latest\" is covered by auto updates\n- name: Ensure Tor is installed (APT)\n  sudo: yes\n  apt: pkg=\"{{ item }}\" state=present\n  with_items: \n    - deb.torproject.org-keyring\n    - tor\n  register: aptresult\n\n# apt starts a tor client instance by default after installing the package\n# we do not need that\n- name: Stop default Tor config if we just installed the package (APT)\n  sudo: yes\n  service: name=tor state=stopped\n  when: aptresult.changed == True\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "0406395a8758f12abd57914532cc0ff17894d015", "sha": "32f5103b15c42801c90cee297893091bf910efb4", "filename": "tasks/openbsd_service.yml", "decoded_content": "---\n\n\n# OpenBSD section (uses service module)\n# This is basically a copy from the Linux\n# section, but it requires different service\n# names and additional arguments.\n# =====================================\n\n# OpenBSD does not support multi-instance rc.d\n# # so we link as many pseudo rc scripts as we need.\n# # OpenBSD does not like dots in rc filenames so\n# # we replace them with underscores.\n- name: Create links to the service files (OpenBSD)\n  become: yes\n  file: src=/etc/rc.d/tor state=link path=/etc/rc.d/tor{{ item.0.ipv4| replace('.','_') }}_{{ item.1.orport }}\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n\n- name: Ensure Tor instances are enabled and started (OpenBSD)\n  become: yes\n  service: name=tor{{ item.0.ipv4|replace('.','_') }}_{{ item.1.orport }}\n   arguments=\"-f {{ tor_ConfDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}.torrc\" enabled=yes state=started\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n\n- name: Ensure Tor instances are reloaded if its torrc changed (OpenBSD)\n  become: yes\n  service: name=tor{{ item.item.0.ipv4|replace('.','_') }}_{{ item.item.1.orport }} state=reloaded\n  with_items: \"{{ instances.results }}\"\n  when: item.changed == True\n  tags:\n   - reconfigure\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "c25e1f96cb3a91dfef803f4de935c51c597bd19d", "sha": "e58502e7b99758d1466ea93e4c12ff3ef5ab8dd5", "filename": "tasks/freebsd_prepare.yml", "decoded_content": "---\n\n- name: Setup FreeBSD specific variables (set_fact)\n  set_fact:\n    tor_DataDir: /var/db/tor-instances\n    tor_ConfDir: /usr/local/etc/tor/enabled\n    tor_PidDir: /var/run/tor-instances\n  tags:\n   - reconfigure\n   - renewkey\n\n- name: Ensure sequential IP IDs are avoided (FreeBSD)\n  become: yes\n  sysctl:\n    name: net.inet.ip.random_id\n    value: 1\n    reload: no\n    sysctl_set: yes\n\n- name: Gather current kern.ipc.somaxconn setting (FreeBSD)\n  shell: \"sysctl kern.ipc.somaxconn|cut -d' '  -f2\"\n  register: currentsomaxconn\n\n- name: Ensure somaxconn setting is reasonable (FreeBSD)\n  become: yes\n  sysctl:\n    name: kern.ipc.somaxconn\n    value: \"{{ freebsd_somaxconn }}\"\n    reload: no\n    sysctl_set: yes\n  when: currentsomaxconn.stdout|int < {{ freebsd_somaxconn }}\n\n- name: Gather current kern.ipc.nmbclusters setting (FreeBSD)\n  shell: \"sysctl kern.ipc.nmbclusters|cut -d' '  -f2\"\n  register: currentnmbc\n\n- name: Ensure nmbclusters setting is reasonable (FreeBSD)\n  become: yes\n  sysctl:\n    name: kern.ipc.nmbclusters\n    value: \"{{ freebsd_nmbclusters }}\"\n    reload: no\n    sysctl_set: yes\n  when: currentnmbc.stdout|int < {{ freebsd_nmbclusters }}\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "9f2f1160c4dc3fea2f6e81e42ba8a6254ef093db", "sha": "3c36c857e3d1f6bbf764b099972fe5fbc1491d6d", "filename": "tasks/openbsd_service.yml", "decoded_content": "---\n\n\n# OpenBSD section (uses service module)\n# This is basically a copy from the Linux\n# section, but it requires different service\n# names and additional arguments.\n# =====================================\n\n# OpenBSD does not support multi-instance rc.d\n# # so we link as many pseudo rc scripts as we need.\n# # OpenBSD does not like dots in rc filenames so\n# # we replace them with underscores.\n- name: Create links to the service files (OpenBSD)\n  become: yes\n  file:\n    src: /etc/rc.d/tor\n    state: link\n    path: \"/etc/rc.d/tor{{ item.0.ipv4| replace('.','_') }}_{{ item.1.orport }}\"\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n\n- name: Ensure Tor instances are enabled and started (OpenBSD)\n  become: yes\n  service:\n    name: \"tor{{ item.0.ipv4|replace('.','_') }}_{{ item.1.orport }}\"\n    arguments: \"-f {{ tor_ConfDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}.torrc\"\n    enabled: yes\n    state: started\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n\n- name: Ensure Tor instances are reloaded if its torrc changed (OpenBSD)\n  become: yes\n  service:\n    name: \"tor{{ item.item.0.ipv4|replace('.','_') }}_{{ item.item.1.orport }}\"\n    state: reloaded\n  with_items: \"{{ tor_instances_tmp.results }}\"\n  when: item.changed\n  tags:\n   - reconfigure\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "0406395a8758f12abd57914532cc0ff17894d015", "sha": "82946090639bed3bc6cbc65dbed7be0a4b47d5eb", "filename": "tasks/freebsd_install.yml", "decoded_content": "---\n\n- name: Setup FreeBSD specific variables (set_fact)\n  set_fact:\n    tor_DataDir: /var/db/tor-instances\n    tor_ConfDir: /usr/local/etc/tor/enabled\n    tor_PidDir: /var/run/tor-instances\n  tags:\n   - reconfigure\n   - renewkey\n\n- name: Ensure Tor is installed (FreeBSD)\n  become: yes\n  pkgng: name=tor state=present\n  tags:\n   - install\n\n- name: Ensure sequential IP IDs are avoided (net.inet.ip.random_id)\n  become: yes\n  sysctl: name=net.inet.ip.random_id value=1 reload=no sysctl_set=yes\n\n- name: Gather current kern.ipc.somaxconn setting (FreeBSD)\n  shell: \"sysctl kern.ipc.somaxconn|cut -d' '  -f2\"\n  register: currentsomaxconn\n\n- name: Ensure somaxconn setting is reasonable (FreeBSD)\n  become: yes\n  sysctl: name=kern.ipc.somaxconn value={{ freebsd_somaxconn }} reload=no sysctl_set=yes\n  when: currentsomaxconn.stdout|int < {{ freebsd_somaxconn }}\n\n- name: Gather current kern.ipc.nmbclusters setting (FreeBSD)\n  shell: \"sysctl kern.ipc.nmbclusters|cut -d' '  -f2\"\n  register: currentnmbc\n\n- name: Ensure nmbclusters setting is reasonable (FreeBSD)\n  become: yes\n  sysctl: name=kern.ipc.nmbclusters value={{ freebsd_nmbclusters }} reload=no sysctl_set=yes\n  when: currentnmbc.stdout|int < {{ freebsd_nmbclusters }}\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "c25e1f96cb3a91dfef803f4de935c51c597bd19d", "sha": "2246944bb39d793f20b5ebbafd786dc27dd0325b", "filename": "tasks/openbsd_prepare.yml", "decoded_content": "---\n\n- name: Setup OpenBSD specific variables (set_fact)\n  set_fact:\n    tor_DataDir: /var/tor-instances\n    tor_ConfDir: /etc/tor/enabled\n  tags:\n   - reconfigure\n   - renewkey\n\n- name: Gather current system-wide file descriptor limits (OpenBSD)\n  shell: \"sysctl kern.maxfiles|cut -d= -f2\"\n  register: currentlimits\n\n- name: Ensure system-wide runtime file descriptor limits are reasonable (OpenBSD)\n  become: yes\n  command: \"sysctl kern.maxfiles=20000\"\n  when: currentlimits.stdout|int < 20000\n\n- name: Ensure system-wide persistent file descriptor limits are reasonable (OpenBSD)\n  become: yes\n  lineinfile:\n    dest: /etc/sysctl.conf\n    regexp: ^kern.maxfiles\n    line: \"kern.maxfiles=20000\"\n    create: yes\n  when: currentlimits.stdout|int < 20000\n\n# We rise openfiles limits for every tor instance separately.\n# An instance is identified by its rc.d file name.\n- name: Ensure Tor process file descriptor limits are reasonable (OpenBSD)\n  become: yes\n  lineinfile:\n    dest: /etc/login.conf\n    line: \"tor{{ item.0.ipv4| replace('.','_') }}_{{ item.1.orport }}::openfiles-max=13500::tc=daemon:\"\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "196c5c74623fe97d88ea1e2527b96d7ccef784a5", "sha": "99e350ff2e38e85446c539be0f9eb8972dab5610", "filename": "tasks/configure.yml", "decoded_content": "---\n\n- name: Ensure local DataDir folders exist (LOCAL)\n  file:\n    path: \"{{ tor_offline_masterkey_dir }}/{{ inventory_hostname }}-{{ item.0.ipv4 }}_{{ item.1.orport }}\"\n    state: directory\n    mode: 0700\n  delegate_to: 127.0.0.1\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n  tags:\n   - createdir\n\n- name: Ensure all relay keys exist (LOCAL)\n  local_action: command tor --PublishServerDescriptor 0 --orport auto --list-fingerprint --datadirectory \"{{ tor_offline_masterkey_dir }}/{{ inventory_hostname }}-{{ item.0.ipv4 }}_{{ item.1.orport }}\" --Log \"err stdout\"\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n\n- name: Generate new Ed25519 signing keys (LOCAL)\n  local_action: command tor --keygen --SigningKeyLifetime {{ tor_signingkeylifetime_days}}\\ days --datadirectory \"{{ tor_offline_masterkey_dir }}/{{ inventory_hostname }}-{{ item.0.ipv4 }}_{{ item.1.orport }}\" --Log \"err stdout\"\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n  tags:\n   - renewkey\n\n- name: Detect duplicate relay keys across relays (LOCAL)\n  shell: sha1sum {{ tor_offline_masterkey_dir }}/*/keys/secret_id_key {{ tor_offline_masterkey_dir }}/*/keys/ed25519_master_id_secret_key|cut -d/ -f1|sort|uniq -d|wc -l\n  delegate_to: 127.0.0.1\n  run_once: true\n  register: dupcount\n\n- name: Abort on duplicate relay keys\n  fail: msg=\"Duplicate relay key detected! Aborting.\"\n  run_once: true\n  when: dupcount.stdout|int(1) != 0\n\n- name: Detect if Ed25519 master keys are on the relay\n  stat:\n    path: \"{{ tor_DataDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}/keys/ed25519_master_id_secret_key\"\n  become: yes\n  register: masterkeycheck\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n\n- name: Abort if Ed25519 master keys are on the relay\n  fail: msg=\"\n\n            Ed25519 MASTER KEY detected on the relay - it is NOT supposed to be there! Aborting.\"\n  when: item.stat.exists == True\n  with_items: \"{{ masterkeycheck.results }}\"\n\n- name: Collect fingerprints for MyFamily (LOCAL)\n  shell: cut  -d\" \" -f2 {{ tor_offline_masterkey_dir }}/*/fingerprint|sort|xargs|sed -e 's/ /,/g'\n  delegate_to: 127.0.0.1\n  run_once: true\n  register: family\n  tags:\n   - reconfigure\n\n- name: Ensure per-instance tor users exist\n  become: yes\n  user:\n    name: _tor-{{ item.0.ipv4 }}_{{ item.1.orport }}\n    system: yes\n    shell: /bin/false\n    createhome: no\n    home: \"{{ tor_DataDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}\"\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n\n- name: Ensure per-instance config folders exist (Debian only)\n  become: yes\n  file:\n    path: \"{{ tor_ConfDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}\"\n    state: directory\n    mode: 0755\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n  when: ansible_pkg_mgr == 'apt'\n\n- name: Ensure DataDir exists\n  become: yes\n  file:\n    path: \"{{ tor_DataDir }}\"\n    state: directory\n    owner: root\n    mode: 0755\n\n- name: Ensure \"keys\" subfolder exists\n  become: yes\n  file:\n    path: \"{{ tor_DataDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}/keys\"\n    state: directory\n    owner: \"_tor-{{ item.0.ipv4 }}_{{ item.1.orport }}\"\n    group: \"_tor-{{ item.0.ipv4 }}_{{ item.1.orport }}\"\n    mode: 0700\n    recurse: yes\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n\n- name: Ensure RSA key is in place (without overriding existing keys)\n  become: yes\n  copy:\n    src: \"{{ tor_offline_masterkey_dir }}/{{ inventory_hostname }}-{{ item.0.ipv4 }}_{{ item.1.orport }}/keys/{{ item[2] }}\"\n    dest: \"{{ tor_DataDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}/keys/{{ item[2] }}\"\n    owner: \"_tor-{{ item.0.ipv4 }}_{{ item.1.orport }}\"\n    mode: 0700\n    force: no\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n   - [ 'secret_id_key' ]\n\n- name: Fetch RSA key for comparision\n  become: yes\n  fetch:\n    src: \"{{ tor_DataDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}/keys/{{ item[2] }}\"\n    dest: \"{{ tor_offline_masterkey_dir }}/{{ inventory_hostname }}-{{ item.0.ipv4 }}_{{ item.1.orport }}/keys/{{ item[2] }}.untrustedremotekey\"\n    flat: yes\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n   - [ 'secret_id_key' ]\n\n- name: Compare local vs. remote RSA key (secret_id_key)\n  local_action: shell sha1sum {{ tor_offline_masterkey_dir }}/{{ inventory_hostname }}-\"{{ item.0.ipv4 }}_{{ item.1.orport }}\"/keys/secret_id_key*|cut -d/ -f1|uniq -d|wc -l\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n  register: rsakey\n\n- name: Abort if local and remote RSA keys do not match\n  assert:\n    that:\n      - \"item.stdout|int == 1\"\n    msg: \"Key mismatch detected! Solution: http://bit.ly/2j6wc70 Affected instance: {{ tor_offline_masterkey_dir }}/{{ inventory_hostname }}-{{ item.item.0.ipv4 }}_{{ item.item.1.orport }}/keys\"\n  with_items: \"{{ rsakey.results }}\"\n\n# this task is separated from the task named \"Ensure RSA key is in place\" because it is not run with 'force=no'\n- name: Transmit new Ed25519 signing keys\n  become: yes\n  copy:\n    src: \"{{ tor_offline_masterkey_dir }}/{{ inventory_hostname }}-{{ item.0.ipv4 }}_{{ item.1.orport }}/keys/{{ item[2] }}\"\n    dest: \"{{ tor_DataDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}/keys/{{ item[2] }}\"\n    owner: \"_tor-{{ item.0.ipv4 }}_{{ item.1.orport }}\"\n    mode: 0700\n    setype: tor_var_lib_t\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n   - [ 'ed25519_signing_cert', 'ed25519_signing_secret_key' ]\n  tags:\n   - renewkey\n\n# This needs to be at the end to fix SELinux contexts recursively\n- name: Ensure per-instance DataDir have proper permissions\n  become: yes\n  file:\n    path: \"{{ tor_DataDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}\"\n    state: directory\n    owner: \"_tor-{{ item.0.ipv4 }}_{{ item.1.orport }}\"\n    group: \"_tor-{{ item.0.ipv4 }}_{{ item.1.orport }}\"\n    mode: 0700\n    recurse: yes\n    setype: tor_var_lib_t\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n\n- name: Ensure Tor config directory exists\n  become: yes\n  file:\n    path: \"{{ tor_ConfDir }}\"\n    state: directory\n    owner: root\n    group: \"{{ tor_user }}\"\n    mode: 0755\n\n- name: Ensure tor-exit-notice.html is present (if we are an exit)\n  become: yes\n  template:\n    src: tor-exit-notice.html\n    dest: \"{{ tor_ConfDir }}/tor-exit-notice.html\"\n    mode: 0444\n  when: tor_ExitRelay == True and tor_ExitNoticePage == True\n\n- name: Generating torrc file(s)\n  become: yes\n  template:\n    src: torrc\n    dest: \"{{ (ansible_pkg_mgr != 'apt')| ternary(tor_ConfDir ~ '/' ~ item.0.ipv4 ~ '_' ~ item.1.orport ~ '.torrc', tor_ConfDir ~ '/' ~ item.0.ipv4 ~ '_' ~ item.1.orport ~ '/torrc') }}\"\n    owner: root\n    mode: 0644\n    backup: yes\n    validate: \"tor --verify-config -f %s\"\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n  register: instances\n  notify:\n    - Ensure Tor instances are reloaded if its torrc changed (FreeBSD)\n    - Ensure Tor instances are reloaded if its torrc changed (Linux)\n  tags:\n   - reconfigure\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "44be91805d4a4c003d28a7c5fd3f7a6317863435", "sha": "f14854e4be56c06dbbdccdb0f83fb12ac2fd9c65", "filename": "tasks/main.yml", "decoded_content": "---\n\n- include: apt_install.yml\n  when: ansible_pkg_mgr == 'apt'\n  tags:\n   - debian\n   - install\n\n- include: rpm_install.yml\n  when: ansible_os_family == 'RedHat'\n  tags:\n   - centos\n   - fedora\n   - install\n\n- include: openbsd_install.yml\n  when: ansible_pkg_mgr == 'openbsd_pkg'\n  tags:\n   - openbsd\n\n- include: freebsd_install.yml\n  when: ansible_pkg_mgr == 'pkgng'\n  tags:\n   - freebsd\n\n- include: configure.yml\n  tags:\n   - debian\n   - centos\n   - fedora\n   - openbsd\n   - freebsd\n\n- include: linux_service.yml\n  when: ansible_system == 'Linux'\n  tags:\n   - debian\n   - centos\n   - fedora\n\n- include: openbsd_service.yml\n  when: ansible_system == 'OpenBSD'\n  tags:\n   - openbsd\n\n- include: freebsd_service.yml\n  when: ansible_system == 'FreeBSD'\n  tags:\n   - freebsd\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "0406395a8758f12abd57914532cc0ff17894d015", "sha": "1612e24a60a6865ea84c8dc17c90079a9617547b", "filename": "tasks/linux_service.yml", "decoded_content": "---\n\n# Linux/systemd section (uses service module)\n# ===========================================\n\n- name: Ensure systemd drop-in folder is present\n  become: yes\n  file: path=/etc/systemd/system/tor@.service.d\n    state=directory\n    owner=root\n    mode=0755\n  when: ansible_os_family == 'RedHat'\n\n# this is needed for a small service file modification (allow it to write to /var/lib/tor-instances)\n# # without replacing the maintainer's file, for details see\n# # http://www.freedesktop.org/software/systemd/man/systemd.unit.html#id-1.11.3\n- name: Ensure service file drop-in is present\n  become: yes\n  copy: src=local.conf\n   dest=/etc/systemd/system/tor@.service.d/local.conf\n   owner=root\n   mode=640\n  when: ansible_os_family == 'RedHat'\n  notify: systemctl daemon-reload\n\n- meta: flush_handlers\n \n- name: Ensure Tor instances are reloaded if its torrc changed (Linux/systemd)\n  become: yes\n  service: name=tor@{{ item.item.0.ipv4 }}_{{ item.item.1.orport }}.service state=reloaded\n  with_items: \"{{ instances.results }}\"\n  when: item.changed == True\n  tags:\n   - reconfigure\n\n- name: Ensure Tor instances are enabled and started (Linux/systemd)\n  become: yes\n  service: name=tor@{{ item.0.ipv4 }}_{{ item.1.orport }}.service enabled=yes state=started\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "dbe5647c4e42252e9e428e50b9b0a3636f94842a", "sha": "e6234dbeed316c321388b1b537c0ea69c0078a46", "filename": "tasks/rpm_prepare.yml", "decoded_content": "---\n\n- name: Ensure EPEL repo is installed (yum)\n  become: yes\n  yum:\n    name: epel-release\n  when: ansible_pkg_mgr == 'yum'\n\n- name: Ensure SELinux dependencies are installed\n  become: yes\n  package:\n    name: libselinux-python,libsemanage-python\n    state: present\n  notify: re-gather facts\n\n# re-gathering facts after installing libselinux-python\n# is a workaround for https://github.com/ansible/ansible-modules-core/issues/2432\n- meta: flush_handlers\n\n- name: Ensure SELinux boolean (tor_can_network_relay) is set appropriately (Fedora)\n  become: yes\n  seboolean:\n    name: tor_can_network_relay\n    state: yes\n    persistent: yes\n  when: ansible_selinux.status == 'enabled'\n\n- name: Ensure systemd drop-in folder is present (RPM)\n  become: yes\n  file:\n    path: /etc/systemd/system/tor@.service.d\n    state: directory\n    owner: root\n    mode: 0755\n\n# this is needed for a small service file modification (allow it to write to /var/lib/tor-instances)\n# without replacing the maintainer's file, for details see\n# http://www.freedesktop.org/software/systemd/man/systemd.unit.html#id-1.11.3\n- name: Ensure service file drop-in is present (RPM)\n  become: yes\n  copy:\n    src: local.conf\n    dest: /etc/systemd/system/tor@.service.d/local.conf\n    owner: root\n    mode: 0644\n  notify: systemctl daemon-reload\n\n- meta: flush_handlers\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "44be91805d4a4c003d28a7c5fd3f7a6317863435", "sha": "4c020120eb2c679567264371b541d0244b425426", "filename": "tasks/freebsd_service.yml", "decoded_content": "---\n\n- name: Ensure Tor starts at boot (FreeBSD)\n  become: yes\n  lineinfile: dest=/etc/rc.local line=\"/usr/local/bin/tor -f {{ tor_ConfDir }}/{{ item[0] }}_{{ item.1.orport }}.torrc\" create=yes\n  with_nested:\n   - tor_ips\n   - tor_ports\n\n- name: Ensure PidDir exists (FreeBSD)\n  become: yes\n  file: path={{ tor_PidDir }}\n    state=directory\n    owner=root\n    mode=0755\n\n- name: Ensure PidDir is owned by per-instance tor_user (FreeBSD)\n  become: yes\n  file: path={{ tor_PidDir }}/{{ item[0] }}_{{ item.1.orport }}\n    state=directory\n    owner=_tor-{{ item[0] }}_{{ item.1.orport }}\n    mode=0700\n  with_nested:\n   - tor_ips\n   - tor_ports\n\n- name: Ensure Tor instances are reloaded if its torrc changed (FreeBSD)\n  become: yes\n  shell: \"kill -HUP `cat {{ tor_PidDir }}/{{ item.item[0] }}_{{ item.item.1.orport }}/pid`\"\n  ignore_errors: yes\n  with_items: instances.results\n  when: item.changed == True\n  tags:\n   - reconfigure\n\n- name: Ensure Tor instances are running (FreeBSD)\n  become: yes\n  shell: \"kill -0 `cat {{ tor_PidDir }}/{{ item[0] }}_{{ item.1.orport }}/pid` || tor -f {{ tor_ConfDir }}/{{ item[0] }}_{{ item.1.orport }}.torrc\"\n  with_nested:\n   - tor_ips\n   - tor_ports\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "51dcdf691a7801895b569a5a927e30030d8feb70", "sha": "9f61426bcd70b089e5359a0897bd8fec65b1930d", "filename": "handlers/main.yml", "decoded_content": "---\n#- name: restart tor\n#  service: name=tor state=restarted\n\n- name: stop-and-disable default tor\n  become: yes\n  service: name=tor state=stopped enabled=no\n\n- name: restart apparmor\n  become: yes\n  service: name=apparmor state=restarted\n\n- name: systemctl daemon-reload\n  become: yes\n  command: systemctl daemon-reload\n\n- name: re-gather facts\n  setup:\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "0406395a8758f12abd57914532cc0ff17894d015", "sha": "4ff792114aa3da6d25458cb4454e3751d42f3844", "filename": "tasks/freebsd_service.yml", "decoded_content": "---\n\n- name: Ensure Tor starts at boot (FreeBSD)\n  become: yes\n  lineinfile: dest=/etc/rc.local line=\"/usr/local/bin/tor -f {{ tor_ConfDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}.torrc\" create=yes\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n\n- name: Ensure PidDir exists (FreeBSD)\n  become: yes\n  file: path={{ tor_PidDir }}\n    state=directory\n    owner=root\n    mode=0755\n\n- name: Ensure PidDir is owned by per-instance tor_user (FreeBSD)\n  become: yes\n  file: path={{ tor_PidDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}\n    state=directory\n    owner=_tor-{{ item.0.ipv4 }}_{{ item.1.orport }}\n    mode=0700\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n\n- name: Ensure Tor instances are reloaded if its torrc changed (FreeBSD)\n  become: yes\n  shell: \"kill -HUP `cat {{ tor_PidDir }}/{{ item.item.0.ipv4 }}_{{ item.item.1.orport }}/pid`\"\n  ignore_errors: yes\n  with_items: \"{{ instances.results }}\"\n  when: item.changed == True\n  tags:\n   - reconfigure\n\n- name: Ensure Tor instances are running (FreeBSD)\n  become: yes\n  shell: \"kill -0 `cat {{ tor_PidDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}/pid` || tor -f {{ tor_ConfDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}.torrc\"\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n  tags:\n   - reconfigure\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "9f2f1160c4dc3fea2f6e81e42ba8a6254ef093db", "sha": "aa963c745fc2f0a920237d31302c7663601838bc", "filename": "meta/main.yml", "decoded_content": "---\ngalaxy_info:\n  author: nusenu\n  description: An Ansible role for Tor Relay Operators\n  license: GPLv3\n  platforms:\n  - name: Debian\n    versions:\n    - stretch\n    - buster\n  - name: FreeBSD\n    versions:\n    - 11.2\n    - 12.0\n  - name: OpenBSD\n    versions:\n    - 6.4\n  - name: EL\n    versions:\n    - 7\n  - name: Ubuntu\n    versions:\n    - bionic\n  - name: Fedora\n    versions:\n    - 29\n  galaxy_tags:\n    - tor\n    - ipv6\n    - anonymity\n    - networking\n  min_ansible_version: 2.7.8\ndependencies: []\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "44be91805d4a4c003d28a7c5fd3f7a6317863435", "sha": "5d9587bde1a4340768aa3c07ba03a67857c0fc66", "filename": "tasks/apt_install.yml", "decoded_content": "---\n\n- name: Setup Debian specific variables (set_fact)\n  set_fact:\n    tor_user: debian-tor\n    tor_DataDir: /var/lib/tor-instances\n    tor_ConfDir: /etc/tor/instances\n    tor_RunAsDaemon: 0\n  tags:\n   - reconfigure\n   - renewkey\n   - createdir\n\n- name: Ensure torproject gpg key is installed (A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89)\n  become: yes\n  apt_key: data=\"{{ lookup('file', 'deb.torproject.org_A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89.pub') }}\"\n    id=A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89\n    state=present\n\n- name: Ensure torproject.org repository is present (APT)\n  become: yes\n  apt_repository: repo='deb http://deb.torproject.org/torproject.org {{ tor_distribution_release }} main'\n    state=present \n    update_cache=yes\n\n# we specifically opt for present over latest to improve performance\n# \"latest\" is covered by auto updates\n- name: Ensure Tor is installed (APT)\n  become: yes\n  apt: pkg=\"{{ item }}\" state=present\n  with_items: \n    - deb.torproject.org-keyring\n    - tor\n  # apt starts a tor client instance by default after installing the package\n  # we do not need that\n  notify:\n    - stop-and-disable default tor\n\n\n#- name: Ensure AppArmor allows access to necessary files (Ubuntu)\n#  become: yes\n#  lineinfile: dest=/etc/apparmor.d/local/system_tor line={{ item }}\n#  with_items:\n#    - '/etc/tor/enabled/*\\ r,'\n#    - '/{,var/}run/tor/*.pid\\ w,'\n#    - '/var/lib/tor/**\\ w,'\n#  when: ansible_distribution == 'Ubuntu'\n#  notify: restart apparmor\n\n- meta: flush_handlers\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "c5b489aa56c545dd0b51910b5a0d701d838ff071", "sha": "6521ef0c310ad497a047a432a94cc0b6a795eb9b", "filename": "tasks/freebsd_install.yml", "decoded_content": "---\n\n- name: Setup FreeBSD specific variables (set_fact)\n  set_fact:\n    tor_DataDir: /var/db/tor\n    tor_ConfDir: /usr/local/etc/tor/enabled\n  tags: configure\n\n- name: Ensure Tor is installed (FreeBSD)\n  sudo: yes\n  pkgng: name=tor state=present\n  when: tor_alpha == False\n\n# pkg will take care of removing tor stable\n# if installed\n- name: Ensure Tor alpha is installed (FreeBSD)\n  sudo: yes\n  pkgng: name=tor-devel state=present\n  when: tor_alpha == True\n\n# temporary solution until rc.d supports multiple instances\n- name: Ensure Tor starts at boot (FreeBSD)\n  sudo: yes\n  lineinfile: dest=/etc/rc.local line=\"/usr/local/bin/tor -f {{ tor_ConfDir }}/{{ item[0] }}_{{ item.1.orport }}.torrc\" create=yes\n  with_nested:\n   - tor_ips\n   - tor_ports\n\n- name: If LogDir is a file, rename it (FreeBSD)\n  sudo: yes\n  shell: \"test -f {{ tor_LogDir }} && mv {{ tor_LogDir }} {{ tor_LogDir }}.bk-`date '+%Y-%m-%d_%H%M%S'`\"\n  ignore_errors: yes\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "b5d6f33218259b7205796d55ad4b976d3b9f3305", "sha": "3f58f5380a772b43005b4700b11af8649c790b8a", "filename": "tasks/openbsd_install.yml", "decoded_content": "---\n\n- name: Setup OpenBSD specific variables (set_fact)\n  set_fact:\n    tor_DataDir: /var/tor-instances\n    tor_ConfDir: /etc/tor/enabled\n  tags:\n   - reconfigure\n   - renewkey\n   - createdir\n\n- name: Ensure Tor is installed (OpenBSD)\n  become: yes\n  openbsd_pkg: name=tor state=present\n\n- name: Gather current system-wide file descriptor limits (OpenBSD)\n  shell: \"sysctl kern.maxfiles|cut -d= -f2\"\n  register: currentlimits\n\n- name: Ensure system-wide runtime file descriptor limits are reasonable (OpenBSD)\n  become: yes\n  command: \"sysctl kern.maxfiles=20000\"\n  when: currentlimits.stdout|int < 20000\n\n- name: Ensure system-wide persistent file descriptor limits are reasonable (OpenBSD)\n  become: yes\n  lineinfile: dest=/etc/sysctl.conf regexp=^kern.maxfiles line=\"kern.maxfiles=20000\" create=yes\n  when: currentlimits.stdout|int < 20000\n\n# We rise openfiles limits for every tor instance separately.\n# An instance is identified by its rc.d file name.\n- name: Ensure Tor process file descriptor limits are reasonable (OpenBSD)\n  become: yes\n  lineinfile: \"dest=/etc/login.conf line='tor{{ item[0]| replace('.','_') }}_{{ item.1.orport }}::openfiles-max=13500::tc=daemon:'\"\n  with_nested:\n   - tor_ips\n   - tor_ports\n  #TODO\n  #notify: restart tor\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "0406395a8758f12abd57914532cc0ff17894d015", "sha": "a637dd0203eb5c428729d376cfbfc9bdacc917b0", "filename": "handlers/main.yml", "decoded_content": "---\n- name: stop-and-mask default tor instance\n  become: yes\n  shell: systemctl stop tor@default && systemctl mask tor@default\n\n- name: restart apparmor\n  become: yes\n  service: name=apparmor state=restarted\n\n- name: systemctl daemon-reload\n  become: yes\n  command: systemctl daemon-reload\n\n- name: re-gather facts\n  setup:\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "33341b8cd483ae2583a4bd7c1bd79c82e4a12e4b", "sha": "2dd84676cd679c2ba69222092c76584539179951", "filename": "tasks/openbsd_install.yml", "decoded_content": "---\n\n- name: Setup OpenBSD specific variables (set_fact)\n  set_fact:\n    tor_DataDir: /var/tor\n    tor_PidDir: /var/tor/pids\n  tags:\n   - configure\n   - createdir\n\n- name: Ensure Tor is installed (OpenBSD)\n  sudo: yes\n  openbsd_pkg: name=tor state=present\n\n- name: Gather current system-wide file descriptor limits (OpenBSD)\n  shell: \"sysctl kern.maxfiles|cut -d= -f2\"\n  register: currentlimits\n\n- name: Ensure system-wide runtime file descriptor limits are reasonable (OpenBSD)\n  sudo: yes\n  command: \"sysctl kern.maxfiles=20000\"\n  when: currentlimits.stdout|int < 20000\n\n- name: Ensure system-wide persistent file descriptor limits are reasonable (OpenBSD)\n  sudo: yes\n  lineinfile: dest=/etc/sysctl.conf regexp=^kern.maxfiles line=\"kern.maxfiles=20000\" create=yes\n  when: currentlimits.stdout|int < 20000\n\n# We rise openfiles limits for every tor instance separately.\n# An instance is identified by its rc.d file name.\n- name: Ensure Tor process file descriptor limits are reasonable (OpenBSD)\n  sudo: yes\n  lineinfile: \"dest=/etc/login.conf line='tor{{ item[0]| replace('.','_') }}_{{ item.1.orport }}::openfiles-max=13500::tc=daemon:'\"\n  with_nested:\n   - tor_ips\n   - tor_ports\n  #TODO\n  #notify: restart tor\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "dbe5647c4e42252e9e428e50b9b0a3636f94842a", "sha": "ded6fe8a37e9e97c45c20659820960cf5f5b977e", "filename": "tasks/openbsd_service.yml", "decoded_content": "---\n\n\n# OpenBSD section (uses service module)\n# This is basically a copy from the Linux\n# section, but it requires different service\n# names and additional arguments.\n# =====================================\n\n# OpenBSD does not support multi-instance rc.d\n# # so we link as many pseudo rc scripts as we need.\n# # OpenBSD does not like dots in rc filenames so\n# # we replace them with underscores.\n- name: Create links to the service files (OpenBSD)\n  become: yes\n  file:\n    src: /etc/rc.d/tor\n    state: link\n    path: \"/etc/rc.d/tor{{ item.0.ipv4| replace('.','_') }}_{{ item.1.orport }}\"\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n\n- name: Ensure Tor instances are enabled and started (OpenBSD)\n  become: yes\n  service:\n    name: \"tor{{ item.0.ipv4|replace('.','_') }}_{{ item.1.orport }}\"\n    arguments: \"-f {{ tor_ConfDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}.torrc\"\n    enabled: yes\n    state: started\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n\n- name: Ensure Tor instances are reloaded if its torrc changed (OpenBSD)\n  become: yes\n  service:\n    name: \"tor{{ item.item.0.ipv4|replace('.','_') }}_{{ item.item.1.orport }}\"\n    state: reloaded\n  with_items: \"{{ instances.results }}\"\n  when: item.changed == True\n  tags:\n   - reconfigure\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "dbe5647c4e42252e9e428e50b9b0a3636f94842a", "sha": "cab894aa41c6d342b6ab716ea92a3d28c354a047", "filename": "tasks/freebsd_prepare.yml", "decoded_content": "---\n\n- name: Ensure sequential IP IDs are avoided (FreeBSD)\n  become: yes\n  sysctl:\n    name: net.inet.ip.random_id\n    value: 1\n    reload: no\n    sysctl_set: yes\n\n- name: Gather current kern.ipc.somaxconn setting (FreeBSD)\n  shell: \"sysctl kern.ipc.somaxconn|cut -d' '  -f2\"\n  register: currentsomaxconn\n\n- name: Ensure somaxconn setting is reasonable (FreeBSD)\n  become: yes\n  sysctl:\n    name: kern.ipc.somaxconn\n    value: \"{{ freebsd_somaxconn }}\"\n    reload: no\n    sysctl_set: yes\n  when: currentsomaxconn.stdout|int < {{ freebsd_somaxconn }}\n\n- name: Gather current kern.ipc.nmbclusters setting (FreeBSD)\n  shell: \"sysctl kern.ipc.nmbclusters|cut -d' '  -f2\"\n  register: currentnmbc\n\n- name: Ensure nmbclusters setting is reasonable (FreeBSD)\n  become: yes\n  sysctl:\n    name: kern.ipc.nmbclusters\n    value: \"{{ freebsd_nmbclusters }}\"\n    reload: no\n    sysctl_set: yes\n  when: currentnmbc.stdout|int < {{ freebsd_nmbclusters }}\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "0406395a8758f12abd57914532cc0ff17894d015", "sha": "890ab776110bcad3149fe65b79784ae23b13000d", "filename": "tasks/openbsd_install.yml", "decoded_content": "---\n\n- name: Setup OpenBSD specific variables (set_fact)\n  set_fact:\n    tor_DataDir: /var/tor-instances\n    tor_ConfDir: /etc/tor/enabled\n  tags:\n   - reconfigure\n   - renewkey\n\n- name: Ensure Tor is installed (OpenBSD)\n  become: yes\n  openbsd_pkg: name=tor state=present\n  tags:\n   - install\n\n- name: Gather current system-wide file descriptor limits (OpenBSD)\n  shell: \"sysctl kern.maxfiles|cut -d= -f2\"\n  register: currentlimits\n\n- name: Ensure system-wide runtime file descriptor limits are reasonable (OpenBSD)\n  become: yes\n  command: \"sysctl kern.maxfiles=20000\"\n  when: currentlimits.stdout|int < 20000\n\n- name: Ensure system-wide persistent file descriptor limits are reasonable (OpenBSD)\n  become: yes\n  lineinfile: dest=/etc/sysctl.conf regexp=^kern.maxfiles line=\"kern.maxfiles=20000\" create=yes\n  when: currentlimits.stdout|int < 20000\n\n# We rise openfiles limits for every tor instance separately.\n# An instance is identified by its rc.d file name.\n- name: Ensure Tor process file descriptor limits are reasonable (OpenBSD)\n  become: yes\n  lineinfile: \"dest=/etc/login.conf line='tor{{ item.0.ipv4| replace('.','_') }}_{{ item.1.orport }}::openfiles-max=13500::tc=daemon:'\"\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "1224adf2811c827a09ff0bf133fbb476901a547d", "sha": "6f01b4d54437d1f2462624e118b2f2499b6ecc96", "filename": "tasks/main.yml", "decoded_content": "---\n\n- name: Check for vulnerable ansible version (CVE-2016-8614, CVE-2016-8628)\n  assert:\n    that:\n      - \"{{ ansible_version.full | version_compare('2.1.3.0', '>=') }}\"\n    msg: \"VULNERABLE ansible version DETECTED, please update to v2.1.3 or newer! Exiting.\"\n  run_once: true\n  delegate_to: 127.0.0.1\n  tags:\n    - always\n\n- name: Check for local requirements\n  shell: command -V tor && command -V openssl && command -V sort && command -V uniq && command -V wc && command -V cut && command -V xargs && command -V sed\n  run_once: true\n  delegate_to: 127.0.0.1\n  tags:\n    - always\n\n- name: Set OS specific variables\n  include_vars: \"os_{{ ansible_os_family }}.yml\"\n  tags:\n   - always\n\n- include: ip-list.yml\n  tags:\n    - always\n\n- include: apt_prepare.yml\n  when: ansible_pkg_mgr == 'apt'\n  tags:\n   - debian\n   - install\n\n- include: rpm_prepare.yml\n  when: ansible_os_family == 'RedHat'\n  tags:\n   - centos\n   - fedora\n   - install\n\n- include: openbsd_prepare.yml\n  when: ansible_system == 'OpenBSD'\n  tags:\n   - openbsd\n\n- include: freebsd_prepare.yml\n  when: ansible_system == 'FreeBSD'\n  tags:\n   - freebsd\n\n# we specifically opt for present over latest to improve performance\n- name: Ensure tor is installed\n  become: yes\n  package:\n    name: \"{{ item }}\"\n    state: present\n  with_items: \"{{ tor_packages }}\"\n  # apt starts a tor client instance by default after installing the package\n  # we do not need that\n  notify:\n    - stop-and-mask default tor instance\n    - disable default tor instance FreeBSD\n  tags:\n   - openbsd\n   - freebsd\n   - debian\n   - centos\n   - fedora\n   - install\n\n- meta: flush_handlers\n\n- include: configure.yml\n  tags:\n   - debian\n   - centos\n   - fedora\n   - openbsd\n   - freebsd\n\n- include: linux_service.yml\n  when: ansible_system == 'Linux'\n  tags:\n   - debian\n   - centos\n   - fedora\n\n- include: openbsd_service.yml\n  when: ansible_system == 'OpenBSD'\n  tags:\n   - openbsd\n\n- include: freebsd_service.yml\n  when: ansible_system == 'FreeBSD'\n  tags:\n   - freebsd\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "9f2f1160c4dc3fea2f6e81e42ba8a6254ef093db", "sha": "782818990637bfd8d8594a9502dbe80851dffbca", "filename": "tasks/openbsd_prepare.yml", "decoded_content": "---\n\n- name: Gather current system-wide file descriptor limits (OpenBSD)\n  shell: \"sysctl kern.maxfiles|cut -d= -f2\"\n  become: no\n  register: tor_openbsd_maxfiles\n  changed_when: False\n\n- name: Ensure system-wide runtime file descriptor limits are reasonable (OpenBSD)\n  become: yes\n  command: \"sysctl kern.maxfiles=20000\"\n  when: tor_openbsd_maxfiles.stdout|int < 20000\n\n- name: Ensure system-wide persistent file descriptor limits are reasonable (OpenBSD)\n  become: yes\n  lineinfile:\n    dest: /etc/sysctl.conf\n    regexp: ^kern.maxfiles\n    line: \"kern.maxfiles=20000\"\n    create: yes\n  when: tor_openbsd_maxfiles.stdout|int < 20000\n\n# We rise openfiles limits for every tor instance separately.\n# An instance is identified by its rc.d file name.\n- name: Ensure Tor process file descriptor limits are reasonable (OpenBSD)\n  become: yes\n  lineinfile:\n    dest: /etc/login.conf\n    line: \"tor{{ item.0.ipv4| replace('.','_') }}_{{ item.1.orport }}::openfiles-max=13500::tc=daemon:\"\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "c25e1f96cb3a91dfef803f4de935c51c597bd19d", "sha": "653500718877a2fa7023080e141f21c83078bb45", "filename": "tasks/configure.yml", "decoded_content": "---\n\n- name: Ensure local DataDir folders exist (LOCAL)\n  file:\n    path: \"{{ tor_offline_masterkey_dir }}/{{ inventory_hostname }}-{{ item.0.ipv4 }}_{{ item.1.orport }}\"\n    state: directory\n    mode: 0700\n  delegate_to: 127.0.0.1\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n  tags:\n   - createdir\n\n- name: Ensure all relay keys exist (LOCAL)\n  local_action: command tor --PublishServerDescriptor 0 --orport auto --list-fingerprint --datadirectory \"{{ tor_offline_masterkey_dir }}/{{ inventory_hostname }}-{{ item.0.ipv4 }}_{{ item.1.orport }}\" --Log \"err stdout\"\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n\n- name: Generate new Ed25519 signing keys (LOCAL)\n  local_action: command tor --keygen --SigningKeyLifetime {{ tor_signingkeylifetime_days}}\\ days --datadirectory \"{{ tor_offline_masterkey_dir }}/{{ inventory_hostname }}-{{ item.0.ipv4 }}_{{ item.1.orport }}\" --Log \"err stdout\"\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n  tags:\n   - renewkey\n\n- name: Detect duplicate relay keys across relays (LOCAL)\n  shell: sha1sum {{ tor_offline_masterkey_dir }}/*/keys/secret_id_key {{ tor_offline_masterkey_dir }}/*/keys/ed25519_master_id_secret_key|cut -d/ -f1|sort|uniq -d|wc -l\n  delegate_to: 127.0.0.1\n  register: dupcount\n\n- name: Abort on duplicate relay keys\n  fail: msg=\"Duplicate relay key detected! Aborting.\"\n  when: dupcount.stdout != \"0\"\n\n- name: Detect if Ed25519 master keys are on the relay\n  stat:\n    path: \"{{ tor_DataDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}/keys/ed25519_master_id_secret_key\"\n  become: yes\n  register: masterkeycheck\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n\n- name: Abort if Ed25519 master keys are on the relay\n  fail: msg=\"\n\n            Ed25519 MASTER KEY detected on the relay - it is NOT supposed to be there! Aborting.\"\n  when: item.stat.exists == True\n  with_items: \"{{ masterkeycheck.results }}\"\n\n- name: Collect fingerprints for MyFamily (LOCAL)\n  shell: cut {{ tor_offline_masterkey_dir }}/*/fingerprint -d\" \" -f2|xargs|sed -e 's/ /,/g'\n  delegate_to: 127.0.0.1\n  register: family\n  tags:\n   - reconfigure\n\n- name: Ensure per-instance tor users exist\n  become: yes\n  user:\n    name: _tor-{{ item.0.ipv4 }}_{{ item.1.orport }}\n    system: yes\n    shell: /bin/false\n    createhome: no\n    home: \"{{ tor_DataDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}\"\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n\n- name: Ensure per-instance config folders exist (Debian only)\n  become: yes\n  file:\n    path: \"{{ tor_ConfDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}\"\n    state: directory\n    mode: 0755\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n  when: ansible_pkg_mgr == 'apt'\n\n- name: Ensure DataDir exists\n  become: yes\n  file:\n    path: \"{{ tor_DataDir }}\"\n    state: directory\n    owner: root\n    mode: 0755\n\n- name: Ensure \"keys\" subfolder exists\n  become: yes\n  file:\n    path: \"{{ tor_DataDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}/keys\"\n    state: directory\n    owner: \"_tor-{{ item.0.ipv4 }}_{{ item.1.orport }}\"\n    group: \"_tor-{{ item.0.ipv4 }}_{{ item.1.orport }}\"\n    mode: 0700\n    recurse: yes\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n\n- name: Ensure RSA key is in place (without overriding existing keys)\n  become: yes\n  copy:\n    src: \"{{ tor_offline_masterkey_dir }}/{{ inventory_hostname }}-{{ item.0.ipv4 }}_{{ item.1.orport }}/keys/{{ item[2] }}\"\n    dest: \"{{ tor_DataDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}/keys/{{ item[2] }}\"\n    owner: \"_tor-{{ item.0.ipv4 }}_{{ item.1.orport }}\"\n    mode: 0700\n    force: no\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n   - [ 'secret_id_key' ]\n\n- name: Fetch RSA key for comparision\n  become: yes\n  fetch:\n    src: \"{{ tor_DataDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}/keys/{{ item[2] }}\"\n    dest: \"{{ tor_offline_masterkey_dir }}/{{ inventory_hostname }}-{{ item.0.ipv4 }}_{{ item.1.orport }}/keys/{{ item[2] }}.untrustedremotekey\"\n    flat: yes\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n   - [ 'secret_id_key' ]\n\n- name: Compare local vs. remote RSA key (secret_id_key)\n  local_action: shell sha1sum {{ tor_offline_masterkey_dir }}/{{ inventory_hostname }}-\"{{ item.0.ipv4 }}_{{ item.1.orport }}\"/keys/secret_id_key*|cut -d/ -f1|uniq -d|wc -l\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n  register: rsakey\n\n- name: Abort if local and remote RSA keys do not match\n  fail: 'msg=\"\n\n\n   Key MISMATCH detected: Remote RSA key does not match local key - manual intervention required.\n\n   We detected that the remote host uses an RSA key that was not generated by us.\n   We will not override it with our locally generated key.\n\n   If you want to make use of the remote RSA key you have to override the local key manually:\n\n\n   cd ~/.tor/offlinemasterkeys/<inventoryname>-<IP_port>/keys\n\n   mv secret_id_key.untrustedremotekey secret_id_key\"'\n  when: item.stdout != \"1\"\n  with_items: \"{{ rsakey.results }}\"\n\n# this task is separated from the task named \"Ensure RSA key is in place\" because it is not run with 'force=no'\n- name: Transmit new Ed25519 signing keys\n  become: yes\n  copy:\n    src: \"{{ tor_offline_masterkey_dir }}/{{ inventory_hostname }}-{{ item.0.ipv4 }}_{{ item.1.orport }}/keys/{{ item[2] }}\"\n    dest: \"{{ tor_DataDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}/keys/{{ item[2] }}\"\n    owner: \"_tor-{{ item.0.ipv4 }}_{{ item.1.orport }}\"\n    mode: 0700\n    setype: tor_var_lib_t\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n   - [ 'ed25519_signing_cert', 'ed25519_signing_secret_key' ]\n  tags:\n   - renewkey\n\n# This needs to be at the end to fix SELinux contexts recursively\n- name: Ensure per-instance DataDir have proper permissions\n  become: yes\n  file:\n    path: \"{{ tor_DataDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}\"\n    state: directory\n    owner: \"_tor-{{ item.0.ipv4 }}_{{ item.1.orport }}\"\n    group: \"_tor-{{ item.0.ipv4 }}_{{ item.1.orport }}\"\n    mode: 0700\n    recurse: yes\n    setype: tor_var_lib_t\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n\n- name: Ensure Tor config directory exists\n  become: yes\n  file:\n    path: \"{{ tor_ConfDir }}\"\n    state: directory\n    owner: root\n    group: \"{{ tor_user }}\"\n    mode: 0755\n\n- name: Ensure tor-exit-notice.html is present (if we are an exit)\n  become: yes\n  template:\n    src: tor-exit-notice.html\n    dest: \"{{ tor_ConfDir }}/tor-exit-notice.html\"\n    mode: 0444\n  when: tor_ExitRelay == True and tor_ExitNoticePage == True\n\n- name: Generating torrc file(s)\n  become: yes\n  template:\n    src: torrc\n    dest: \"{{ (ansible_pkg_mgr != 'apt')| ternary(tor_ConfDir ~ '/' ~ item.0.ipv4 ~ '_' ~ item.1.orport ~ '.torrc', tor_ConfDir ~ '/' ~ item.0.ipv4 ~ '_' ~ item.1.orport ~ '/torrc') }}\"\n    owner: root\n    mode: 0644\n    backup: yes\n    validate: \"tor --verify-config -f %s\"\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n  register: instances\n  notify:\n    - Ensure Tor instances are reloaded if its torrc changed (FreeBSD)\n    - Ensure Tor instances are reloaded if its torrc changed (Linux)\n  tags:\n   - reconfigure\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "2149edf99fe1c251d0eaad5c78536c9b1d54dde3", "sha": "2344b0e4bf5e822c5109636f15ea012c3e0959e6", "filename": "tasks/configure.yml", "decoded_content": "---\n\n- name: Ensure Tor DataDir(s) exist and is owned by tor_user\n  become: yes\n  file: path={{ tor_DataDir }}/{{ item[0] }}_{{ item.1.orport }}\n    state=directory\n    owner={{ tor_user }}\n    mode=0700\n    recurse=yes\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n  tags:\n   - debian\n   - centos\n   - fedora\n   - freebsd\n   - openbsd\n   - createdir\n\n- name: Ensure Tor config directory exists and has appropriate permissions\n  become: yes\n  file: path={{ tor_ConfDir }}\n    state=directory\n    owner=root\n    group={{ tor_user }}\n    mode=755\n  tags:\n   - debian\n   - centos\n   - fedora\n   - freebsd\n   - openbsd\n\n- name: Ensure LogDir exists and has appropriate permissions\n  become: yes\n  file: path={{ tor_LogDir }}\n    state=directory\n    owner={{ tor_user }}\n    mode=750\n  tags:\n   - debian\n   - centos\n   - fedora\n   - freebsd\n   - openbsd\n\n- name: Ensure PidDir is owned by tor_user\n  become: yes\n  file: path={{ tor_PidDir }}\n    state=directory\n    owner={{ tor_user }}\n    group={{ tor_user }}\n    mode=2750\n  tags:\n   - debian\n   - centos\n   - fedora\n   - freebsd\n   - openbsd\n\n- name: Generating temporary (without MyFamily) torrc file(s)...\n  become: yes\n  template: src=torrc\n    dest=\"{{ tor_ConfDir }}/{{ item[0] }}_{{ item.1.orport }}.torrc-tmp\"\n    owner=root\n    mode=0644\n  with_nested:\n   - tor_ips\n   - tor_ports\n  tags:\n   - debian\n   - centos\n   - fedora\n   - freebsd\n   - openbsd\n\n- name: Collect relay fingerprints (for MyFamily)\n  become: yes\n  shell: \"tor --hush -f {{ tor_ConfDir }}/{{ item[0] }}_{{ item.1.orport }}.torrc-tmp --list-fingerprint |cut -d' ' -f2-|sed -e 's, ,,g'\"\n  with_nested:\n   - tor_ips\n   - tor_ports\n  register: tor_fingerprints\n  tags:\n   - debian\n   - centos\n   - fedora\n   - freebsd\n   - openbsd\n   - reconfigure\n\n- name: Generating final torrc file(s) (with MyFamily)\n  become: yes\n  template: >\n    src=torrc\n    dest=\"{{ tor_ConfDir }}/{{ item[0] }}_{{ item.1.orport }}.torrc\"\n    owner=root\n    mode=0644\n    backup=yes\n    validate=\"tor --verify-config -f %s\"\n  with_nested:\n   - tor_ips\n   - tor_ports\n  register: instances\n  tags:\n   - debian\n   - centos\n   - fedora\n   - freebsd\n   - openbsd\n   - reconfigure\n\n# Linux/systemd section (uses service module)\n# ===========================================\n \n- name: Ensure Tor instances are reloaded if its torrc changed (Linux/systemd)\n  become: yes\n  service: name=tor@{{ item.item[0] }}_{{ item.item.1.orport }}.service state=reloaded\n  with_items: instances.results\n  when: ansible_system == 'Linux' and item.changed == True \n  tags:\n   - debian\n   - centos\n   - fedora\n   - reconfigure\n\n- name: Ensure Tor instances are enabled and started (Linux/systemd)\n  become: yes\n  service: name=tor@{{ item[0] }}_{{ item.1.orport }}.service enabled=yes state=started\n  with_nested:\n   - tor_ips\n   - tor_ports\n  when: ansible_system == 'Linux'\n  tags:\n   - debian\n   - centos\n   - fedora\n\n# OpenBSD section (uses service module)\n# This is basically a copy from the Linux\n# section, but it requires different service\n# names and additional arguments.\n# =====================================\n\n# OpenBSD does not support multi-instance rc.d\n# # so we link as many pseudo rc scripts as we need.\n# # OpenBSD does not like dots in rc filenames so\n# # we replace them with underscores.\n- name: Create links to the service files (OpenBSD)\n  become: yes\n  file: src=/etc/rc.d/tor state=link path=/etc/rc.d/tor{{ item[0]| replace('.','_') }}_{{ item.1.orport }}\n  with_nested:\n   - tor_ips\n   - tor_ports\n  when: ansible_system == 'OpenBSD'\n  tags:\n   - openbsd\n\n- name: Ensure Tor instances are enabled and started (OpenBSD)\n  become: yes\n  service: name=tor{{ item[0]|replace('.','_') }}_{{ item.1.orport }}\n   arguments=\"-f {{ tor_ConfDir }}/{{ item[0] }}_{{ item.1.orport }}.torrc\" enabled=yes state=started\n  with_nested:\n   - tor_ips\n   - tor_ports\n  when: ansible_system == 'OpenBSD'\n  tags:\n   - openbsd\n\n- name: Ensure Tor instances are reloaded if its torrc changed (OpenBSD)\n  become: yes\n  service: name=tor{{ item.item[0]|replace('.','_') }}_{{ item.item.1.orport }} state=reloaded\n  with_items: instances.results\n  when: ansible_system == 'OpenBSD' and item.changed == True\n  tags:\n   - openbsd\n   - reconfigure\n\n\n# FreeBSD section\n# ================\n\n- name: Ensure Tor instances are reloaded if its torrc changed (FreeBSD)\n  become: yes\n  shell: \"kill -HUP `cat {{ tor_PidDir }}/{{ item.item[0] }}_{{ item.item.1.orport }}.pid`\"\n  ignore_errors: yes\n  with_items: instances.results\n  when: item.changed == True and ansible_system == 'FreeBSD'\n  tags:\n   - freebsd\n   - reconfigure\n\n- name: Ensure Tor instances are running (FreeBSD)\n  become: yes\n  shell: \"kill -0 `cat {{ tor_PidDir }}/{{ item[0] }}_{{ item.1.orport }}.pid` || tor -f {{ tor_ConfDir }}/{{ item[0] }}_{{ item.1.orport }}.torrc\"\n  with_nested:\n   - tor_ips\n   - tor_ports\n  when: ansible_system == 'FreeBSD'\n  tags:\n   - freebsd\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "44be91805d4a4c003d28a7c5fd3f7a6317863435", "sha": "14c8049b3d7fc1bfa59b8264c47fd11709d353fe", "filename": "tasks/configure.yml", "decoded_content": "---\n\n- name: Ensure local DataDir folders exist (LOCAL)\n  file: path={{ offline_masterkey_dir }}/{{ inventory_hostname }}-{{ item[0] }}_{{ item.1.orport }}\n    state=directory mode=700\n  delegate_to: 127.0.0.1\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n  tags:\n   - createdir\n\n- name: Ensure all relay keys exist (LOCAL)\n  local_action: command tor --PublishServerDescriptor 0 --orport 1234 --list-fingerprint --datadirectory \"{{ offline_masterkey_dir }}/{{ inventory_hostname }}-{{ item[0] }}_{{ item.1.orport }}\" --Log \"err stdout\"\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n\n- name: Generate new Ed25519 signing keys (LOCAL)\n  local_action: command tor --keygen --SigningKeyLifetime {{ tor_signingkeylifetime_days}}\\ days --datadirectory \"{{ offline_masterkey_dir }}/{{ inventory_hostname }}-{{ item[0] }}_{{ item.1.orport }}\" --Log \"err stdout\"\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n  tags:\n   - renewkey\n\n- name: Detect duplicate relay keys across relays (LOCAL)\n  shell: sha1sum {{ offline_masterkey_dir }}/*/keys/secret_id_key {{ offline_masterkey_dir }}/*/keys/ed25519_master_id_secret_key|cut -d/ -f1|sort|uniq -d|wc -l\n  delegate_to: 127.0.0.1\n  register: dupcount\n\n- name: Abort on duplicate relay keys\n  fail: msg=\"Duplicate relay key detected! Aborting.\"\n  when: dupcount.stdout != \"0\"\n\n- name: Detect if Ed25519 master keys are on the relay\n  stat: path={{ tor_DataDir }}/{{ item[0] }}_{{ item.1.orport }}/keys/ed25519_master_id_secret_key\n  become: yes\n  register: masterkeycheck\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n\n- name: Abort if Ed25519 master keys are on the relay\n  fail: msg=\"\n\n            Ed25519 MASTER KEY detected on the relay - it is NOT supposed to be there! Aborting.\"\n  when: item.stat.exists == True\n  with_items: masterkeycheck.results\n\n- name: Collect fingerprints for MyFamily (LOCAL)\n  shell: cut {{ offline_masterkey_dir }}/*/fingerprint -d\" \" -f2|xargs|sed -e 's/ /,/g'\n  delegate_to: 127.0.0.1\n  register: family\n  tags:\n   - reconfigure\n\n- name: Ensure per-instance tor users exist\n  become: yes\n  user: name=_tor-{{ item[0] }}_{{ item.1.orport }} system=yes shell=/bin/false createhome=no home={{ tor_DataDir }}/{{ item[0] }}_{{ item.1.orport }}\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n\n- name: Ensure per-instance config folders exist (Debian only)\n  become: yes\n  file: path={{ tor_ConfDir }}/{{ item[0] }}_{{ item.1.orport }} state=directory mode=755\n  with_nested:\n   - tor_ips\n   - tor_ports\n  when: ansible_pkg_mgr == 'apt'\n\n- name: Ensure DataDir exists\n  become: yes\n  file: path={{ tor_DataDir }}\n    state=directory\n    owner=root\n    mode=0755\n\n- name: Ensure \"keys\" subfolder exists\n  become: yes\n  file: path={{ tor_DataDir }}/{{ item[0] }}_{{ item.1.orport }}/keys\n    state=directory\n    owner=\"_tor-{{ item[0] }}_{{ item.1.orport }}\"\n    group=\"_tor-{{ item[0] }}_{{ item.1.orport }}\"\n    mode=0700\n    recurse=yes\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n\n- name: Ensure RSA key is in place (without overriding existing keys)\n  become: yes\n  copy: src={{ offline_masterkey_dir }}/{{ inventory_hostname }}-{{ item[0] }}_{{ item.1.orport }}/keys/{{ item[2] }}\n   dest={{ tor_DataDir }}/{{ item[0] }}_{{ item.1.orport }}/keys/{{ item[2] }}\n   owner=\"_tor-{{ item[0] }}_{{ item.1.orport }}\"\n   mode=700 force=no\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n   - [ 'secret_id_key' ]\n\n- name: Fetch RSA key for comparision\n  become: yes\n  fetch: src={{ tor_DataDir }}/{{ item[0] }}_{{ item.1.orport }}/keys/{{ item[2] }}\n    dest={{ offline_masterkey_dir }}/{{ inventory_hostname }}-{{ item[0] }}_{{ item.1.orport }}/keys/{{ item[2] }}.untrustedremotekey\n    flat=yes\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n   - [ 'secret_id_key' ]\n\n- name: Compare local vs. remote RSA key (secret_id_key)\n  local_action: shell sha1sum {{ offline_masterkey_dir }}/{{ inventory_hostname }}-\"{{ item[0] }}_{{ item.1.orport }}\"/keys/secret_id_key*|cut -d/ -f1|uniq -d|wc -l\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n  register: rsakey\n\n- name: Abort if local and remote RSA keys do not match\n  fail: 'msg=\"\n\n\n   Key MISMATCH detected: Remote RSA key does not match local key - manual intervention required.\n\n   We detected that the remote host uses an RSA key that was not generated by us.\n   We will not override it with our locally generated key.\n\n   If you want to make use of the remote RSA key you have to override the local key manually:\n\n\n   cd ~/.tor/offlinemasterkeys/<inventoryname>-<IP_port>/keys\n\n   mv secret_id_key.untrustedremotekey secret_id_key\"'\n  when: item.stdout != \"1\"\n  with_items: rsakey.results\n\n# this task is separated from the task named \"Ensure RSA key is in place\" because it is not run with 'force=no'\n- name: Transmit new Ed25519 signing keys\n  become: yes\n  copy: src={{ offline_masterkey_dir }}/{{ inventory_hostname }}-{{ item[0] }}_{{ item.1.orport }}/keys/{{ item[2] }}\n   dest={{ tor_DataDir }}/{{ item[0] }}_{{ item.1.orport }}/keys/{{ item[2] }}\n   owner=\"_tor-{{ item[0] }}_{{ item.1.orport }}\"\n   mode=700\n   setype=tor_var_lib_t\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n   - [ 'ed25519_signing_cert', 'ed25519_signing_secret_key' ]\n  tags:\n   - renewkey\n\n# This needs to be at the end to fix SELinux contexts recursively\n- name: Ensure per-instance DataDir have proper permissions\n  become: yes\n  file: path={{ tor_DataDir }}/{{ item[0] }}_{{ item.1.orport }}\n    state=directory\n    owner=\"_tor-{{ item[0] }}_{{ item.1.orport }}\"\n    group=\"_tor-{{ item[0] }}_{{ item.1.orport }}\"\n    mode=0700\n    recurse=yes\n    setype=tor_var_lib_t\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n\n- name: Ensure Tor config directory exists\n  become: yes\n  file: path={{ tor_ConfDir }}\n    state=directory\n    owner=root\n    group={{ tor_user }}\n    mode=755\n\n- name: Generating torrc file(s)\n  become: yes\n  template: >\n    src=torrc\n    dest=\"{{ (ansible_pkg_mgr != 'apt')| ternary(tor_ConfDir ~ '/' ~ item[0] ~ '_' ~ item.1.orport ~ '.torrc', tor_ConfDir ~ '/' ~ item[0] ~ '_' ~ item.1.orport ~ '/torrc') }}\"\n    owner=root\n    mode=0644\n    backup=yes\n    validate=\"tor --verify-config -f %s\"\n  with_nested:\n   - tor_ips\n   - tor_ports\n  register: instances\n  tags:\n   - reconfigure\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "dbe5647c4e42252e9e428e50b9b0a3636f94842a", "sha": "28b4bf010226a17e035b8c5a9775c8a8dfc6b8b3", "filename": "tasks/openbsd_prepare.yml", "decoded_content": "---\n\n- name: Gather current system-wide file descriptor limits (OpenBSD)\n  shell: \"sysctl kern.maxfiles|cut -d= -f2\"\n  register: currentlimits\n\n- name: Ensure system-wide runtime file descriptor limits are reasonable (OpenBSD)\n  become: yes\n  command: \"sysctl kern.maxfiles=20000\"\n  when: currentlimits.stdout|int < 20000\n\n- name: Ensure system-wide persistent file descriptor limits are reasonable (OpenBSD)\n  become: yes\n  lineinfile:\n    dest: /etc/sysctl.conf\n    regexp: ^kern.maxfiles\n    line: \"kern.maxfiles=20000\"\n    create: yes\n  when: currentlimits.stdout|int < 20000\n\n# We rise openfiles limits for every tor instance separately.\n# An instance is identified by its rc.d file name.\n- name: Ensure Tor process file descriptor limits are reasonable (OpenBSD)\n  become: yes\n  lineinfile:\n    dest: /etc/login.conf\n    line: \"tor{{ item.0.ipv4| replace('.','_') }}_{{ item.1.orport }}::openfiles-max=13500::tc=daemon:\"\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "850b64e62ec69d7b4d32f0ad9258e608b0e50ca2", "sha": "deb1482087285f99edc014a0f72593f656457bcd", "filename": "tasks/openbsd_install.yml", "decoded_content": "---\n\n- name: Setup OpenBSD specific variables (set_fact)\n  set_fact:\n    tor_DataDir: /var/tor\n    tor_PidDir: /var/tor/pids\n  tags:\n   - configure\n   - createdir\n\n- name: Gather current tor install state (OpenBSD)\n  command: \"pkg_info -qe tor-*\"\n  ignore_errors: yes\n  register: torpkg\n\n# the following task fails HARD on purpose (if ports are not there)\n# TODO: add an opt-in var that takes care of installing ports\n- name: Install tor from ports (OpenBSD)\n  sudo: yes\n  shell: \"cd /usr/ports/net/tor && make install\"\n  when: torpkg.rc == 1\n\n- name: Gather current system-wide file descriptor limits (OpenBSD)\n  shell: \"sysctl kern.maxfiles|cut -d= -f2\"\n  register: currentlimits\n\n- name: Ensure system-wide runtime file descriptor limits are reasonable (OpenBSD)\n  sudo: yes\n  command: \"sysctl kern.maxfiles=20000\"\n  when: currentlimits.stdout|int < 20000\n\n- name: Ensure system-wide persistent file descriptor limits are reasonable (OpenBSD)\n  sudo: yes\n  lineinfile: dest=/etc/sysctl.conf regexp=^kern.maxfiles line=\"kern.maxfiles=20000\" create=yes\n  when: currentlimits.stdout|int < 20000\n\n# We rise openfiles limits for every tor instance separately.\n# An instance is identified by its rc.d file name.\n- name: Ensure Tor process file descriptor limits are reasonable (OpenBSD)\n  sudo: yes\n  lineinfile: \"dest=/etc/login.conf line='tor{{ item[0]| replace('.','_') }}_{{ item.1.orport }}::openfiles-max=13500::tc=daemon:'\"\n  with_nested:\n   - tor_ips\n   - tor_ports\n  #TODO\n  #notify: restart tor\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "44be91805d4a4c003d28a7c5fd3f7a6317863435", "sha": "e770518f778acf487f0d9c8cd53380bbcabd9bc7", "filename": "tasks/openbsd_service.yml", "decoded_content": "---\n\n\n# OpenBSD section (uses service module)\n# This is basically a copy from the Linux\n# section, but it requires different service\n# names and additional arguments.\n# =====================================\n\n# OpenBSD does not support multi-instance rc.d\n# # so we link as many pseudo rc scripts as we need.\n# # OpenBSD does not like dots in rc filenames so\n# # we replace them with underscores.\n- name: Create links to the service files (OpenBSD)\n  become: yes\n  file: src=/etc/rc.d/tor state=link path=/etc/rc.d/tor{{ item[0]| replace('.','_') }}_{{ item.1.orport }}\n  with_nested:\n   - tor_ips\n   - tor_ports\n\n- name: Ensure Tor instances are enabled and started (OpenBSD)\n  become: yes\n  service: name=tor{{ item[0]|replace('.','_') }}_{{ item.1.orport }}\n   arguments=\"-f {{ tor_ConfDir }}/{{ item[0] }}_{{ item.1.orport }}.torrc\" enabled=yes state=started\n  with_nested:\n   - tor_ips\n   - tor_ports\n\n- name: Ensure Tor instances are reloaded if its torrc changed (OpenBSD)\n  become: yes\n  service: name=tor{{ item.item[0]|replace('.','_') }}_{{ item.item.1.orport }} state=reloaded\n  with_items: instances.results\n  when: item.changed == True\n  tags:\n   - reconfigure\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "0406395a8758f12abd57914532cc0ff17894d015", "sha": "5bb94e6804b7fa7f48b2ec66807932beed06764f", "filename": "tasks/main.yml", "decoded_content": "---\n\n- include: ip-list.yml\n  tags:\n    - always\n\n- include: apt_install.yml\n  when: ansible_pkg_mgr == 'apt'\n  tags:\n   - debian\n   - install\n\n- include: rpm_install.yml\n  when: ansible_os_family == 'RedHat'\n  tags:\n   - centos\n   - fedora\n   - install\n\n- include: openbsd_install.yml\n  when: ansible_pkg_mgr == 'openbsd_pkg'\n  tags:\n   - openbsd\n\n- include: freebsd_install.yml\n  when: ansible_pkg_mgr == 'pkgng'\n  tags:\n   - freebsd\n\n- include: configure.yml\n  tags:\n   - debian\n   - centos\n   - fedora\n   - openbsd\n   - freebsd\n\n- include: linux_service.yml\n  when: ansible_system == 'Linux'\n  tags:\n   - debian\n   - centos\n   - fedora\n\n- include: openbsd_service.yml\n  when: ansible_system == 'OpenBSD'\n  tags:\n   - openbsd\n\n- include: freebsd_service.yml\n  when: ansible_system == 'FreeBSD'\n  tags:\n   - freebsd\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "0406395a8758f12abd57914532cc0ff17894d015", "sha": "d24148aabc6dbeb8373c32adb5745958c1b86b44", "filename": "tasks/ip-list.yml", "decoded_content": "---\n\n- name: setup IP list (1/2)\n  set_fact:\n    ips:\n        ipv4: \"{{ item.0 }}\"\n        ipv6: \"{{ item.1 }}\"\n  with_together:\n        - \"{{ tor_v4ips }}\"\n        - \"{{ tor_v6ips }}\"\n  register: ipsinterm\n\n- name: setup IP list (2/2)\n  set_fact: tor_ips=\"{{ ipsinterm.results | map(attribute='ansible_facts.ips')|list}}\"\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "9f2f1160c4dc3fea2f6e81e42ba8a6254ef093db", "sha": "bfa0853fbb1beae45bc1a0607f795731d442a496", "filename": "tasks/main.yml", "decoded_content": "---\n\n- name: Check for min. ansible version requirement\n  assert:\n    that:\n      - \"{{ ansible_version.full is version_compare('2.7.8', '>=') }}\"\n    msg: \"Your ansible version is too old, please upgrade to v2.7.8 or newer. Exiting.\"\n  run_once: true\n  delegate_to: 127.0.0.1\n  tags:\n    - always\n    - ansible-version-check\n\n- name: Check for local requirements\n  shell: >\n        command -V /bin/bash && command -V tor && command -V openssl && command -V sort\n        && command -V uniq && command -V wc && command -V cut && command -V xargs && command -V sed\n  run_once: true\n  become: no\n  delegate_to: 127.0.0.1\n  tags:\n    - always\n  changed_when: False\n\n- name: Ensure we do not create more than two instances per IP\n  assert:\n    that:\n      - \"tor_ports | length > 0\"\n      - \"tor_ports | length < 3\"\n    msg: \"You can not run more than 2 instances per IP address, please update your tor_ports configuration.\"\n  tags:\n    - always\n\n- name: Ensure preconditions for tor_dedicatedExitIP are met (enough public IP addresses on the system)\n  assert:\n    that:\n      - \"tor_available_public_ipv4s | length >= tor_maxPublicIPs*2 or tor_available_public_ipv6s | length >= tor_maxPublicIPs*2\"\n      - tor_ExitRelay\n      - tor_IPv6Exit\n      - tor_IPv6\n    msg: \"You have to few public IPv4 and IPv6 addresses for the tor_dedicatedExitIP feature (or you did not enable exiting)\"\n  when: tor_dedicatedExitIP\n  tags:\n    - always\n\n- name: Abort if we use a centralized/common DNS resolver (Google, Quad9, CloudFlare, OpenDNS, Level3). See https://torproject.org/relay-guide#DNSonExitRelays (Exits only)\n  command: \"{{ tor_grep_blacklisted_dnsresolvers }}\"\n  register: tor_dns_check\n  failed_when: tor_dns_check.rc == 0\n  changed_when: False\n  when: tor_ExitRelay\n\n- name: Set OS specific variables\n  include_vars: \"os_{{ ansible_os_family }}.yml\"\n  tags:\n   - always\n\n- import_tasks: ip-list.yml\n  tags:\n    - always\n\n- name: Preparation for Debian-based systems\n  include_tasks: apt_prepare.yml\n  when: ansible_pkg_mgr == 'apt'\n  tags:\n   - debian\n   - install\n\n- name: Preparation for RPM based systems\n  include_tasks: rpm_prepare.yml\n  when: ansible_os_family == 'RedHat'\n  tags:\n   - centos\n   - fedora\n   - install\n\n- name: Preparation for OpenBSD systems\n  include_tasks: openbsd_prepare.yml\n  when: ansible_system == 'OpenBSD'\n  tags:\n   - openbsd\n\n- name: Preparation for FreeBSD based systems\n  include_tasks: freebsd_prepare.yml\n  when: ansible_system == 'FreeBSD'\n  tags:\n   - freebsd\n\n# we specifically opt for present over latest to improve performance\n- name: Ensure tor is installed\n  become: yes\n  package:\n    name: \"{{ item }}\"\n    state: \"{{ tor_package_state }}\"\n  with_items: \"{{ tor_packages }}\"\n  # apt starts a tor client instance by default after installing the package\n  # we do not need that\n  notify:\n    - stop-and-mask default tor instance\n    - disable default tor instance FreeBSD\n  tags:\n   - openbsd\n   - freebsd\n   - debian\n   - centos\n   - fedora\n   - install\n\n- meta: flush_handlers\n\n- import_tasks: configure.yml\n  tags:\n   - debian\n   - centos\n   - fedora\n   - openbsd\n   - freebsd\n\n- name: Linux service configuration\n  include_tasks: linux_service.yml\n  when: ansible_system == 'Linux'\n  tags:\n   - debian\n   - centos\n   - fedora\n\n- name: OpenBSD service configuration\n  include_tasks: openbsd_service.yml\n  when: ansible_system == 'OpenBSD'\n  tags:\n   - openbsd\n\n- name: FreeBSD service configuration\n  include_tasks: freebsd_service.yml\n  when: ansible_system == 'FreeBSD'\n  tags:\n   - freebsd\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "2149edf99fe1c251d0eaad5c78536c9b1d54dde3", "sha": "0a83abaf83b1f92ffc8b54b1ff64227900b38d45", "filename": "tasks/openbsd_install.yml", "decoded_content": "---\n\n- name: Setup OpenBSD specific variables (set_fact)\n  set_fact:\n    tor_DataDir: /var/tor\n    tor_PidDir: /var/tor/pids\n  tags:\n   - reconfigure\n   - createdir\n\n- name: Ensure Tor is installed (OpenBSD)\n  become: yes\n  openbsd_pkg: name=tor state=present\n\n- name: Gather current system-wide file descriptor limits (OpenBSD)\n  shell: \"sysctl kern.maxfiles|cut -d= -f2\"\n  register: currentlimits\n\n- name: Ensure system-wide runtime file descriptor limits are reasonable (OpenBSD)\n  become: yes\n  command: \"sysctl kern.maxfiles=20000\"\n  when: currentlimits.stdout|int < 20000\n\n- name: Ensure system-wide persistent file descriptor limits are reasonable (OpenBSD)\n  become: yes\n  lineinfile: dest=/etc/sysctl.conf regexp=^kern.maxfiles line=\"kern.maxfiles=20000\" create=yes\n  when: currentlimits.stdout|int < 20000\n\n# We rise openfiles limits for every tor instance separately.\n# An instance is identified by its rc.d file name.\n- name: Ensure Tor process file descriptor limits are reasonable (OpenBSD)\n  become: yes\n  lineinfile: \"dest=/etc/login.conf line='tor{{ item[0]| replace('.','_') }}_{{ item.1.orport }}::openfiles-max=13500::tc=daemon:'\"\n  with_nested:\n   - tor_ips\n   - tor_ports\n  #TODO\n  #notify: restart tor\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "c25e1f96cb3a91dfef803f4de935c51c597bd19d", "sha": "91b044bcee8d25e94d8bb74dfb29db0dbb6c87e0", "filename": "tasks/rpm_prepare.yml", "decoded_content": "---\n\n- name: Setup RPM specific variables (set_fact)\n  set_fact:\n    tor_user: toranon\n    tor_ConfDir: /etc/tor\n    tor_RunAsDaemon: 0\n    tor_DataDir: /var/lib/tor-instances\n  tags:\n   - reconfigure\n   - renewkey\n\n- name: Ensure EPEL repo is installed (yum)\n  become: yes\n  yum:\n    name: epel-release\n  when: ansible_pkg_mgr == 'yum'\n\n- name: Ensure SELinux dependencies are installed\n  become: yes\n  package:\n    name: libselinux-python,libsemanage-python\n    state: present\n  notify: re-gather facts\n\n# re-gathering facts after installing libselinux-python\n# is a workaround for https://github.com/ansible/ansible-modules-core/issues/2432\n- meta: flush_handlers\n\n- name: Ensure SELinux boolean (tor_can_network_relay) is set appropriately (Fedora)\n  become: yes\n  seboolean:\n    name: tor_can_network_relay\n    state: yes\n    persistent: yes\n  when: ansible_selinux.status == 'enabled'\n\n- name: Ensure systemd drop-in folder is present (RPM)\n  become: yes\n  file:\n    path: /etc/systemd/system/tor@.service.d\n    state: directory\n    owner: root\n    mode: 0755\n\n# this is needed for a small service file modification (allow it to write to /var/lib/tor-instances)\n# without replacing the maintainer's file, for details see\n# http://www.freedesktop.org/software/systemd/man/systemd.unit.html#id-1.11.3\n- name: Ensure service file drop-in is present (RPM)\n  become: yes\n  copy:\n    src: local.conf\n    dest: /etc/systemd/system/tor@.service.d/local.conf\n    owner: root\n    mode: 0644\n  notify: systemctl daemon-reload\n\n- meta: flush_handlers\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "44be91805d4a4c003d28a7c5fd3f7a6317863435", "sha": "7b166d0eb1dfb898c58f8c9950665c1399a0e710", "filename": "meta/main.yml", "decoded_content": "---\ngalaxy_info:\n  author: nusenu\n  description: An Ansible role for Tor Relay Operators\n  license: GPLv3\n  platforms:\n  - name: Debian\n    versions:\n    - jessie\n  - name: FreeBSD\n    versions:\n    - 10.1\n    - 10.2\n  - name: OpenBSD\n    versions:\n    - 5.9\n  - name: EL\n    versions:\n    - 7\n  - name: Ubuntu\n    versions:\n    - 15.10\n  - name: Fedora\n    versions:\n    - 23\n  galaxy_tags:\n    - tor\n    - relay\n    - anonymity\n    - networking\n  min_ansible_version: 1.9.4\ndependencies: []\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "51dcdf691a7801895b569a5a927e30030d8feb70", "sha": "b94910d066d3d639c7732d139e75d3a013cd06cb", "filename": "tasks/freebsd_install.yml", "decoded_content": "---\n\n- name: Setup FreeBSD specific variables (set_fact)\n  set_fact:\n    tor_DataDir: /var/db/tor\n    tor_ConfDir: /usr/local/etc/tor/enabled\n  tags:\n   - reconfigure\n   - renewkey\n   - createdir\n\n- name: Ensure Tor is installed (FreeBSD)\n  become: yes\n  pkgng: name=tor state=present\n\n# temporary solution until rc.d supports multiple instances\n- name: Ensure Tor starts at boot (FreeBSD)\n  become: yes\n  lineinfile: dest=/etc/rc.local line=\"/usr/local/bin/tor -f {{ tor_ConfDir }}/{{ item[0] }}_{{ item.1.orport }}.torrc\" create=yes\n  with_nested:\n   - tor_ips\n   - tor_ports\n\n- name: If LogDir is a file, rename it (FreeBSD)\n  become: yes\n  shell: \"test -f {{ tor_LogDir }} && mv {{ tor_LogDir }} {{ tor_LogDir }}.bk-`date '+%Y-%m-%d_%H%M%S'`\"\n  ignore_errors: yes\n\n- name: Ensure sequential IP IDs are avoided (net.inet.ip.random_id)\n  become: yes\n  sysctl: name=net.inet.ip.random_id value=1 reload=no sysctl_set=yes\n  tags:\n    - freebsdkern\n\n- name: Gather current kern.ipc.somaxconn setting (FreeBSD)\n  shell: \"sysctl kern.ipc.somaxconn|cut -d' '  -f2\"\n  register: currentsomaxconn\n  tags:\n   - freebsdkern\n\n- name: Ensure somaxconn setting is reasonable (FreeBSD)\n  become: yes\n  command: \"sysctl kern.ipc.somaxconn={{ freebsd_somaxconn }}\"\n  when: currentsomaxconn.stdout|int < {{ freebsd_somaxconn }}\n  tags:\n   - freebsdkern\n\n- name: Ensure somaxconn setting in sysctl.conf is reasonable (FreeBSD)\n  become: yes\n  lineinfile: dest=/etc/sysctl.conf regexp=^kern.ipc.somaxconn line=\"kern.ipc.somaxconn={{ freebsd_somaxconn }}\" create=yes\n  when: currentsomaxconn.stdout|int < {{ freebsd_somaxconn }}\n  tags:\n   - freebsdkern\n\n- name: Gather current kern.ipc.nmbclusters setting (FreeBSD)\n  shell: \"sysctl kern.ipc.nmbclusters|cut -d' '  -f2\"\n  register: currentnmbc\n  tags:\n   - freebsdkern\n\n- name: Ensure nmbclusters setting is reasonable (FreeBSD)\n  become: yes\n  command: \"sysctl kern.ipc.nmbclusters={{ freebsd_nmbclusters }}\"\n  when: currentnmbc.stdout|int < {{ freebsd_nmbclusters }}\n  tags:\n   - freebsdkern\n\n- name: Ensure nmbclusters setting in sysctl.conf is reasonable (FreeBSD)\n  become: yes\n  lineinfile: dest=/etc/sysctl.conf regexp=^kern.ipc.nmbclusters line=\"kern.ipc.nmbclusters={{ freebsd_nmbclusters }}\" create=yes\n  when: currentnmbc.stdout|int < {{ freebsd_nmbclusters }}\n  tags:\n   - freebsdkern\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "51dcdf691a7801895b569a5a927e30030d8feb70", "sha": "acc3b24db12b6ebe49435770498aa974e089fbd7", "filename": "tasks/openbsd_install.yml", "decoded_content": "---\n\n- name: Setup OpenBSD specific variables (set_fact)\n  set_fact:\n    tor_DataDir: /var/tor\n    tor_ConfDir: /etc/tor/enabled\n  tags:\n   - reconfigure\n   - renewkey\n   - createdir\n\n- name: Ensure Tor is installed (OpenBSD)\n  become: yes\n  openbsd_pkg: name=tor state=present\n\n- name: Gather current system-wide file descriptor limits (OpenBSD)\n  shell: \"sysctl kern.maxfiles|cut -d= -f2\"\n  register: currentlimits\n\n- name: Ensure system-wide runtime file descriptor limits are reasonable (OpenBSD)\n  become: yes\n  command: \"sysctl kern.maxfiles=20000\"\n  when: currentlimits.stdout|int < 20000\n\n- name: Ensure system-wide persistent file descriptor limits are reasonable (OpenBSD)\n  become: yes\n  lineinfile: dest=/etc/sysctl.conf regexp=^kern.maxfiles line=\"kern.maxfiles=20000\" create=yes\n  when: currentlimits.stdout|int < 20000\n\n# We rise openfiles limits for every tor instance separately.\n# An instance is identified by its rc.d file name.\n- name: Ensure Tor process file descriptor limits are reasonable (OpenBSD)\n  become: yes\n  lineinfile: \"dest=/etc/login.conf line='tor{{ item[0]| replace('.','_') }}_{{ item.1.orport }}::openfiles-max=13500::tc=daemon:'\"\n  with_nested:\n   - tor_ips\n   - tor_ports\n  #TODO\n  #notify: restart tor\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "b5d6f33218259b7205796d55ad4b976d3b9f3305", "sha": "857baff789042ceb93356c9ccbeff3052c5f6d46", "filename": "tasks/freebsd_install.yml", "decoded_content": "---\n\n- name: Setup FreeBSD specific variables (set_fact)\n  set_fact:\n    tor_DataDir: /var/db/tor-instances\n    tor_ConfDir: /usr/local/etc/tor/enabled\n  tags:\n   - reconfigure\n   - renewkey\n   - createdir\n\n- name: Ensure Tor is installed (FreeBSD)\n  become: yes\n  pkgng: name=tor state=present\n\n# temporary solution until rc.d supports multiple instances\n- name: Ensure Tor starts at boot (FreeBSD)\n  become: yes\n  lineinfile: dest=/etc/rc.local line=\"/usr/local/bin/tor -f {{ tor_ConfDir }}/{{ item[0] }}_{{ item.1.orport }}.torrc\" create=yes\n  with_nested:\n   - tor_ips\n   - tor_ports\n\n- name: Ensure sequential IP IDs are avoided (net.inet.ip.random_id)\n  become: yes\n  sysctl: name=net.inet.ip.random_id value=1 reload=no sysctl_set=yes\n  tags:\n    - freebsdkern\n\n- name: Gather current kern.ipc.somaxconn setting (FreeBSD)\n  shell: \"sysctl kern.ipc.somaxconn|cut -d' '  -f2\"\n  register: currentsomaxconn\n  tags:\n   - freebsdkern\n\n- name: Ensure somaxconn setting is reasonable (FreeBSD)\n  become: yes\n  command: \"sysctl kern.ipc.somaxconn={{ freebsd_somaxconn }}\"\n  when: currentsomaxconn.stdout|int < {{ freebsd_somaxconn }}\n  tags:\n   - freebsdkern\n\n- name: Ensure somaxconn setting in sysctl.conf is reasonable (FreeBSD)\n  become: yes\n  lineinfile: dest=/etc/sysctl.conf regexp=^kern.ipc.somaxconn line=\"kern.ipc.somaxconn={{ freebsd_somaxconn }}\" create=yes\n  when: currentsomaxconn.stdout|int < {{ freebsd_somaxconn }}\n  tags:\n   - freebsdkern\n\n- name: Gather current kern.ipc.nmbclusters setting (FreeBSD)\n  shell: \"sysctl kern.ipc.nmbclusters|cut -d' '  -f2\"\n  register: currentnmbc\n  tags:\n   - freebsdkern\n\n- name: Ensure nmbclusters setting is reasonable (FreeBSD)\n  become: yes\n  command: \"sysctl kern.ipc.nmbclusters={{ freebsd_nmbclusters }}\"\n  when: currentnmbc.stdout|int < {{ freebsd_nmbclusters }}\n  tags:\n   - freebsdkern\n\n- name: Ensure nmbclusters setting in sysctl.conf is reasonable (FreeBSD)\n  become: yes\n  lineinfile: dest=/etc/sysctl.conf regexp=^kern.ipc.nmbclusters line=\"kern.ipc.nmbclusters={{ freebsd_nmbclusters }}\" create=yes\n  when: currentnmbc.stdout|int < {{ freebsd_nmbclusters }}\n  tags:\n   - freebsdkern\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "c5b489aa56c545dd0b51910b5a0d701d838ff071", "sha": "89469a7522ac4618769a5cf24b69cf4f111553a5", "filename": "handlers/main.yml", "decoded_content": "---\n#- name: restart tor\n#  service: name=tor state=restarted\n\n- name: stop tor\n  sudo: yes\n  service: name=tor state=stopped\n\n# workaround for #20\n# the proper way would be service: enabled=no\n- name: disable-sysv-debian tor\n  sudo: yes\n  command: update-rc.d tor disable\n\n- name: restart apparmor\n  sudo: yes\n  service: name=apparmor state=restarted\n\n- name: systemctl daemon-reload\n  sudo: yes\n  command: systemctl daemon-reload\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "dbe5647c4e42252e9e428e50b9b0a3636f94842a", "sha": "f40f09e17c15f44734450898474f24f1090abac6", "filename": "tasks/freebsd_service.yml", "decoded_content": "---\n\n# tor_intances defines the number and configurations of instances\n# an instance is defined with the following fields:\n# inst_name:configfile:username:groupname:pidfile:data_dir\n# username/groupname is set to root to be able to bind to <1024 ports\n# but privileges are dropped afterwards (torrc User parameter)\n- name: Ensure Tor multi-instance configuration is present (FreeBSD)\n  become: yes\n  lineinfile:\n    dest: /etc/rc.conf\n    line: \"tor_instances=\\\"${tor_instances} {{ item.0.ipv4 }}_{{ item.1.orport }}:{{ tor_ConfDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}.torrc:root:root:{{ tor_PidDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}/pid:{{ tor_DataDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}\\\"\"\n    create: yes\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n\n# this task is a workaround, because 'service tor status'\n# fails if this line is not present (which in turn fails the ansible service module)\n- name: ensure tor instance FreeBSD\n  become: yes\n  lineinfile:\n    dest: /etc/rc.conf\n    line: \"tor_enable=\\\"YES\\\"\"\n    create: yes\n\n- name: Ensure PidDir exists (FreeBSD)\n  become: yes\n  file:\n    path: \"{{ tor_PidDir }}\"\n    state: directory\n    owner: root\n    mode: 0755\n\n- name: Ensure PidDir is owned by per-instance tor_user (FreeBSD)\n  become: yes\n  file:\n    path: \"{{ tor_PidDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}\"\n    state: directory\n    owner: \"_tor-{{ item.0.ipv4 }}_{{ item.1.orport }}\"\n    mode: 0700\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n\n# this affects all instances\n- name: Ensure Tor instances are running and enabled (FreeBSD)\n  become: yes\n  service:\n    name: tor\n    enabled: yes\n    state: started\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "51dcdf691a7801895b569a5a927e30030d8feb70", "sha": "81339b6aeb0eb2caf66576e4691e2e3130e310b5", "filename": "tasks/freebsd_service.yml", "decoded_content": "---\n\n- name: Ensure PidDir exists (FreeBSD)\n  become: yes\n  file: path={{ tor_PidDir }}\n    state=directory\n    owner=root\n    mode=0755\n\n- name: Ensure PidDir is owned by per-instance tor_user (FreeBSD)\n  become: yes\n  file: path={{ tor_PidDir }}/{{ item[0] }}_{{ item.1.orport }}\n    state=directory\n    owner=_tor-{{ item[0] }}_{{ item.1.orport }}\n    mode=0700\n  with_nested:\n   - tor_ips\n   - tor_ports\n\n- name: Ensure Tor instances are reloaded if its torrc changed (FreeBSD)\n  become: yes\n  shell: \"kill -HUP `cat {{ tor_PidDir }}/{{ item.item[0] }}_{{ item.item.1.orport }}/pid`\"\n  ignore_errors: yes\n  with_items: instances.results\n  when: item.changed == True\n  tags:\n   - reconfigure\n\n- name: Ensure Tor instances are running (FreeBSD)\n  become: yes\n  shell: \"kill -0 `cat {{ tor_PidDir }}/{{ item[0] }}_{{ item.1.orport }}/pid` || tor -f {{ tor_ConfDir }}/{{ item[0] }}_{{ item.1.orport }}.torrc\"\n  with_nested:\n   - tor_ips\n   - tor_ports\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "9f2f1160c4dc3fea2f6e81e42ba8a6254ef093db", "sha": "40c2a0aab1694994d5a45958f0086449cf1d43e4", "filename": "tasks/linux_service.yml", "decoded_content": "---\n\n# Linux/systemd section (uses service module)\n# ===========================================\n\n- name: Ensure Tor instances are enabled and started (Linux/systemd)\n  become: yes\n  service:\n    name: \"tor@{{ item.0.ipv4 }}_{{ item.1.orport }}.service\"\n    enabled: yes\n    state: started\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "25268594e4bf662f487ddd8792c22b93b27160fc", "sha": "3209503e8a409acc47e62052f1eec6a2038bbae7", "filename": "tasks/yum_install.yml", "decoded_content": "---\n\n- name: Add tor rpm key\n  sudo: yes\n  rpm_key: state=present key=https://deb.torproject.org/torproject.org/rpm/RPM-GPG-KEY-torproject.org.asc\n\n- set_fact: tor_rpm_distribution_os=\"el\"\n  when: ansible_distribution == 'CentOS' or ansible_distribution == \"Red Hat Enterprise Linux\"\n\n- set_fact: tor_rpm_distribution_os=\"fc\"\n  when: ansible_distribution == 'Fedora'\n\n- name: Add torproject.org repository (YUM)\n  sudo: yes\n  template: src=torproject.yum.repo dest=/etc/yum.repos.d/torproject.repo owner=root group=root\n\n# we specifically opt for present over latest to improve performance\n# \"latest\" is covered by auto updates\n- name: Ensure Tor package is installed (YUM)\n  sudo: yes\n  yum: name=tor state=present\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "c25e1f96cb3a91dfef803f4de935c51c597bd19d", "sha": "5794ee3a8fa1f0b29fc49258c53842057b561b84", "filename": "tasks/apt_prepare.yml", "decoded_content": "---\n\n- name: Setup Debian specific variables (set_fact)\n  set_fact:\n    tor_user: debian-tor\n    tor_DataDir: /var/lib/tor-instances\n    tor_ConfDir: /etc/tor/instances\n    tor_RunAsDaemon: 0\n    tor_packages:\n        - deb.torproject.org-keyring\n        - tor\n  tags:\n   - reconfigure\n   - renewkey\n\n- name: Ensure torproject gpg key is installed (A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89)\n  become: yes\n  apt_key:\n    data: \"{{ lookup('file', 'deb.torproject.org_A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89.pub') }}\"\n    id: A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89\n    state: present\n\n- name: Ensure torproject.org repository is present (APT)\n  become: yes\n  apt_repository:\n    repo: 'deb http://deb.torproject.org/torproject.org {{ tor_distribution_release }} main'\n    state: present\n    update_cache: yes\n\n# Background:\n# https://github.com/nusenu/ansible-relayor/issues/72\n- name: Ensure systemd generator folder exists (Debian Testing and Ubuntu)\n  become: yes\n  file:\n    path: /etc/systemd/system-generators\n    state: directory\n    mode: 0755\n  when: ansible_lsb.codename != 'jessie'\n\n- name: Ensure custom systemd generator is in place (Debian/Ubuntu only)\n  become: yes\n  copy:\n    src: tor-generator\n    dest: \"{{ (ansible_lsb.codename == 'jessie')|ternary('/lib/systemd/system-generators/relayor-generator', '/etc/systemd/system-generators/tor-generator') }}\"\n    owner: root\n    mode: 0755\n\n- name: Ensure the maintainer's generator is disabled (Debian 8 only)\n  become: yes\n  command: dpkg-statoverride --update --add root root 644 /lib/systemd/system-generators/tor-generator\n  when: ansible_lsb.codename == 'jessie'\n  ignore_errors: yes\n\n#- name: Ensure AppArmor allows access to necessary files (Ubuntu)\n#  become: yes\n#  lineinfile: dest=/etc/apparmor.d/local/system_tor line={{ item }}\n#  with_items:\n#    - '/etc/tor/enabled/*\\ r,'\n#    - '/{,var/}run/tor/*.pid\\ w,'\n#    - '/var/lib/tor/**\\ w,'\n#  when: ansible_distribution == 'Ubuntu'\n#  notify: restart apparmor\n\n#- meta: flush_handlers\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "44be91805d4a4c003d28a7c5fd3f7a6317863435", "sha": "990e5b7afc211e99c8dfe7ef65a45c5645b54ae3", "filename": "tasks/openbsd_install.yml", "decoded_content": "---\n\n- name: Setup OpenBSD specific variables (set_fact)\n  set_fact:\n    tor_DataDir: /var/tor-instances\n    tor_ConfDir: /etc/tor/enabled\n  tags:\n   - reconfigure\n   - renewkey\n   - createdir\n\n- name: Ensure Tor is installed (OpenBSD)\n  become: yes\n  openbsd_pkg: name=tor state=present\n  tags:\n   - install\n\n- name: Gather current system-wide file descriptor limits (OpenBSD)\n  shell: \"sysctl kern.maxfiles|cut -d= -f2\"\n  register: currentlimits\n\n- name: Ensure system-wide runtime file descriptor limits are reasonable (OpenBSD)\n  become: yes\n  command: \"sysctl kern.maxfiles=20000\"\n  when: currentlimits.stdout|int < 20000\n\n- name: Ensure system-wide persistent file descriptor limits are reasonable (OpenBSD)\n  become: yes\n  lineinfile: dest=/etc/sysctl.conf regexp=^kern.maxfiles line=\"kern.maxfiles=20000\" create=yes\n  when: currentlimits.stdout|int < 20000\n\n# We rise openfiles limits for every tor instance separately.\n# An instance is identified by its rc.d file name.\n- name: Ensure Tor process file descriptor limits are reasonable (OpenBSD)\n  become: yes\n  lineinfile: \"dest=/etc/login.conf line='tor{{ item[0]| replace('.','_') }}_{{ item.1.orport }}::openfiles-max=13500::tc=daemon:'\"\n  with_nested:\n   - tor_ips\n   - tor_ports\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "9f2f1160c4dc3fea2f6e81e42ba8a6254ef093db", "sha": "b837956bb9cb84bdbeff0285fd6c3c4a3c5f7b2e", "filename": "tasks/apt_prepare.yml", "decoded_content": "---\n\n- name: Ensure lsb-release and apt-transport-https packages are installed\n  become: yes\n  apt:\n    name: lsb-release,apt-transport-https\n  notify:\n    - re-gather facts\n\n- meta: flush_handlers\n\n- name: Ensure torproject gpg key is installed (A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89)\n  become: yes\n  apt_key:\n    data: \"{{ lookup('file', 'deb.torproject.org_A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89.pub') }}\"\n    id: A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89\n    state: present\n\n- name: Ensure torproject.org repository is present (APT)\n  become: yes\n  apt_repository:\n    repo: 'deb https://deb.torproject.org/torproject.org {{ tor_distribution_release }} main'\n    state: present\n    update_cache: yes\n\n- name: Override tor_alpha_version if nightly builds repo is enabled (APT)\n  set_fact:\n    tor_alpha_version: nightly-master\n    tor_alpha: True\n  when: tor_nightly_builds\n\n- name: Ensure torproject.org alpha/nightly repo is present if enabled (APT)\n  become: yes\n  apt_repository:\n    repo: >\n        'deb https://deb.torproject.org/torproject.org\n        tor-{{ tor_alpha_version }}-{{ tor_distribution_release }} main'\n    state: present\n    update_cache: yes\n  when: tor_alpha\n\n# Background:\n# https://github.com/nusenu/ansible-relayor/issues/72\n- name: Ensure systemd generator folder exists (Debian/Ubuntu)\n  become: yes\n  file:\n    path: /etc/systemd/system-generators\n    state: directory\n    mode: 0755\n\n- name: Ensure custom systemd generator is in place (Debian/Ubuntu only)\n  become: yes\n  copy:\n    src: tor-generator\n    dest: /etc/systemd/system-generators/tor-generator\n    owner: root\n    mode: 0755\n\n#- name: Ensure AppArmor allows access to necessary files (Ubuntu)\n#  become: yes\n#  lineinfile: dest=/etc/apparmor.d/local/system_tor line={{ item }}\n#  with_items:\n#    - '/etc/tor/enabled/*\\ r,'\n#    - '/{,var/}run/tor/*.pid\\ w,'\n#    - '/var/lib/tor/**\\ w,'\n#  when: ansible_distribution == 'Ubuntu'\n#  notify: restart apparmor\n\n#- meta: flush_handlers\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "44be91805d4a4c003d28a7c5fd3f7a6317863435", "sha": "023d2b0e83a17a284c1ad905abeb035721aee1e7", "filename": "handlers/main.yml", "decoded_content": "---\n- name: stop-and-disable default tor\n  become: yes\n  service: name=tor state=stopped enabled=no\n\n- name: restart apparmor\n  become: yes\n  service: name=apparmor state=restarted\n\n- name: systemctl daemon-reload\n  become: yes\n  command: systemctl daemon-reload\n\n- name: re-gather facts\n  setup:\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "2149edf99fe1c251d0eaad5c78536c9b1d54dde3", "sha": "b3b1957dd28a0302f8acd1576aa48f859937ddd5", "filename": "tasks/apt_install.yml", "decoded_content": "---\n\n- name: Setup Debian specific variables (set_fact)\n  set_fact:\n    tor_user: debian-tor\n  tags:\n   - reconfigure\n   - createdir\n\n- name: Ensure torproject gpg key is installed (A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89)\n  become: yes\n  apt_key: data=\"{{ lookup('file', 'deb.torproject.org_A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89.pub') }}\"\n    id=A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89\n    state=present\n\n- name: Ensure torproject.org repository is present (APT)\n  become: yes\n  apt_repository: repo='deb http://deb.torproject.org/torproject.org {{ tor_distribution_release }} main'\n    state=present \n    update_cache=yes\n\n# waiting for trac ticket #14997\n#- name: Ensure  torproject.org alpha repo is present (if enabled)\n#  apt_repository: >\n#    repo='deb http://deb.torproject.org/torproject.org  main'\n#    state=present \n#    update_cache=yes\n#  when: tor_alpha is True\n\n# we specifically opt for present over latest to improve performance\n# \"latest\" is covered by auto updates\n- name: Ensure Tor is installed (APT)\n  become: yes\n  apt: pkg=\"{{ item }}\" state=present\n  with_items: \n    - deb.torproject.org-keyring\n    - tor\n  # apt starts a tor client instance by default after installing the package\n  # we do not need that\n  notify:\n    - stop tor\n    - disable-sysv-debian tor\n\n- name: Ensure the presence of the multi-instance systemd unit file (Debian)\n  become: yes\n  template: src=debian_tor@.service dest=/lib/systemd/system/tor@.service owner=root mode=0644 backup=yes\n  when: ansible_distribution == 'Debian'\n  notify: systemctl daemon-reload\n\n- name: Ensure the presence of the multi-instance systemd unit file (Ubuntu)\n  become: yes\n  copy: src=ubuntu_tor@.service dest=/lib/systemd/system/tor@.service owner=root mode=0644 backup=yes\n  when: ansible_distribution == 'Ubuntu'\n  notify: systemctl daemon-reload\n\n- name: Ensure AppArmor allows access to necessary files (Ubuntu)\n  become: yes\n  lineinfile: dest=/etc/apparmor.d/local/system_tor line={{ item }}\n  with_items:\n    - '/etc/tor/enabled/*\\ r,'\n    - '/{,var/}run/tor/*.pid\\ w,'\n    - '/var/lib/tor/**\\ w,'\n  when: ansible_distribution == 'Ubuntu'\n  notify: restart apparmor\n\n- meta: flush_handlers\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "2149edf99fe1c251d0eaad5c78536c9b1d54dde3", "sha": "b46fedf76dd34cb41fcca36bd8fe888f6a538db1", "filename": "tasks/yum_install.yml", "decoded_content": "---\n\n- name: Add tor rpm key\n  become: yes\n  rpm_key: state=present key=https://deb.torproject.org/torproject.org/rpm/RPM-GPG-KEY-torproject.org.asc\n\n- set_fact: tor_rpm_distribution_os=\"el\"\n  when: ansible_distribution == 'CentOS' or ansible_distribution == \"Red Hat Enterprise Linux\"\n\n# we do not actually support Fedora\n- set_fact: tor_rpm_distribution_os=\"fc\"\n  when: ansible_distribution == 'Fedora'\n\n# the tor_alpha var is taken into account here (template)\n- name: Add torproject.org repository (YUM)\n  become: yes\n  template: src=torproject.yum.repo dest=/etc/yum.repos.d/torproject.repo owner=root group=root\n\n# we specifically opt for present over latest to improve performance\n# \"latest\" is covered by auto updates\n- name: Ensure Tor package is installed (YUM)\n  become: yes\n  yum: name=tor state=present\n\n# we need this for the seboolean ansible module to work\n- name: Ensure setsebool (SELinux) dependencies are installed (CentOS)\n  become: yes\n  yum: name=libsemanage-python state=present\n  when: ansible_selinux.status == 'enabled'\n\n- name: Ensure the presence of the multi-instance systemd unit file (CentOS)\n  become: yes\n  copy: src=centos_tor@.service dest=/lib/systemd/system/tor@.service owner=root mode=0644 backup=yes setype=tor_unit_file_t\n  notify: systemctl daemon-reload\n\n- name: Ensure SELinux boolean (tor_can_network_relay) is set appropriately (CentOS)\n  become: yes\n  seboolean: name=tor_can_network_relay state=yes persistent=yes\n  when: ansible_selinux.status == 'enabled'\n\n- meta: flush_handlers\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "c5b489aa56c545dd0b51910b5a0d701d838ff071", "sha": "f01c985bd1961fc3d0d72ce475ed5fbb146ffe3f", "filename": "tasks/main.yml", "decoded_content": "---\n\n- include: apt_install.yml\n  when: ansible_pkg_mgr == 'apt'\n  tags: debian\n\n- include: yum_install.yml\n  when: ansible_pkg_mgr == 'yum'\n  tags: centos\n\n- include: openbsd_install.yml\n  when: ansible_pkg_mgr == 'openbsd_pkg'\n  tags: openbsd\n\n- include: freebsd_install.yml\n  when: ansible_pkg_mgr == 'pkgng'\n  tags: freebsd\n\n- include: configure.yml\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "44be91805d4a4c003d28a7c5fd3f7a6317863435", "sha": "d44fc6c0048577d53181ed30da976c89ad16eb46", "filename": "tasks/rpm_install.yml", "decoded_content": "---\n\n- name: Setup RPM specific variables (set_fact)\n  set_fact:\n    tor_user: toranon\n    tor_ConfDir: /etc/tor\n    tor_RunAsDaemon: 0\n    tor_DataDir: /var/lib/tor-instances\n  tags:\n   - reconfigure\n   - renewkey\n   - createdir\n\n- name: Ensure tor package is installed (dnf)\n  become: yes\n  dnf: name=tor,libselinux-python,libsemanage-python state=present\n  when: ansible_pkg_mgr == 'dnf'\n  notify: re-gather facts\n\n# re-gathering facts after installing libselinux-python on F23\n# is a workaround for https://github.com/ansible/ansible-modules-core/issues/2432\n- meta: flush_handlers\n\n- name: Ensure EPEL repo is installed (yum)\n  become: yes\n  yum: name=epel-release\n  when: ansible_pkg_mgr == 'yum'\n\n- name: Ensure tor package is installed (yum)\n  become: yes\n  yum: name=tor,libsemanage-python state=present\n  when: ansible_pkg_mgr == 'yum'\n\n- name: Ensure SELinux boolean (tor_can_network_relay) is set appropriately (Fedora)\n  become: yes\n  seboolean: name=tor_can_network_relay state=yes persistent=yes\n  when: ansible_selinux.status == 'enabled'\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "0406395a8758f12abd57914532cc0ff17894d015", "sha": "c7efced2abf716b2e15e3b10a7b15800f9668a65", "filename": "tasks/configure.yml", "decoded_content": "---\n\n- name: Ensure local DataDir folders exist (LOCAL)\n  file: path={{ tor_offline_masterkey_dir }}/{{ inventory_hostname }}-{{ item.0.ipv4 }}_{{ item.1.orport }}\n    state=directory mode=700\n  delegate_to: 127.0.0.1\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n  tags:\n   - createdir\n\n- name: Ensure all relay keys exist (LOCAL)\n  local_action: command tor --PublishServerDescriptor 0 --orport auto --list-fingerprint --datadirectory \"{{ tor_offline_masterkey_dir }}/{{ inventory_hostname }}-{{ item.0.ipv4 }}_{{ item.1.orport }}\" --Log \"err stdout\"\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n\n- name: Generate new Ed25519 signing keys (LOCAL)\n  local_action: command tor --keygen --SigningKeyLifetime {{ tor_signingkeylifetime_days}}\\ days --datadirectory \"{{ tor_offline_masterkey_dir }}/{{ inventory_hostname }}-{{ item.0.ipv4 }}_{{ item.1.orport }}\" --Log \"err stdout\"\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n  tags:\n   - renewkey\n\n- name: Detect duplicate relay keys across relays (LOCAL)\n  shell: sha1sum {{ tor_offline_masterkey_dir }}/*/keys/secret_id_key {{ tor_offline_masterkey_dir }}/*/keys/ed25519_master_id_secret_key|cut -d/ -f1|sort|uniq -d|wc -l\n  delegate_to: 127.0.0.1\n  register: dupcount\n\n- name: Abort on duplicate relay keys\n  fail: msg=\"Duplicate relay key detected! Aborting.\"\n  when: dupcount.stdout != \"0\"\n\n- name: Detect if Ed25519 master keys are on the relay\n  stat: path={{ tor_DataDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}/keys/ed25519_master_id_secret_key\n  become: yes\n  register: masterkeycheck\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n\n- name: Abort if Ed25519 master keys are on the relay\n  fail: msg=\"\n\n            Ed25519 MASTER KEY detected on the relay - it is NOT supposed to be there! Aborting.\"\n  when: item.stat.exists == True\n  with_items: \"{{ masterkeycheck.results }}\"\n\n- name: Collect fingerprints for MyFamily (LOCAL)\n  shell: cut {{ tor_offline_masterkey_dir }}/*/fingerprint -d\" \" -f2|xargs|sed -e 's/ /,/g'\n  delegate_to: 127.0.0.1\n  register: family\n  tags:\n   - reconfigure\n\n- name: Ensure per-instance tor users exist\n  become: yes\n  user: name=_tor-{{ item.0.ipv4 }}_{{ item.1.orport }} system=yes shell=/bin/false createhome=no home={{ tor_DataDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n\n- name: Ensure per-instance config folders exist (Debian only)\n  become: yes\n  file: path={{ tor_ConfDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }} state=directory mode=755\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n  when: ansible_pkg_mgr == 'apt'\n\n- name: Ensure DataDir exists\n  become: yes\n  file: path={{ tor_DataDir }}\n    state=directory\n    owner=root\n    mode=0755\n\n- name: Ensure \"keys\" subfolder exists\n  become: yes\n  file: path={{ tor_DataDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}/keys\n    state=directory\n    owner=\"_tor-{{ item.0.ipv4 }}_{{ item.1.orport }}\"\n    group=\"_tor-{{ item.0.ipv4 }}_{{ item.1.orport }}\"\n    mode=0700\n    recurse=yes\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n\n- name: Ensure RSA key is in place (without overriding existing keys)\n  become: yes\n  copy: src={{ tor_offline_masterkey_dir }}/{{ inventory_hostname }}-{{ item.0.ipv4 }}_{{ item.1.orport }}/keys/{{ item[2] }}\n   dest={{ tor_DataDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}/keys/{{ item[2] }}\n   owner=\"_tor-{{ item.0.ipv4 }}_{{ item.1.orport }}\"\n   mode=700 force=no\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n   - [ 'secret_id_key' ]\n\n- name: Fetch RSA key for comparision\n  become: yes\n  fetch: src={{ tor_DataDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}/keys/{{ item[2] }}\n    dest={{ tor_offline_masterkey_dir }}/{{ inventory_hostname }}-{{ item.0.ipv4 }}_{{ item.1.orport }}/keys/{{ item[2] }}.untrustedremotekey\n    flat=yes\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n   - [ 'secret_id_key' ]\n\n- name: Compare local vs. remote RSA key (secret_id_key)\n  local_action: shell sha1sum {{ tor_offline_masterkey_dir }}/{{ inventory_hostname }}-\"{{ item.0.ipv4 }}_{{ item.1.orport }}\"/keys/secret_id_key*|cut -d/ -f1|uniq -d|wc -l\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n  register: rsakey\n\n- name: Abort if local and remote RSA keys do not match\n  fail: 'msg=\"\n\n\n   Key MISMATCH detected: Remote RSA key does not match local key - manual intervention required.\n\n   We detected that the remote host uses an RSA key that was not generated by us.\n   We will not override it with our locally generated key.\n\n   If you want to make use of the remote RSA key you have to override the local key manually:\n\n\n   cd ~/.tor/offlinemasterkeys/<inventoryname>-<IP_port>/keys\n\n   mv secret_id_key.untrustedremotekey secret_id_key\"'\n  when: item.stdout != \"1\"\n  with_items: \"{{ rsakey.results }}\"\n\n# this task is separated from the task named \"Ensure RSA key is in place\" because it is not run with 'force=no'\n- name: Transmit new Ed25519 signing keys\n  become: yes\n  copy: src={{ tor_offline_masterkey_dir }}/{{ inventory_hostname }}-{{ item.0.ipv4 }}_{{ item.1.orport }}/keys/{{ item[2] }}\n   dest={{ tor_DataDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}/keys/{{ item[2] }}\n   owner=\"_tor-{{ item.0.ipv4 }}_{{ item.1.orport }}\"\n   mode=700\n   setype=tor_var_lib_t\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n   - [ 'ed25519_signing_cert', 'ed25519_signing_secret_key' ]\n  tags:\n   - renewkey\n\n# This needs to be at the end to fix SELinux contexts recursively\n- name: Ensure per-instance DataDir have proper permissions\n  become: yes\n  file: path={{ tor_DataDir }}/{{ item.0.ipv4 }}_{{ item.1.orport }}\n    state=directory\n    owner=\"_tor-{{ item.0.ipv4 }}_{{ item.1.orport }}\"\n    group=\"_tor-{{ item.0.ipv4 }}_{{ item.1.orport }}\"\n    mode=0700\n    recurse=yes\n    setype=tor_var_lib_t\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n\n- name: Ensure Tor config directory exists\n  become: yes\n  file: path={{ tor_ConfDir }}\n    state=directory\n    owner=root\n    group={{ tor_user }}\n    mode=755\n\n- name: Ensure tor-exit-notice.html is present (if we are an exit)\n  become: yes\n  template: src=tor-exit-notice.html dest={{ tor_ConfDir }}/tor-exit-notice.html mode=444\n  when: tor_ExitRelay == True and tor_ExitNoticePage == True\n\n- name: Generating torrc file(s)\n  become: yes\n  template: >\n    src=torrc\n    dest=\"{{ (ansible_pkg_mgr != 'apt')| ternary(tor_ConfDir ~ '/' ~ item.0.ipv4 ~ '_' ~ item.1.orport ~ '.torrc', tor_ConfDir ~ '/' ~ item.0.ipv4 ~ '_' ~ item.1.orport ~ '/torrc') }}\"\n    owner=root\n    mode=0644\n    backup=yes\n    validate=\"tor --verify-config -f %s\"\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n  register: instances\n  tags:\n   - reconfigure\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "9f2f1160c4dc3fea2f6e81e42ba8a6254ef093db", "sha": "160803ff60a260cebf3ea11498ed622c8d39d869", "filename": "tasks/rpm_prepare.yml", "decoded_content": "---\n\n- name: Ensure EPEL repo is installed (yum)\n  become: yes\n  yum:\n    name: epel-release\n  when: ansible_pkg_mgr == 'yum'\n\n- name: Ensure SELinux dependencies are installed\n  become: yes\n  package:\n    name: libselinux-python,libsemanage-python\n    state: present\n  notify: re-gather facts\n\n# re-gathering facts after installing ansible SELinux dependencies (libselinux-python)\n- meta: flush_handlers\n\n- name: Ensure SELinux boolean (tor_can_network_relay) is set appropriately\n  become: yes\n  seboolean:\n    name: tor_can_network_relay\n    state: yes\n    persistent: yes\n  when: ansible_selinux.status == 'enabled'\n\n- name: Ensure systemd drop-in folder is present (RPM)\n  become: yes\n  file:\n    path: /etc/systemd/system/tor@.service.d\n    state: directory\n    owner: root\n    mode: 0755\n\n# this is needed for a small service file modification (allow it to write to /var/lib/tor-instances)\n# without replacing the maintainer's file, for details see\n# http://www.freedesktop.org/software/systemd/man/systemd.unit.html#id-1.11.3\n- name: Ensure service file drop-in is present (RPM)\n  become: yes\n  copy:\n    src: local.conf\n    dest: /etc/systemd/system/tor@.service.d/local.conf\n    owner: root\n    mode: 0644\n  notify: systemctl daemon-reload\n\n- meta: flush_handlers\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "33341b8cd483ae2583a4bd7c1bd79c82e4a12e4b", "sha": "44617d6949d8b6bf3e0ad200b6f158d7436a298a", "filename": "tasks/configure.yml", "decoded_content": "---\n\n- name: Ensure Tor DataDir(s) exist and is owned by tor_user\n  sudo: yes\n  file: path={{ tor_DataDir }}/{{ item[0] }}_{{ item.1.orport }}\n    state=directory\n    owner={{ tor_user }}\n    mode=0700\n    recurse=yes\n  with_nested:\n   - \"{{ tor_ips }}\"\n   - \"{{ tor_ports }}\"\n  tags:\n   - debian\n   - centos\n   - freebsd\n   - openbsd\n   - createdir\n\n- name: Ensure Tor config directory exists and has appropriate permissions\n  sudo: yes\n  file: path={{ tor_ConfDir }}\n    state=directory\n    owner=root\n    group={{ tor_user }}\n    mode=755\n  tags:\n   - debian\n   - centos\n   - freebsd\n   - openbsd\n\n- name: Ensure LogDir exists and has appropriate permissions\n  sudo: yes\n  file: path={{ tor_LogDir }}\n    state=directory\n    owner={{ tor_user }}\n    mode=750\n  tags:\n   - debian\n   - centos\n   - freebsd\n   - openbsd\n\n- name: Ensure PidDir is owned by tor_user\n  sudo: yes\n  file: path={{ tor_PidDir }}\n    state=directory\n    owner={{ tor_user }}\n    group={{ tor_user }}\n    mode=2750\n  tags:\n   - debian\n   - centos\n   - freebsd\n   - openbsd\n\n- name: Generating temporary (without MyFamily) torrc file(s)...\n  sudo: yes\n  template: src=torrc\n    dest=\"{{ tor_ConfDir }}/{{ item[0] }}_{{ item.1.orport }}.torrc-tmp\"\n    owner=root\n    mode=0644\n  with_nested:\n   - tor_ips\n   - tor_ports\n  tags:\n   - debian\n   - centos\n   - freebsd\n   - openbsd\n\n- name: Collect relay fingerprints (for MyFamily)\n  sudo: yes\n  shell: \"tor --hush -f {{ tor_ConfDir }}/{{ item[0] }}_{{ item.1.orport }}.torrc-tmp --list-fingerprint |cut -d' ' -f2-|sed -e 's, ,,g'\"\n  with_nested:\n   - tor_ips\n   - tor_ports\n  register: tor_fingerprints\n  tags:\n   - debian\n   - centos\n   - freebsd\n   - openbsd\n   - configure\n\n- name: Generating final torrc file(s) (with MyFamily)\n  sudo: yes\n  template: >\n    src=torrc\n    dest=\"{{ tor_ConfDir }}/{{ item[0] }}_{{ item.1.orport }}.torrc\"\n    owner=root\n    mode=0644\n    backup=yes\n    validate=\"tor --verify-config -f %s\"\n  with_nested:\n   - tor_ips\n   - tor_ports\n  register: instances\n  tags:\n   - debian\n   - centos\n   - freebsd\n   - openbsd\n   - configure\n\n# Linux/systemd section (uses service module)\n# ===========================================\n \n- name: Ensure Tor instances are reloaded if its torrc changed (Linux/systemd)\n  sudo: yes\n  service: name=tor@{{ item.item[0] }}_{{ item.item.1.orport }}.service state=reloaded\n  with_items: instances.results\n  when: ansible_system == 'Linux' and item.changed == True \n  tags:\n   - debian\n   - centos\n   - configure\n\n- name: Ensure Tor instances are enabled and started (Linux/systemd)\n  sudo: yes\n  service: name=tor@{{ item[0] }}_{{ item.1.orport }}.service enabled=yes state=started\n  with_nested:\n   - tor_ips\n   - tor_ports\n  when: ansible_system == 'Linux'\n  tags:\n   - debian\n   - centos\n\n# OpenBSD section (uses service module)\n# This is basically a copy from the Linux\n# section, but it requires different service\n# names and additional arguments.\n# =====================================\n\n# OpenBSD does not support multi-instance rc.d\n# # so we link as many pseudo rc scripts as we need.\n# # OpenBSD does not like dots in rc filenames so\n# # we replace them with underscores.\n- name: Create links to the service files (OpenBSD)\n  sudo: yes\n  file: src=/etc/rc.d/tor state=link path=/etc/rc.d/tor{{ item[0]| replace('.','_') }}_{{ item.1.orport }}\n  with_nested:\n   - tor_ips\n   - tor_ports\n  when: ansible_system == 'OpenBSD'\n  tags:\n   - openbsd\n\n- name: Ensure Tor instances are enabled and started (OpenBSD)\n  sudo: yes\n  service: name=tor{{ item[0]|replace('.','_') }}_{{ item.1.orport }}\n   arguments=\"-f {{ tor_ConfDir }}/{{ item[0] }}_{{ item.1.orport }}.torrc\" enabled=yes state=started\n  with_nested:\n   - tor_ips\n   - tor_ports\n  when: ansible_system == 'OpenBSD'\n  tags:\n   - openbsd\n\n- name: Ensure Tor instances are reloaded if its torrc changed (OpenBSD)\n  sudo: yes\n  service: name=tor{{ item.item[0]|replace('.','_') }}_{{ item.item.1.orport }} state=reloaded\n  with_items: instances.results\n  when: ansible_system == 'OpenBSD' and item.changed == True\n  tags:\n   - openbsd\n   - configure\n\n\n# FreeBSD section\n# ================\n\n- name: Ensure Tor instances are reloaded if its torrc changed (FreeBSD)\n  sudo: yes\n  shell: \"kill -HUP `cat {{ tor_PidDir }}/{{ item.item[0] }}_{{ item.item.1.orport }}.pid`\"\n  ignore_errors: yes\n  with_items: instances.results\n  when: item.changed == True and ansible_system == 'FreeBSD'\n  tags:\n   - freebsd\n   - configure\n\n- name: Ensure Tor instances are running (FreeBSD)\n  sudo: yes\n  shell: \"kill -0 `cat {{ tor_PidDir }}/{{ item[0] }}_{{ item.1.orport }}.pid` || tor -f {{ tor_ConfDir }}/{{ item[0] }}_{{ item.1.orport }}.torrc\"\n  with_nested:\n   - tor_ips\n   - tor_ports\n  when: ansible_system == 'FreeBSD'\n  tags:\n   - freebsd\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "c25e1f96cb3a91dfef803f4de935c51c597bd19d", "sha": "85706f25e38ce19573014fe5e43a3391fcd02f4d", "filename": "tasks/main.yml", "decoded_content": "---\n\n- name: Get ansible version\n  shell:  ansible --version|head -1|cut -d\" \" -f2\n  delegate_to: 127.0.0.1\n  register: ansibleversion\n\n- name: Check for vulnerable ansible version (CVE-2016-8614, CVE-2016-8628)\n  assert:\n    that:\n      - \"{{ ansibleversion.stdout | version_compare('2.1.3.0', '>=') }}\"\n    msg: \"VULNERABLE ansible version DETECTED, please update to v2.1.3 or newer! Exiting.\"\n\n- include: ip-list.yml\n  tags:\n    - always\n\n- include: apt_prepare.yml\n  when: ansible_pkg_mgr == 'apt'\n  tags:\n   - debian\n   - install\n\n- include: rpm_prepare.yml\n  when: ansible_os_family == 'RedHat'\n  tags:\n   - centos\n   - fedora\n   - install\n\n- include: openbsd_prepare.yml\n  when: ansible_system == 'OpenBSD'\n  tags:\n   - openbsd\n\n- include: freebsd_prepare.yml\n  when: ansible_system == 'FreeBSD'\n  tags:\n   - freebsd\n\n# we specifically opt for present over latest to improve performance\n- name: Ensure tor is installed\n  become: yes\n  package:\n    name: \"{{ item }}\"\n    state: present\n  with_items: \"{{ tor_packages }}\"\n  # apt starts a tor client instance by default after installing the package\n  # we do not need that\n  notify:\n    - stop-and-mask default tor instance\n    - disable default tor instance FreeBSD\n  tags:\n   - openbsd\n   - freebsd\n   - debian\n   - centos\n   - fedora\n   - install\n\n- meta: flush_handlers\n\n- include: configure.yml\n  tags:\n   - debian\n   - centos\n   - fedora\n   - openbsd\n   - freebsd\n\n- include: linux_service.yml\n  when: ansible_system == 'Linux'\n  tags:\n   - debian\n   - centos\n   - fedora\n\n- include: openbsd_service.yml\n  when: ansible_system == 'OpenBSD'\n  tags:\n   - openbsd\n\n- include: freebsd_service.yml\n  when: ansible_system == 'FreeBSD'\n  tags:\n   - freebsd\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "25268594e4bf662f487ddd8792c22b93b27160fc", "sha": "1fc2b6b4dc4fb9514a20161a1a52b698dab4c354", "filename": "tasks/freebsd_install.yml", "decoded_content": "---\n\n- name: Ensure Tor is installed (FreeBSD)\n  sudo: yes\n  pkgng: name=tor state=present\n  when: tor_alpha == False\n\n# pkg will take care of removing tor stable\n# if installed\n- name: Ensure Tor alpha is installed (FreeBSD)\n  sudo: yes\n  pkgng: name=tor-devel state=present\n  when: tor_alpha == True\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "c5b489aa56c545dd0b51910b5a0d701d838ff071", "sha": "94bfba2ab93b886ed15dbd4f43a97dc036c0e725", "filename": "tasks/apt_install.yml", "decoded_content": "---\n\n- name: Setup Debian specific variables (set_fact)\n  set_fact:\n    tor_user: debian-tor\n  tags: configure\n\n- name: Ensure torproject gpg key is installed (A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89)\n  sudo: yes\n  apt_key: data=\"{{ lookup('file', 'deb.torproject.org_A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89.pub') }}\"\n    id=A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89\n    state=present\n\n- name: Ensure torproject.org repository is present (APT)\n  sudo: yes\n  apt_repository: repo='deb http://deb.torproject.org/torproject.org {{ tor_distribution_release }} main'\n    state=present \n    update_cache=yes\n\n# waiting for trac ticket #14997\n#- name: Ensure  torproject.org alpha repo is present (if enabled)\n#  apt_repository: >\n#    repo='deb http://deb.torproject.org/torproject.org  main'\n#    state=present \n#    update_cache=yes\n#  when: tor_alpha is True\n\n# we specifically opt for present over latest to improve performance\n# \"latest\" is covered by auto updates\n- name: Ensure Tor is installed (APT)\n  sudo: yes\n  apt: pkg=\"{{ item }}\" state=present\n  with_items: \n    - deb.torproject.org-keyring\n    - tor\n  # apt starts a tor client instance by default after installing the package\n  # we do not need that\n  notify:\n    - stop tor\n    - disable-sysv-debian tor\n\n- name: Ensure the presence of the multi-instance systemd unit file (Debian)\n  sudo: yes\n  template: src=debian_tor@.service dest=/lib/systemd/system/tor@.service owner=root mode=0644 backup=yes\n  when: ansible_distribution == 'Debian'\n  notify: systemctl daemon-reload\n\n- name: Ensure the presence of the multi-instance systemd unit file (Ubuntu)\n  sudo: yes\n  copy: src=ubuntu_tor@.service dest=/lib/systemd/system/tor@.service owner=root mode=0644 backup=yes\n  when: ansible_distribution == 'Ubuntu'\n  notify: systemctl daemon-reload\n\n- name: Ensure AppArmor allows access to necessary files (Ubuntu)\n  sudo: yes\n  lineinfile: dest=/etc/apparmor.d/local/system_tor line={{ item }}\n  with_items:\n    - '/etc/tor/enabled/*\\ r,'\n    - '/{,var/}run/tor/*.pid\\ w,'\n    - '/var/lib/tor/**\\ w,'\n  when: ansible_distribution == 'Ubuntu'\n  notify: restart apparmor\n\n- meta: flush_handlers\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "25268594e4bf662f487ddd8792c22b93b27160fc", "sha": "b375687b711425020707141895930fc8cd7431d3", "filename": "tasks/main.yml", "decoded_content": "---\n\n- include: apt_install.yml\n  when: ansible_pkg_mgr == 'apt'\n\n- include: yum_install.yml\n  when: ansible_pkg_mgr == 'yum'\n\n- include: openbsd_install.yml\n  when: ansible_pkg_mgr == 'openbsd_pkg'\n\n- include: freebsd_install.yml\n  when: ansible_pkg_mgr == 'pkgng'\n\n- include: configure.yml\n", "repository": "nusenu/ansible-relayor"}, {"commit_sha": "c25e1f96cb3a91dfef803f4de935c51c597bd19d", "sha": "7914762f660d4715911f1539cb7308913d44fa48", "filename": "meta/main.yml", "decoded_content": "---\ngalaxy_info:\n  author: nusenu\n  description: An Ansible role for Tor Relay Operators\n  license: GPLv3\n  platforms:\n  - name: Debian\n    versions:\n    - jessie\n    - stretch\n  - name: FreeBSD\n    versions:\n    - 10.3\n    - 11.0\n  - name: OpenBSD\n    versions:\n    - 6.0\n  - name: EL\n    versions:\n    - 7\n  - name: Ubuntu\n    versions:\n    - xenial\n  - name: Fedora\n    versions:\n    - 24\n  galaxy_tags:\n    - tor\n    - ipv6\n    - anonymity\n    - networking\n  min_ansible_version: 2.1.3\ndependencies: []\n", "repository": "nusenu/ansible-relayor"}]