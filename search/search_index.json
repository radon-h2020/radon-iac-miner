{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"How to install From PyPI : pip install repository-miner From source code: git clone https://github.com/radon-h2020/radon-repository-miner.git cd radon-repository-miner pip install -r requirements.txt pip install . How to test To avoid affecting the current environment, it is strongly recommended to create and activate a virtual environment: sudo apt install python3-venv python3 -m venv repo-miner-env source repo-miner-env/bin/activate Setup environment variables: export GITHUB_ACCESS_TOKEN=************ export GITLAB_ACCESS_TOKEN=************ Then pip install pytest pip install -r requirements.txt pip install . unzip test_data.zip -d . pytest tests/","title":"Quick Start"},{"location":"#how-to-install","text":"From PyPI : pip install repository-miner From source code: git clone https://github.com/radon-h2020/radon-repository-miner.git cd radon-repository-miner pip install -r requirements.txt pip install .","title":"How to install"},{"location":"#how-to-test","text":"To avoid affecting the current environment, it is strongly recommended to create and activate a virtual environment: sudo apt install python3-venv python3 -m venv repo-miner-env source repo-miner-env/bin/activate Setup environment variables: export GITHUB_ACCESS_TOKEN=************ export GITLAB_ACCESS_TOKEN=************ Then pip install pytest pip install -r requirements.txt pip install . unzip test_data.zip -d . pytest tests/","title":"How to test"},{"location":"about/","text":"","title":"About"},{"location":"apis/","text":"API Reference self.exclude_commits: List[str] - There may be several false-positives among the identified fixing-commits. This variable is used to set up in advance the commits to exclude during the mining. self.exclude_fixed_files: Lists[FixedFile] - There may be several false-positives among the identified fixed-files. This variable is used to set up in advance the files to exclude during the mining for a given commit. self.fixing_commits: List[str] - Contains the commits that are supposed to fix a bug according to the labels and regex passed by the user. These are set up during the mining, although it can be defined in advance to speed up the mining avoiding to analyze commits that are already present here. self.fixed_files: List[FixedFiles] - Contains the files modified i fixing-commits. discard_non_iac_fixing_commits(commits: List[str]) - Given a list of commits, discard commits that do not modify IaC files (i.e., Ansible). get_labels() -> Set[str] - Get al the issue labels in the repository. get_closed_issues(label: str) -> Set[Issue] - Get all the closed issues with a given label. get_fixing_commits_from_closed_issues(labels: Set[str]) -> List[str] - Collect fixing-commit hashes by analyzing closed issues related to bugs. get_fixing_commits_from_commit_messages(regex: str) -> List[str] - Collect fixing-commit hashes by analyzing commit messages. get_fixed_files() -> List[FixedFile] - Collect the IaC files involved in fixing-commits and for each of them identify the bug-inducing-commit. label() -> Generator[LabeledFile, None, None] - Start labeling process.","title":"APIs"},{"location":"apis/#api-reference","text":"self.exclude_commits: List[str] - There may be several false-positives among the identified fixing-commits. This variable is used to set up in advance the commits to exclude during the mining. self.exclude_fixed_files: Lists[FixedFile] - There may be several false-positives among the identified fixed-files. This variable is used to set up in advance the files to exclude during the mining for a given commit. self.fixing_commits: List[str] - Contains the commits that are supposed to fix a bug according to the labels and regex passed by the user. These are set up during the mining, although it can be defined in advance to speed up the mining avoiding to analyze commits that are already present here. self.fixed_files: List[FixedFiles] - Contains the files modified i fixing-commits. discard_non_iac_fixing_commits(commits: List[str]) - Given a list of commits, discard commits that do not modify IaC files (i.e., Ansible). get_labels() -> Set[str] - Get al the issue labels in the repository. get_closed_issues(label: str) -> Set[Issue] - Get all the closed issues with a given label. get_fixing_commits_from_closed_issues(labels: Set[str]) -> List[str] - Collect fixing-commit hashes by analyzing closed issues related to bugs. get_fixing_commits_from_commit_messages(regex: str) -> List[str] - Collect fixing-commit hashes by analyzing commit messages. get_fixed_files() -> List[FixedFile] - Collect the IaC files involved in fixing-commits and for each of them identify the bug-inducing-commit. label() -> Generator[LabeledFile, None, None] - Start labeling process.","title":"API Reference"},{"location":"cli/getting_started/","text":"Getting Started usage: repo-miner [-h] [-v] {mine,extract-metrics} ... A Python library and command-line tool to mine Infrastructure-as-Code based software repositories. positional arguments: {mine,extract-metrics} mine Mine fixing- and clean- files extract-metrics Extract metrics from the mined files optional arguments: -h, --help show this help message and exit -v, --version show program's version number and exit","title":"Getting Started"},{"location":"cli/getting_started/#getting-started","text":"usage: repo-miner [-h] [-v] {mine,extract-metrics} ... A Python library and command-line tool to mine Infrastructure-as-Code based software repositories. positional arguments: {mine,extract-metrics} mine Mine fixing- and clean- files extract-metrics Extract metrics from the mined files optional arguments: -h, --help show this help message and exit -v, --version show program's version number and exit","title":"Getting Started"},{"location":"cli/metrics/","text":"Extract metrics usage: repo-miner extract-metrics [-h] [--verbose] path_to_repo src {ansible,tosca} {product,process,delta,all} {release,commit} dest positional arguments: path_to_repo the absolute path to a cloned repository or the url to a remote repository src the json report generated from a previous run of 'repo-miner mine' {ansible,tosca} extract metrics for Ansible or Tosca {product,process,delta,all} the metrics to extract {release,commit} extract metrics at each release or commit dest destination folder to save the resulting csv optional arguments: -h, --help show this help message and exit --verbose show log Output This command generate a metrics.csv file in folder dest . Requirements If passing a remote path_to_repo , such as https://github.com/radon-h2020/radon-repository-miner.git , you MUST add the following to your environment variables: TMP_REPOSITORIES_DIR=<path/to/tmp/repositories/> to temporary clone the remote repository for the analysis. Please, note that the repository will be cloned in thisa folder but not deleted. The latter step is left to the user, when and if needed. The following metrics can be extracted per each release or commit : product : product metrics measure structural characteristics of code scripts (such as lines of code , number of conditions , number of tasks , etc.), and are extracted using radon-ansible-metrics and radon-tosca-metrics for ansible and tosca , respectively. process : process metrics measure aspects of the development process rather than the characteristic of code (such as the number of commits , number of files committed together , added and removed lines , etc.), and are extracted by the ishepard/pydriller . delta : delta metrics are calculated as the difference of each metric between two successive releases or commits. Example Follow the mine example in the previous section to generate the failure-prone-files.json . Afterwards, extract metrics as follow. Using Docker Extract metrics docker run -v /tmp/repo-miner:/app repo-miner:latest repo-miner extract-metrics repo-miner-env/tmp/ansible.motd ./failure_prone_files.json ansible all release . --verbose or (passing the url to repository) docker run -v /tmp/repo-miner:/app repo-miner:latest repo-miner extract-metrics https://github.com/adriagalin/ansible.motd.git ./failure_prone_files.json ansible all release . --verbose Access reports ls /tmp/repo-miner Using the CLI on local machine Move (or stay) in the working directory cd radon-example Extract metrics repo-miner extract-metrics repo-miner-env/tmp/ansible.motd ./failure_prone_files.json ansible all release . --verbose Access results ls . You can now see that metrics.csv has been added to the folder: In both cases, you should get a similar output: Extracting metrics from repo-miner-env/tmp/ansible.motd using report ./failure_prone_files.json [started at: 17:34] Setting up ansible metrics extractor Extracting all metrics Metrics saved at ./metrics.csv [completed at: 17:35] The results directory should contain the following files: failure-prone-files.html failure-prone-files.json metrics.csv","title":"Extract metrics"},{"location":"cli/metrics/#extract-metrics","text":"usage: repo-miner extract-metrics [-h] [--verbose] path_to_repo src {ansible,tosca} {product,process,delta,all} {release,commit} dest positional arguments: path_to_repo the absolute path to a cloned repository or the url to a remote repository src the json report generated from a previous run of 'repo-miner mine' {ansible,tosca} extract metrics for Ansible or Tosca {product,process,delta,all} the metrics to extract {release,commit} extract metrics at each release or commit dest destination folder to save the resulting csv optional arguments: -h, --help show this help message and exit --verbose show log Output This command generate a metrics.csv file in folder dest . Requirements If passing a remote path_to_repo , such as https://github.com/radon-h2020/radon-repository-miner.git , you MUST add the following to your environment variables: TMP_REPOSITORIES_DIR=<path/to/tmp/repositories/> to temporary clone the remote repository for the analysis. Please, note that the repository will be cloned in thisa folder but not deleted. The latter step is left to the user, when and if needed. The following metrics can be extracted per each release or commit : product : product metrics measure structural characteristics of code scripts (such as lines of code , number of conditions , number of tasks , etc.), and are extracted using radon-ansible-metrics and radon-tosca-metrics for ansible and tosca , respectively. process : process metrics measure aspects of the development process rather than the characteristic of code (such as the number of commits , number of files committed together , added and removed lines , etc.), and are extracted by the ishepard/pydriller . delta : delta metrics are calculated as the difference of each metric between two successive releases or commits.","title":"Extract metrics"},{"location":"cli/metrics/#example","text":"Follow the mine example in the previous section to generate the failure-prone-files.json . Afterwards, extract metrics as follow.","title":"Example"},{"location":"cli/metrics/#using-docker","text":"Extract metrics docker run -v /tmp/repo-miner:/app repo-miner:latest repo-miner extract-metrics repo-miner-env/tmp/ansible.motd ./failure_prone_files.json ansible all release . --verbose or (passing the url to repository) docker run -v /tmp/repo-miner:/app repo-miner:latest repo-miner extract-metrics https://github.com/adriagalin/ansible.motd.git ./failure_prone_files.json ansible all release . --verbose Access reports ls /tmp/repo-miner","title":"Using Docker"},{"location":"cli/metrics/#using-the-cli-on-local-machine","text":"Move (or stay) in the working directory cd radon-example Extract metrics repo-miner extract-metrics repo-miner-env/tmp/ansible.motd ./failure_prone_files.json ansible all release . --verbose Access results ls . You can now see that metrics.csv has been added to the folder: In both cases, you should get a similar output: Extracting metrics from repo-miner-env/tmp/ansible.motd using report ./failure_prone_files.json [started at: 17:34] Setting up ansible metrics extractor Extracting all metrics Metrics saved at ./metrics.csv [completed at: 17:35] The results directory should contain the following files: failure-prone-files.html failure-prone-files.json metrics.csv","title":"Using the CLI on local machine"},{"location":"cli/mine/","text":"Mine usage: repo-miner mine [-h] [--branch BRANCH] [--exclude-commits EXCLUDE_COMMITS] [--exclude-files EXCLUDE_FILES] [--verbose] {fixing-commits,fixed-files,failure-prone-files} {github,gitlab} {ansible,tosca} repository dest positional arguments: {fixing-commits,fixed-files,failure-prone-files} the information to mine {github,gitlab} the source code versioning host {ansible,tosca} mine only commits modifying files of this language repository the repository full name: <onwer/name> (e.g., radon-h2020/radon-repository-miner) dest destination folder for the reports optional arguments: -h, --help show this help message and exit -b, --branch BRANCH the repository branch to mine (default: master) --exclude-commits EXCLUDE_COMMITS the path to a JSON file containing the list of commit hashes to exclude --exclude-files EXCLUDE_FILES the path to a JSON file containing the list of FixedFiles to exclude --verbose show log Output Running this command will generate the following report files: dest/failure-prone-files.html dest/failure-prone-files.json File failure-prone-files.json is a list of dictionaries containing the filepath relative to the repository root, the commit hash at which the file was failure-prone, and the respective fixing-commit hash. Requirements To properly use this command you MUST add the following to your environment variables: GITHUB_ACCESS_TOKEN=<paste your token here> if you are using the github argument. See how to create a personal access token here . GITLAB_ACCESS_TOKEN=<paste your token here> if you are using the gitlab argument. See how to create a personal access token here . TMP_REPOSITORIES_DIR=<path/to/tmp/repositories/> to temporary clone the remote repository for analysis. Please, note that the repository will be cloned in this folder but not deleted. The latter step is left to the user, when and if needed. Example Using Docker Setup environment variables export GITHUB_ACCESS_TOKEN=*************** export GITLAB_ACCESS_TOKEN=*************** Pull the Docker image docker pull radonconsortium/repo-miner:latest Create a folder to share results mkdir /tmp/repo-miner Mine (using github) docker run -v /tmp/repo-miner:/app -e GITHUB_ACCESS_TOKEN=$GITHUB_ACCESS_TOKEN repo-miner:latest repo-miner mine failure-prone-files github ansible adriagalin/ansible.motd . --verbose (using gitlab) docker run -v /tmp/repo-miner:/app -e GITLAB_ACCESS_TOKEN=$GITHUB_ACCESS_TOKEN repo-miner:latest repo-miner mine failure-prone-files github ansible adriagalin/ansible.motd . --verbose Access reports ls /tmp/repo-miner Using the CLI on local machine Setup environment variables export GITHUB_ACCESS_TOKEN=*************** export GITLAB_ACCESS_TOKEN=*************** export TMP_REPOSITORIES_DIR=/tmp/ Create a working directory and move there mkdir radon-example && cd radon-example (Optional) Create a virtualenv to avoid affecting the original environment sudo apt install python3-venv python3 -m venv repo-miner-env source repo-miner-env/bin/activate Install the package pip install repository-miner Mine repo-miner mine failure-prone-files github ansible adriagalin/ansible.motd . --verbose Access reports ls . (Recall the working directory is radon-example ) In both cases you should get a similar output: Mining adriagalin/ansible.motd [started at: 15:29] Identifying fixing-commits from closed issues related to bugs Identifying fixing-commits from commit messages Saving fixing-commits JSON created at ./fixing-commits.json Identifying ansible files modified in fixing-commits Saving fixed-files JSON created at ./fixed-files.json Identifying and labeling failure-prone files Saving failure-prone files JSON created at ./failure-prone-files.json","title":"Mine"},{"location":"cli/mine/#mine","text":"usage: repo-miner mine [-h] [--branch BRANCH] [--exclude-commits EXCLUDE_COMMITS] [--exclude-files EXCLUDE_FILES] [--verbose] {fixing-commits,fixed-files,failure-prone-files} {github,gitlab} {ansible,tosca} repository dest positional arguments: {fixing-commits,fixed-files,failure-prone-files} the information to mine {github,gitlab} the source code versioning host {ansible,tosca} mine only commits modifying files of this language repository the repository full name: <onwer/name> (e.g., radon-h2020/radon-repository-miner) dest destination folder for the reports optional arguments: -h, --help show this help message and exit -b, --branch BRANCH the repository branch to mine (default: master) --exclude-commits EXCLUDE_COMMITS the path to a JSON file containing the list of commit hashes to exclude --exclude-files EXCLUDE_FILES the path to a JSON file containing the list of FixedFiles to exclude --verbose show log Output Running this command will generate the following report files: dest/failure-prone-files.html dest/failure-prone-files.json File failure-prone-files.json is a list of dictionaries containing the filepath relative to the repository root, the commit hash at which the file was failure-prone, and the respective fixing-commit hash. Requirements To properly use this command you MUST add the following to your environment variables: GITHUB_ACCESS_TOKEN=<paste your token here> if you are using the github argument. See how to create a personal access token here . GITLAB_ACCESS_TOKEN=<paste your token here> if you are using the gitlab argument. See how to create a personal access token here . TMP_REPOSITORIES_DIR=<path/to/tmp/repositories/> to temporary clone the remote repository for analysis. Please, note that the repository will be cloned in this folder but not deleted. The latter step is left to the user, when and if needed.","title":"Mine"},{"location":"cli/mine/#example","text":"","title":"Example"},{"location":"cli/mine/#using-docker","text":"Setup environment variables export GITHUB_ACCESS_TOKEN=*************** export GITLAB_ACCESS_TOKEN=*************** Pull the Docker image docker pull radonconsortium/repo-miner:latest Create a folder to share results mkdir /tmp/repo-miner Mine (using github) docker run -v /tmp/repo-miner:/app -e GITHUB_ACCESS_TOKEN=$GITHUB_ACCESS_TOKEN repo-miner:latest repo-miner mine failure-prone-files github ansible adriagalin/ansible.motd . --verbose (using gitlab) docker run -v /tmp/repo-miner:/app -e GITLAB_ACCESS_TOKEN=$GITHUB_ACCESS_TOKEN repo-miner:latest repo-miner mine failure-prone-files github ansible adriagalin/ansible.motd . --verbose Access reports ls /tmp/repo-miner","title":"Using Docker"},{"location":"cli/mine/#using-the-cli-on-local-machine","text":"Setup environment variables export GITHUB_ACCESS_TOKEN=*************** export GITLAB_ACCESS_TOKEN=*************** export TMP_REPOSITORIES_DIR=/tmp/ Create a working directory and move there mkdir radon-example && cd radon-example (Optional) Create a virtualenv to avoid affecting the original environment sudo apt install python3-venv python3 -m venv repo-miner-env source repo-miner-env/bin/activate Install the package pip install repository-miner Mine repo-miner mine failure-prone-files github ansible adriagalin/ansible.motd . --verbose Access reports ls . (Recall the working directory is radon-example ) In both cases you should get a similar output: Mining adriagalin/ansible.motd [started at: 15:29] Identifying fixing-commits from closed issues related to bugs Identifying fixing-commits from commit messages Saving fixing-commits JSON created at ./fixing-commits.json Identifying ansible files modified in fixing-commits Saving fixed-files JSON created at ./fixed-files.json Identifying and labeling failure-prone files Saving failure-prone files JSON created at ./failure-prone-files.json","title":"Using the CLI on local machine"}]}