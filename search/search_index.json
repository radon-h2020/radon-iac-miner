{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"How to install From PyPI : pip install repository-miner From source code: git clone https://github.com/radon-h2020/radon-repository-miner.git cd radon-repository-miner pip install -r requirements.txt pip install . How to test pip install pytest unzip test_data.zip -d . pytest tests/","title":"Quick Start"},{"location":"#how-to-install","text":"From PyPI : pip install repository-miner From source code: git clone https://github.com/radon-h2020/radon-repository-miner.git cd radon-repository-miner pip install -r requirements.txt pip install .","title":"How to install"},{"location":"#how-to-test","text":"pip install pytest unzip test_data.zip -d . pytest tests/","title":"How to test"},{"location":"about/","text":"","title":"About"},{"location":"apis/","text":"API Reference self.exclude_commits: List[str] - There may be several false-positives among the identified fixing-commits. This variable is used to set up in advance the commits to exclude during the mining. self.exclude_fixing_files: Lists[FixingFile] - There may be several false-positives among the identified fixing-files. This variable is used to set up in advance the files to exclude during the mining for a given commit. self.fixing_commits: List[str] - Contains the commits that are supposed to fix a bug according to the labels and regex passed by the user. These are set up during the mining, although it can be defined in advance to speed up the mining avoiding to analyze commits that are already present here. self.fixing_files: List[FixingFiles] - Contains the files modified i fixing-commits. discard_non_iac_fixing_commits(commits: List[str]) - Given a list of commits, discard commits that do not modify IaC files (i.e., Ansible). get_labels() -> Set[str] - Get al the issue labels in the repository. get_closed_issues(label: str) -> Set[Issue] - Get all the closed issues with a given label. get_fixing_commits_from_closed_issues(labels: Set[str]) -> List[str] - Collect fixing-commit hashes by analyzing closed issues related to bugs. get_fixing_commits_from_commit_messages(regex: str) -> List[str] - Collect fixing-commit hashes by analyzing commit messages. get_fixing_files() -> List[FixingFile] - Collect the IaC files involved in fixing-commits and for each of them identify the bug-inducing-commit. label() -> Generator[LabeledFile, None, None] - Start labeling process. mine(labels: Set[str] = None, regex: str = None) -> Generator[LabeledFile, None, None] - Mine the repository.","title":"APIs"},{"location":"apis/#api-reference","text":"self.exclude_commits: List[str] - There may be several false-positives among the identified fixing-commits. This variable is used to set up in advance the commits to exclude during the mining. self.exclude_fixing_files: Lists[FixingFile] - There may be several false-positives among the identified fixing-files. This variable is used to set up in advance the files to exclude during the mining for a given commit. self.fixing_commits: List[str] - Contains the commits that are supposed to fix a bug according to the labels and regex passed by the user. These are set up during the mining, although it can be defined in advance to speed up the mining avoiding to analyze commits that are already present here. self.fixing_files: List[FixingFiles] - Contains the files modified i fixing-commits. discard_non_iac_fixing_commits(commits: List[str]) - Given a list of commits, discard commits that do not modify IaC files (i.e., Ansible). get_labels() -> Set[str] - Get al the issue labels in the repository. get_closed_issues(label: str) -> Set[Issue] - Get all the closed issues with a given label. get_fixing_commits_from_closed_issues(labels: Set[str]) -> List[str] - Collect fixing-commit hashes by analyzing closed issues related to bugs. get_fixing_commits_from_commit_messages(regex: str) -> List[str] - Collect fixing-commit hashes by analyzing commit messages. get_fixing_files() -> List[FixingFile] - Collect the IaC files involved in fixing-commits and for each of them identify the bug-inducing-commit. label() -> Generator[LabeledFile, None, None] - Start labeling process. mine(labels: Set[str] = None, regex: str = None) -> Generator[LabeledFile, None, None] - Mine the repository.","title":"API Reference"},{"location":"cli/getting_started/","text":"Getting Started radon-miner -h usage: radon-miner [-h] [-v] {mine,extract-metrics} ... A Python library and command-line tool to mine Infrastructure-as-Code based software repositories. positional arguments: {mine,extract-metrics} mine Mine fixing- and clean- files extract-metrics Extract metrics from the mined files optional arguments: -h, --help show this help message and exit -v, --version show program's version number and exit","title":"Getting Started"},{"location":"cli/getting_started/#getting-started","text":"radon-miner -h usage: radon-miner [-h] [-v] {mine,extract-metrics} ... A Python library and command-line tool to mine Infrastructure-as-Code based software repositories. positional arguments: {mine,extract-metrics} mine Mine fixing- and clean- files extract-metrics Extract metrics from the mined files optional arguments: -h, --help show this help message and exit -v, --version show program's version number and exit","title":"Getting Started"},{"location":"cli/metrics/","text":"Extract metrics radon-miner extract-metrics -h usage: radon-miner extract-metrics [-h] path_to_repo src {ansible,tosca} {product,process,delta,all} {release,commit} dest positional arguments: path_to_repo the local path to the git repository src the json report generated from a previous run of 'radon-miner mine' {ansible,tosca} extract metrics for Ansible or Tosca {product,process,delta,all} the metrics to extract {release,commit} extract metrics at each release or commit dest destination folder to save the resulting csv optional arguments: -h, --help show this help message and exit path_to_repo The path to the cloned repository. This is mandatory to access the file content and to extract metrics. src The path to a json report generated by a previous run of radon-miner mine ... . language {ansible, tosca} Extract metrics related to this language. metrics {product, commit} Extract metrics at each release or at each commit . Product metrics are extracted by radon-ansible-metrics and radon-tosca-metrics for Ansible and Tosca, respectively. Process metrics are extracted by the ishepard/pydriller . Delta metrics are calculated as the difference of each metric between two successive releases or commits (see next section for more information). at {release, commit} Extract metrics at each release or at each commit . dest The folder where to save the resulting file metrics.csv .","title":"Extract metrics"},{"location":"cli/metrics/#extract-metrics","text":"radon-miner extract-metrics -h usage: radon-miner extract-metrics [-h] path_to_repo src {ansible,tosca} {product,process,delta,all} {release,commit} dest positional arguments: path_to_repo the local path to the git repository src the json report generated from a previous run of 'radon-miner mine' {ansible,tosca} extract metrics for Ansible or Tosca {product,process,delta,all} the metrics to extract {release,commit} extract metrics at each release or commit dest destination folder to save the resulting csv optional arguments: -h, --help show this help message and exit","title":"Extract metrics"},{"location":"cli/metrics/#path_to_repo","text":"The path to the cloned repository. This is mandatory to access the file content and to extract metrics.","title":"path_to_repo"},{"location":"cli/metrics/#src","text":"The path to a json report generated by a previous run of radon-miner mine ... .","title":"src"},{"location":"cli/metrics/#language-ansible-tosca","text":"Extract metrics related to this language.","title":"language {ansible, tosca}"},{"location":"cli/metrics/#metrics-product-commit","text":"Extract metrics at each release or at each commit . Product metrics are extracted by radon-ansible-metrics and radon-tosca-metrics for Ansible and Tosca, respectively. Process metrics are extracted by the ishepard/pydriller . Delta metrics are calculated as the difference of each metric between two successive releases or commits (see next section for more information).","title":"metrics {product, commit}"},{"location":"cli/metrics/#at-release-commit","text":"Extract metrics at each release or at each commit .","title":"at {release, commit}"},{"location":"cli/metrics/#dest","text":"The folder where to save the resulting file metrics.csv .","title":"dest"},{"location":"cli/mine/","text":"Mine radon-miner -h usage: radon-miner mine [-h] [--branch BRANCH] [--verbose] path_to_repo {github,gitlab} {ansible,tosca} full_name_or_id dest positional arguments: path_to_repo the local path to the git repository {github,gitlab} the source code versioning host {ansible,tosca} mine only commits modifying files of this language full_name_or_id the repository full name or id (e.g., radon-h2020/radon-repository-miner dest destination folder for the reports optional arguments: -h, --help show this help message and exit --branch BRANCH the repository branch to mine (default: master) --verbose show log path_to_repo The path to the cloned repository. This is mandatory to execute the SZZ algorithm to identify bug-inducing-commits. host {github, gitlab} The SVM hosting platform. Currently, Github and Gitlab are supported. language {ansible, tosca} The language to consider during mining. Currently, Ansible and Tosca are supported. full_name_or_id The full name of the repository ( <owner/name> ) or its id (e.g., radon-h2020/radon-repository-miner ). dest The path to a folder where to save the reports: an HTML report accessible at path/to/reports/report.html a JSON report accessible at path/to/reports/report.json Examples Clone the adriagalin/ansible.motd repository: git clone https://github.com/adriagalin/ansible.motd.git From the same folder, create a folder for reports: mkdir mining_reports/ and run the command: radon-miner ansible.motd github ansible adriagalin/ansible.motd mining_reports Access token: ****** As can be seen, the tool will prompt the user for the Github access token (or Gitlab access tokne if option gitlab ). See how to get one for Github and Gitlab . Copy-pasting the token and pressing enter will start the mining. Note You might avoid this step (for example because want to automate the process in CI/CD). In that case, add GITHUB_ACCESS_TOKEN and GITLAB_ACCESS_TOKEN in the environment variables by: export GITHUB_ACCESS_TOKEN=*********** export GITLAB_ACCESS_TOKEN=*********** You can now access the reports: cd mining_reports/ ls report.html report.json","title":"Mine"},{"location":"cli/mine/#mine","text":"radon-miner -h usage: radon-miner mine [-h] [--branch BRANCH] [--verbose] path_to_repo {github,gitlab} {ansible,tosca} full_name_or_id dest positional arguments: path_to_repo the local path to the git repository {github,gitlab} the source code versioning host {ansible,tosca} mine only commits modifying files of this language full_name_or_id the repository full name or id (e.g., radon-h2020/radon-repository-miner dest destination folder for the reports optional arguments: -h, --help show this help message and exit --branch BRANCH the repository branch to mine (default: master) --verbose show log","title":"Mine"},{"location":"cli/mine/#path_to_repo","text":"The path to the cloned repository. This is mandatory to execute the SZZ algorithm to identify bug-inducing-commits.","title":"path_to_repo"},{"location":"cli/mine/#host-github-gitlab","text":"The SVM hosting platform. Currently, Github and Gitlab are supported.","title":"host {github, gitlab}"},{"location":"cli/mine/#language-ansible-tosca","text":"The language to consider during mining. Currently, Ansible and Tosca are supported.","title":"language {ansible, tosca}"},{"location":"cli/mine/#full_name_or_id","text":"The full name of the repository ( <owner/name> ) or its id (e.g., radon-h2020/radon-repository-miner ).","title":"full_name_or_id"},{"location":"cli/mine/#dest","text":"The path to a folder where to save the reports: an HTML report accessible at path/to/reports/report.html a JSON report accessible at path/to/reports/report.json","title":"dest"},{"location":"cli/mine/#examples","text":"Clone the adriagalin/ansible.motd repository: git clone https://github.com/adriagalin/ansible.motd.git From the same folder, create a folder for reports: mkdir mining_reports/ and run the command: radon-miner ansible.motd github ansible adriagalin/ansible.motd mining_reports Access token: ****** As can be seen, the tool will prompt the user for the Github access token (or Gitlab access tokne if option gitlab ). See how to get one for Github and Gitlab . Copy-pasting the token and pressing enter will start the mining. Note You might avoid this step (for example because want to automate the process in CI/CD). In that case, add GITHUB_ACCESS_TOKEN and GITLAB_ACCESS_TOKEN in the environment variables by: export GITHUB_ACCESS_TOKEN=*********** export GITLAB_ACCESS_TOKEN=*********** You can now access the reports: cd mining_reports/ ls report.html report.json","title":"Examples"}]}