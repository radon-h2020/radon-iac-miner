{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"How to install From PyPI : pip install repository-miner From source code: git clone https://github.com/radon-h2020/radon-repository-miner.git cd radon-repository-miner pip install -r requirements.txt pip install . How to test To avoid affecting the current environment, it is strongly recommended to create and activate a virtual environment: sudo apt install python3-venv python3 -m venv radon-miner-env source radon-miner-env/bin/activate Setup environment variables: export GITHUB_ACCESS_TOKEN=************ export GITLAB_ACCESS_TOKEN=************ Then pip install pytest pip install -r requirements.txt pip install . unzip test_data.zip -d . pytest tests/","title":"Quick Start"},{"location":"#how-to-install","text":"From PyPI : pip install repository-miner From source code: git clone https://github.com/radon-h2020/radon-repository-miner.git cd radon-repository-miner pip install -r requirements.txt pip install .","title":"How to install"},{"location":"#how-to-test","text":"To avoid affecting the current environment, it is strongly recommended to create and activate a virtual environment: sudo apt install python3-venv python3 -m venv radon-miner-env source radon-miner-env/bin/activate Setup environment variables: export GITHUB_ACCESS_TOKEN=************ export GITLAB_ACCESS_TOKEN=************ Then pip install pytest pip install -r requirements.txt pip install . unzip test_data.zip -d . pytest tests/","title":"How to test"},{"location":"about/","text":"","title":"About"},{"location":"apis/","text":"API Reference self.exclude_commits: List[str] - There may be several false-positives among the identified fixing-commits. This variable is used to set up in advance the commits to exclude during the mining. self.exclude_fixing_files: Lists[FixingFile] - There may be several false-positives among the identified fixing-files. This variable is used to set up in advance the files to exclude during the mining for a given commit. self.fixing_commits: List[str] - Contains the commits that are supposed to fix a bug according to the labels and regex passed by the user. These are set up during the mining, although it can be defined in advance to speed up the mining avoiding to analyze commits that are already present here. self.fixing_files: List[FixingFiles] - Contains the files modified i fixing-commits. discard_non_iac_fixing_commits(commits: List[str]) - Given a list of commits, discard commits that do not modify IaC files (i.e., Ansible). get_labels() -> Set[str] - Get al the issue labels in the repository. get_closed_issues(label: str) -> Set[Issue] - Get all the closed issues with a given label. get_fixing_commits_from_closed_issues(labels: Set[str]) -> List[str] - Collect fixing-commit hashes by analyzing closed issues related to bugs. get_fixing_commits_from_commit_messages(regex: str) -> List[str] - Collect fixing-commit hashes by analyzing commit messages. get_fixing_files() -> List[FixingFile] - Collect the IaC files involved in fixing-commits and for each of them identify the bug-inducing-commit. label() -> Generator[LabeledFile, None, None] - Start labeling process.","title":"APIs"},{"location":"apis/#api-reference","text":"self.exclude_commits: List[str] - There may be several false-positives among the identified fixing-commits. This variable is used to set up in advance the commits to exclude during the mining. self.exclude_fixing_files: Lists[FixingFile] - There may be several false-positives among the identified fixing-files. This variable is used to set up in advance the files to exclude during the mining for a given commit. self.fixing_commits: List[str] - Contains the commits that are supposed to fix a bug according to the labels and regex passed by the user. These are set up during the mining, although it can be defined in advance to speed up the mining avoiding to analyze commits that are already present here. self.fixing_files: List[FixingFiles] - Contains the files modified i fixing-commits. discard_non_iac_fixing_commits(commits: List[str]) - Given a list of commits, discard commits that do not modify IaC files (i.e., Ansible). get_labels() -> Set[str] - Get al the issue labels in the repository. get_closed_issues(label: str) -> Set[Issue] - Get all the closed issues with a given label. get_fixing_commits_from_closed_issues(labels: Set[str]) -> List[str] - Collect fixing-commit hashes by analyzing closed issues related to bugs. get_fixing_commits_from_commit_messages(regex: str) -> List[str] - Collect fixing-commit hashes by analyzing commit messages. get_fixing_files() -> List[FixingFile] - Collect the IaC files involved in fixing-commits and for each of them identify the bug-inducing-commit. label() -> Generator[LabeledFile, None, None] - Start labeling process.","title":"API Reference"},{"location":"cli/getting_started/","text":"Getting Started radon-miner -h usage: radon-miner [-h] [-v] {mine,extract-metrics} ... A Python library and command-line tool to mine Infrastructure-as-Code based software repositories. positional arguments: {mine,extract-metrics} mine Mine fixing- and clean- files extract-metrics Extract metrics from the mined files optional arguments: -h, --help show this help message and exit -v, --version show program's version number and exit","title":"Getting Started"},{"location":"cli/getting_started/#getting-started","text":"radon-miner -h usage: radon-miner [-h] [-v] {mine,extract-metrics} ... A Python library and command-line tool to mine Infrastructure-as-Code based software repositories. positional arguments: {mine,extract-metrics} mine Mine fixing- and clean- files extract-metrics Extract metrics from the mined files optional arguments: -h, --help show this help message and exit -v, --version show program's version number and exit","title":"Getting Started"},{"location":"cli/metrics/","text":"Extract metrics usage: radon-miner extract-metrics [-h] [--verbose] path_to_repo src {ansible,tosca} {product,process,delta,all} {release,commit} dest positional arguments: path_to_repo the absolute path to a cloned repository or the url to a remote repository src the json report generated from a previous run of 'radon-miner mine' {ansible,tosca} extract metrics for Ansible or Tosca {product,process,delta,all} the metrics to extract {release,commit} extract metrics at each release or commit dest destination folder to save the resulting csv optional arguments: -h, --help show this help message and exit --verbose show log Output This command generate a metrics.csv file in folder dest . Requirements If passing a remote path_to_repo , such as https://github.com/radon-h2020/radon-repository-miner.git , you MUST add the following to your environment variables: TMP_REPOSITORIES_DIR=<path/to/tmp/repositories/> to temporary clone the remote repository for the analysis. Please, note that the repository will be cloned in thisa folder but not deleted. The latter step is left to the user, when and if needed. The following metrics can be extracted per each release or commit : product : product metrics measure structural characteristics of code scripts (such as lines of code , number of conditions , number of tasks , etc.), and are extracted using radon-ansible-metrics and radon-tosca-metrics for ansible and tosca , respectively. process : process metrics measure aspects of the development process rather than the characteristic of code (such as the number of commits , number of files committed together , added and removed lines , etc.), and are extracted by the ishepard/pydriller . delta : delta metrics are calculated as the difference of each metric between two successive releases or commits. Examples Follows one of the examples in the previous section to generate the failure-prone-files.json . Afterwards, run: radon-miner extract-metrics radon-miner-env/tmp/ansible.motd ./failure_prone_files.json ansible all release . --verbose You should get a similar output: Extracting metrics from radon-miner-env/tmp/ansible.motd using report ./failure_prone_files.json [started at: 17:34] Setting up ansible metrics extractor Extracting all metrics Metrics saved at ./metrics.csv [completed at: 17:35] You can now see that metrics.csv has been added to the folder: ls failure-prone-files.html failure-prone-files.json metrics.csv","title":"Extract metrics"},{"location":"cli/metrics/#extract-metrics","text":"usage: radon-miner extract-metrics [-h] [--verbose] path_to_repo src {ansible,tosca} {product,process,delta,all} {release,commit} dest positional arguments: path_to_repo the absolute path to a cloned repository or the url to a remote repository src the json report generated from a previous run of 'radon-miner mine' {ansible,tosca} extract metrics for Ansible or Tosca {product,process,delta,all} the metrics to extract {release,commit} extract metrics at each release or commit dest destination folder to save the resulting csv optional arguments: -h, --help show this help message and exit --verbose show log Output This command generate a metrics.csv file in folder dest . Requirements If passing a remote path_to_repo , such as https://github.com/radon-h2020/radon-repository-miner.git , you MUST add the following to your environment variables: TMP_REPOSITORIES_DIR=<path/to/tmp/repositories/> to temporary clone the remote repository for the analysis. Please, note that the repository will be cloned in thisa folder but not deleted. The latter step is left to the user, when and if needed. The following metrics can be extracted per each release or commit : product : product metrics measure structural characteristics of code scripts (such as lines of code , number of conditions , number of tasks , etc.), and are extracted using radon-ansible-metrics and radon-tosca-metrics for ansible and tosca , respectively. process : process metrics measure aspects of the development process rather than the characteristic of code (such as the number of commits , number of files committed together , added and removed lines , etc.), and are extracted by the ishepard/pydriller . delta : delta metrics are calculated as the difference of each metric between two successive releases or commits.","title":"Extract metrics"},{"location":"cli/metrics/#examples","text":"Follows one of the examples in the previous section to generate the failure-prone-files.json . Afterwards, run: radon-miner extract-metrics radon-miner-env/tmp/ansible.motd ./failure_prone_files.json ansible all release . --verbose You should get a similar output: Extracting metrics from radon-miner-env/tmp/ansible.motd using report ./failure_prone_files.json [started at: 17:34] Setting up ansible metrics extractor Extracting all metrics Metrics saved at ./metrics.csv [completed at: 17:35] You can now see that metrics.csv has been added to the folder: ls failure-prone-files.html failure-prone-files.json metrics.csv","title":"Examples"},{"location":"cli/mine/","text":"Mine usage: radon-miner mine [-h] [--branch BRANCH] [--verbose] {github,gitlab} {ansible,tosca} repository dest positional arguments: {github,gitlab} the source code versioning host {ansible,tosca} mine only commits modifying files of this language repository the repository full name: <onwer/name> (e.g., radon-h2020/radon-repository-miner) dest destination folder for the reports optional arguments: -h, --help show this help message and exit --branch BRANCH the repository branch to mine (default: master) --verbose show log Output Running this command will generate the following report files: dest/failure-prone-files.html dest/failure-prone-files.json File failure-prone-files.json is a list of dictionaries containing the filepath relative to the repository root, the commit hash at which the file was failure-prone, and the respective fixing-commit hash. Requirements To properly use this command you MUST add the following to your environment variables: GITHUB_ACCESS_TOKEN=<paste your token here> if you are using the github argument. See how to create a personal access token here . GITLAB_ACCESS_TOKEN=<paste your token here> if you are using the gitlab argument. See how to create a personal access token here . TMP_REPOSITORIES_DIR=<path/to/tmp/repositories/> to temporary clone the remote repository for analysis. Please, note that the repository will be cloned in this folder but not deleted. The latter step is left to the user, when and if needed. Examples Mine repository (using a venv) For the sake of the example, let's create and move to an example directory: mkdir radon-example && cd radon-example To avoid affecting the original environment, create a new virtual environment: sudo apt install python3-venv python3 -m venv radon-miner-env source radon-miner-env/bin/activate Create a tmp folder to clone the repositories to analyze: mkdir radon-miner-env/tmp ls radon-miner-env/ bin include lib lib64 pyvenv.cfg share tmp Set up the environment variables required by the tool: export GITHUB_ACCESS_TOKEN=*************** export TMP_REPOSITORIES_DIR=./radon-miner-env/tmp/ Install the package: pip install repository-miner Finally, run: radon-miner mine github ansible adriagalin/ansible.motd . --verbose You should get a similar output: Mining adriagalin/ansible.motd [started at: 15:29] Identifying fixing-commits from closed issues related to bugs Identifying fixing-commits from commit messages Identifying ansible files modified in fixing-commits Identifying and labeling failure-prone files Generating reports HTML report created at ./report.html JSON report created at ./report.json You can now see the reports: ls failure-prone-files.html failure-prone-files.json Mine repository (using the Docker image)","title":"Mine"},{"location":"cli/mine/#mine","text":"usage: radon-miner mine [-h] [--branch BRANCH] [--verbose] {github,gitlab} {ansible,tosca} repository dest positional arguments: {github,gitlab} the source code versioning host {ansible,tosca} mine only commits modifying files of this language repository the repository full name: <onwer/name> (e.g., radon-h2020/radon-repository-miner) dest destination folder for the reports optional arguments: -h, --help show this help message and exit --branch BRANCH the repository branch to mine (default: master) --verbose show log Output Running this command will generate the following report files: dest/failure-prone-files.html dest/failure-prone-files.json File failure-prone-files.json is a list of dictionaries containing the filepath relative to the repository root, the commit hash at which the file was failure-prone, and the respective fixing-commit hash. Requirements To properly use this command you MUST add the following to your environment variables: GITHUB_ACCESS_TOKEN=<paste your token here> if you are using the github argument. See how to create a personal access token here . GITLAB_ACCESS_TOKEN=<paste your token here> if you are using the gitlab argument. See how to create a personal access token here . TMP_REPOSITORIES_DIR=<path/to/tmp/repositories/> to temporary clone the remote repository for analysis. Please, note that the repository will be cloned in this folder but not deleted. The latter step is left to the user, when and if needed.","title":"Mine"},{"location":"cli/mine/#examples","text":"","title":"Examples"},{"location":"cli/mine/#mine-repository-using-a-venv","text":"For the sake of the example, let's create and move to an example directory: mkdir radon-example && cd radon-example To avoid affecting the original environment, create a new virtual environment: sudo apt install python3-venv python3 -m venv radon-miner-env source radon-miner-env/bin/activate Create a tmp folder to clone the repositories to analyze: mkdir radon-miner-env/tmp ls radon-miner-env/ bin include lib lib64 pyvenv.cfg share tmp Set up the environment variables required by the tool: export GITHUB_ACCESS_TOKEN=*************** export TMP_REPOSITORIES_DIR=./radon-miner-env/tmp/ Install the package: pip install repository-miner Finally, run: radon-miner mine github ansible adriagalin/ansible.motd . --verbose You should get a similar output: Mining adriagalin/ansible.motd [started at: 15:29] Identifying fixing-commits from closed issues related to bugs Identifying fixing-commits from commit messages Identifying ansible files modified in fixing-commits Identifying and labeling failure-prone files Generating reports HTML report created at ./report.html JSON report created at ./report.json You can now see the reports: ls failure-prone-files.html failure-prone-files.json","title":"Mine repository (using a venv)"},{"location":"cli/mine/#mine-repository-using-the-docker-image","text":"","title":"Mine repository (using the Docker image)"}]}